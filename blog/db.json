{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/404.html","path":"404.html","modified":1,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1492581215043},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1492581215044},{"_id":"themes/next/.gitignore","hash":"de5b9b9e5b313b4a86e805b02f334d35c87bfe56","modified":1492581215044},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1492581215044},{"_id":"themes/next/.javascript_ignore","hash":"74b54cf920cbbf4038a68e54b7138af8b8f45588","modified":1492581215045},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1492581215045},{"_id":"themes/next/.travis.yml","hash":"360f38044910e74bf628b0799e19db90718b2cbe","modified":1492581215045},{"_id":"themes/next/README.md","hash":"06aaf1241e9e1619956c86d8b1397a643840a9d1","modified":1492581215046},{"_id":"themes/next/_config.yml","hash":"3214b1726a452e050880c97467ba39dfbd8ba2c6","modified":1492581215046},{"_id":"themes/next/README.en.md","hash":"953873fe2ee79bfc567b16dcdf8f91c1410444f8","modified":1492581215046},{"_id":"themes/next/gulpfile.coffee","hash":"14d8312979a0fa293c4ea078fbe978b429358428","modified":1492581215047},{"_id":"themes/next/bower.json","hash":"bd70cf5988bbfc8cbcf13adae659151a55466524","modified":1492581215046},{"_id":"themes/next/package.json","hash":"915d8187e05bb124f5b5436eedc30644f364cc86","modified":1492581215067},{"_id":"source/_posts/spring搭建.md","hash":"e031de84387610b3f21f1d9f7f0a6f6be6928b3b","modified":1499160492232},{"_id":"source/_posts/sql笔记.md","hash":"ce4a24460edc54f65b91869b454f8700c458147f","modified":1499158866080},{"_id":"source/_posts/java反射笔记.md","hash":"d40b17f0426e3af58976ec313aaad82f3d5d2a48","modified":1493000775114},{"_id":"source/_posts/struts2环境搭建.md","hash":"bc01b23568de52acacf1d14514b78d3d44c18034","modified":1494635603763},{"_id":"source/_posts/struts2中返回json数据.md","hash":"f0146bbf4b6b868e6ff08284f14b214aa7e6e585","modified":1494639636517},{"_id":"source/_posts/struts获取正文.md","hash":"affe9f2c635f89f1b618488af0928c8ff8b91b93","modified":1498281085450},{"_id":"source/_posts/webview中控制视频播放暂停.md","hash":"ce4473f4eb5f82221ef5bccec3c46c53b00afcea","modified":1492581215013},{"_id":"source/_posts/仿美团外卖添加商品的抛物线动画.md","hash":"1de77874a13da03193ad318b1647ff385f17969b","modified":1492581215013},{"_id":"source/_posts/停止-builiding.md","hash":"72027c34da113f5e9de8dd527f1bbb6e15e8f6bd","modified":1492581215014},{"_id":"source/_posts/自定义控件.md","hash":"f1814748f7e5b51f27aea34e5275a07dd2acb7a8","modified":1492581215014},{"_id":"source/categories/index.md","hash":"79fce1c440ff671329f40ba8bd2c1f39ca4a6304","modified":1492581215015},{"_id":"source/tags/index.md","hash":"0a2c02e3d26281d0b4cfe650820a75c349ae8160","modified":1492581215015},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"4312fb37fa2b8663006be3c4fe01125ec01171c1","modified":1492581215044},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"2692e36cc35b1594530981e7727771f601720a43","modified":1492581215044},{"_id":"themes/next/languages/de.yml","hash":"db6a9d669f4b6282cda6c0a2d4e03d3e308a4846","modified":1492581215047},{"_id":"themes/next/languages/default.yml","hash":"e6aed24f060300a0ea31099a7d7186ec03b6cb0d","modified":1492581215047},{"_id":"themes/next/languages/en.yml","hash":"e6aed24f060300a0ea31099a7d7186ec03b6cb0d","modified":1492581215047},{"_id":"source/_posts/for与foreach在List中的使用.md","hash":"d06bf27341c694a25bead708d2ac201225a4a319","modified":1492581215013},{"_id":"source/_posts/okhttp.md","hash":"8b9c9cb802f6b7c3fde538c70a226ba90043add5","modified":1492581215013},{"_id":"themes/next/languages/fr-FR.yml","hash":"e86e563d7ac8e763a1e6afdebcfa10c66c207c9c","modified":1492581215048},{"_id":"themes/next/languages/id.yml","hash":"d8b9dc017da0be7f71fda1cacd8064cbc38963b9","modified":1492581215048},{"_id":"themes/next/languages/ja.yml","hash":"bc89436a2a015ef72f43f265e56e37d94e73c0cd","modified":1492581215048},{"_id":"themes/next/languages/ko.yml","hash":"c59676f2af80c3c594c34c4a0fcbf65fd8864ff3","modified":1492581215049},{"_id":"themes/next/languages/pt-BR.yml","hash":"4b91f96b07e05705b28964df7460466c9b522e2c","modified":1492581215049},{"_id":"themes/next/languages/pt.yml","hash":"f364905121a816c9797acce07c0a4f248965b29a","modified":1492581215049},{"_id":"themes/next/languages/ru.yml","hash":"e71189d203feaeae515c79a46f0462f99aadc941","modified":1492581215049},{"_id":"themes/next/languages/zh-Hans.yml","hash":"5b69ab4ab097d37948c4f51ccddffd312ce031c1","modified":1492581215050},{"_id":"themes/next/languages/zh-hk.yml","hash":"abd889d418c1c25b5e8f837bbbaedb9389e935eb","modified":1492581215050},{"_id":"themes/next/languages/zh-tw.yml","hash":"dff76bee4ffa4b70b8ece2785bcd4b0f930bbcc5","modified":1492581215050},{"_id":"source/_posts/struts2拦截器.md","hash":"b12c8991c2c00c3e576b035e01eec27e2768aba3","modified":1494641860941},{"_id":"themes/next/layout/index.swig","hash":"e5b52e04296203262a400e8e36ae12426d31fd5b","modified":1492581215066},{"_id":"themes/next/layout/_layout.swig","hash":"54366831bac735c5916610c252a6b12550412be2","modified":1492581215052},{"_id":"themes/next/layout/archive.swig","hash":"b867a08f6b43de8b5d700c84b943df55917407ae","modified":1492581215066},{"_id":"themes/next/layout/category.swig","hash":"58cf08388901f7549b1fca95548b2c79173aa840","modified":1492581215066},{"_id":"themes/next/layout/page.swig","hash":"2a13804aa186f6062738d136e430870c53789bf4","modified":1492581215067},{"_id":"themes/next/layout/schedule.swig","hash":"595013860078799d455af4965b3a7c5c4fd3923c","modified":1492581215067},{"_id":"themes/next/layout/tag.swig","hash":"6f764ea3ab11eeb7c530df45528d449b14f5dc62","modified":1492581215067},{"_id":"themes/next/scripts/merge-configs.js","hash":"3ce1be32bb77ee19da25e8dae7dc04e2afc46ca1","modified":1492581215068},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1492581215068},{"_id":"themes/next/layout/post.swig","hash":"b8334c479840b7724638eec71971cbd8512ae58d","modified":1492581215067},{"_id":"themes/next/source/404.html","hash":"4546907ffdf9a28c4e3ff9756dc5c7bd241d96f7","modified":1492581215070},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1492581215129},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1492581215095},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1492581215130},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1492581215130},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1492581215052},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1492581215052},{"_id":"themes/next/layout/_macro/post.swig","hash":"032e10779704710396b243b32b4dc98ca0e16249","modified":1492581215052},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"c5cc0070ca7c9a8dbd4b09e0398db536c3cdbe8a","modified":1492581215053},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"6d40652784585d263c37b8a3723e43e04b926ca7","modified":1492581215052},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1492581215054},{"_id":"themes/next/layout/_macro/reward.swig","hash":"b6cb171f0ed227b82b8f7601814af2df93f3a09a","modified":1492581215053},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"9d111d6d4dff2cbec1ed8cdc836922b9ab578b21","modified":1492581215053},{"_id":"themes/next/layout/_partials/comments.swig","hash":"cd74d7d0aa2097de0e73e8e53cca5d022cec8c43","modified":1492581215053},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1492581215055},{"_id":"themes/next/layout/_partials/head.swig","hash":"376adb0c482242ef8bcad31b93b99cc5c35e92fa","modified":1492581215054},{"_id":"themes/next/layout/_partials/footer.swig","hash":"683616f4a80796051e2346d80acf838a589450b0","modified":1492581215054},{"_id":"themes/next/layout/_partials/header.swig","hash":"d6bf1d1554d91eaf1bfc40ba8905ae81673e5f45","modified":1492581215055},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1492581215055},{"_id":"themes/next/layout/_partials/search.swig","hash":"109b3d3403c72ac09926e35a1d00c6d36cc4f7fa","modified":1492581215056},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1492581215058},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1492581215058},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1492581215058},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"e9beddda9758d8739c41fc8c67b2e72fc29c1244","modified":1492581215065},{"_id":"themes/next/scripts/tags/button.js","hash":"aaf71be6b483fca7a65cd6296c2cf1c2271c26a6","modified":1492581215069},{"_id":"themes/next/scripts/tags/exturl.js","hash":"4de8b315a58095b39659b515387ea8091a67a9a4","modified":1492581215069},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1492581215069},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1492581215070},{"_id":"themes/next/scripts/tags/note.js","hash":"7dc14db08f2c74f8f1952534b424f220f5c000c6","modified":1492581215070},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1492581215069},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1492581215095},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"16505f61f19ba65f629dfd033f14ee9abcf18756","modified":1492581215096},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1492581215096},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1492581215096},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1492581215097},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1492581215097},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1492581215098},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1492581215098},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1492581215099},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1492581215098},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1492581215096},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1492581215098},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1492581215099},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1492581215099},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1492581215099},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1492581215059},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1492581215059},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1492581215087},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1492581215088},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1492581215094},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1492581215095},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1492581215088},{"_id":"themes/next/layout/_components/algolia-search/dom.swig","hash":"bb2c3a926bb7f8fea54d424882b25d93dfde7ae6","modified":1492581215051},{"_id":"themes/next/layout/_components/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1492581215051},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1492581215054},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1492581215055},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"db2b6ee7492ffb0b9c58a364fc9aad22ee39851a","modified":1492581215056},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1492581215057},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1492581215056},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1492581215057},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1492581215059},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1492581215059},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1492581215057},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"12684840de632eb16e53ffa863166306a756fd4f","modified":1492581215058},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1492581215057},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"8b34af99cb673853fd948c02d07eb11eb3fb41b4","modified":1492581215060},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"03d259066399c1eb4a436ea4e5e7a4802426d72c","modified":1492581215062},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"e495aed8fb36bf8015ddbd64366270a7debad2b0","modified":1492581215064},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1492581215065},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"9870afa9b66ad728c584551498c4d5ca6ee1e105","modified":1492581215064},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1492581215064},{"_id":"themes/next/layout/_scripts/third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1492581215065},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"a0f23e75a137d8c996c70e2059e0074f1e97a127","modified":1492581215088},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1492581215087},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e55265c8a8a6ae0c3c08e3509de92ee62c3cb5f6","modified":1492581215094},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"531934ea21ef4dc9f0978512050f54834f0a6cff","modified":1492581215088},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"09534b68bd1a708729b3cfffe17737e3af457757","modified":1492581215094},{"_id":"themes/next/source/css/_variables/base.styl","hash":"008955b907a15e86bc92e6765614cc099abf8bf1","modified":1492581215095},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1492581215100},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"a3abfe7504c891aa04356a74119ad672db6f4299","modified":1492581215100},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1492581215101},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"4a0da1bed19e65bd7db42421b447061bc1618710","modified":1492581215100},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1492581215101},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13d5396d2c5803cdd9732c727f5f2308b47368c","modified":1492581215102},{"_id":"themes/next/source/js/src/motion.js","hash":"ff9ea37d05c269e3a140c4ab448af03efc4bcc76","modified":1492581215101},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1492581215102},{"_id":"themes/next/source/js/src/utils.js","hash":"f29494901d2def85fb8b42b0dcdd8f3bd1256d7e","modified":1492581215103},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1492581215114},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1492581215114},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1492581215106},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1492581215114},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1492581215115},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"8868275e8b6340c87a81c69a54ed138d11fb3c3e","modified":1492581215114},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1492581215103},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1492581215112},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1492581215113},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1492581215112},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1492581215112},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1492581215124},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1492581215123},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1492581215123},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1492581215122},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1492581215124},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1492581215125},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1492581215124},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1492581215126},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1492581215126},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1492581215128},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1492581215129},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1492581215129},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1492581215060},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"24105e62d7f26946907fa14cd02589f899bf8122","modified":1492581215060},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1492581215060},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"a79e7e0d809fcf407593dd7ed9e023db21c3cbd6","modified":1492581215061},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1492581215061},{"_id":"themes/next/layout/_scripts/third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1492581215060},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1492581215061},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-mta.swig","hash":"e9a0590dafde1046356620dd2b81e83b6b3b0936","modified":1492581215061},{"_id":"themes/next/layout/_scripts/third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1492581215062},{"_id":"themes/next/layout/_scripts/third-party/comments/gentie.swig","hash":"0f38f053841ef77cdce56a84cfbb4dd4c3329486","modified":1492581215063},{"_id":"themes/next/layout/_scripts/third-party/comments/livere.swig","hash":"5830a52c2a555d3a1f19b67d7bf3d072376cdea9","modified":1492581215063},{"_id":"themes/next/layout/_scripts/third-party/comments/youyan.swig","hash":"de95ec8920d1660680078451008f8bd69f14d082","modified":1492581215063},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"e4a13e8cd19762ef3aea0e59dfae8b3c1f251f11","modified":1492581215062},{"_id":"themes/next/layout/_scripts/third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1492581215063},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4ba6f2a615693b9b5afc266d9c833697016085fd","modified":1492581215071},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"1dc2ed435e41ca041f43bd9633d5d95139afbb42","modified":1492581215071},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1492581215062},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"22828f5141c0cecb9ef25a110e194cdfa3a36423","modified":1492581215071},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1492581215071},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1492581215071},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1492581215122},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1492581215081},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"88559b13ce94311405b170a0506ded91273beceb","modified":1492581215076},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1492581215085},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"4998bedff9c84a09a294b8ef36ede2e3644d3528","modified":1492581215086},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1492581215086},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"c9218b48c56e52c06af9ce3cc8fbdae737cf16fe","modified":1492581215086},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1492581215091},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"f23ac53ab901c48859dd29eee6e386b60ff956ba","modified":1492581215092},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1492581215092},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1492581215091},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1492581215092},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1492581215089},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1492581215089},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1492581215086},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1492581215089},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1492581215089},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1492581215087},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1492581215093},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1492581215089},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"ce272226a1570f5f7c70243b751a5b0fe1671a88","modified":1492581215089},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1492581215090},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1492581215093},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1492581215094},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"fd8674eca737f4bb3b1ca66a3137f65922e2150a","modified":1492581215093},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"c4358416f0a116d7f4037542fa3b385947e80908","modified":1492581215102},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1492581215107},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1492581215108},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1492581215093},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"c48d4a561d047b3705924949b3ab7b57bee94ecd","modified":1492581215093},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1492581215107},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1492581215107},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1492581215108},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1492581215108},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1492581215111},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1492581215112},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1492581215110},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1492581215113},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"a02674d823c7b577d38c3cdb91953993b6e4b3a0","modified":1492581215115},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1492581215116},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1492581215114},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"3c1d63dd1176c77f9f4cdb1616fbb08c31b9822f","modified":1492581215116},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1492581215125},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1492581215126},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1492581215118},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1492581215117},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1492581215120},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1492581215121},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1492581215128},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1492581215072},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1492581215073},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"4c4ef6e997d0c6e21de39c2daa0c768e12c8c6fa","modified":1492581215072},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1492581215073},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1492581215073},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"104b5c79cd891506e0beaf938b083685f1da8637","modified":1492581215074},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1492581215075},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1492581215075},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1492581215073},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"4783f85872bc7e218c1522a5c1c68cd27a5922db","modified":1492581215076},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1492581215075},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1492581215076},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1492581215075},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1492581215077},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"a45f5fce643eec4e1b927165229d560364bcace1","modified":1492581215076},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"4866fb9453d7d4c83a1c4e55d74e4afed336eb8b","modified":1492581215076},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1492581215078},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1492581215078},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"350469437b20ecfd6f3ca45e400478f8e3f71cfb","modified":1492581215078},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"61ec8a8481e8b76f2943235256c6d4f89c751c1c","modified":1492581215077},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1492581215074},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1492581215077},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"8355b0e9375b3245508efda0e18acd069c2aa767","modified":1492581215078},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"011d5828b4972b2df0b429794b4466ba5bc1b49e","modified":1492581215079},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1492581215079},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"821991c0890966a512b43e8b1cf9537e738a09a0","modified":1492581215079},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1492581215080},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"7f2bdd6109614d35408ee5ac3335aad4464c69c7","modified":1492581215079},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1492581215074},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"d406a09af606be82f716c15e4ad597b7fdcf0728","modified":1492581215074},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1492581215079},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"c9f76d4f6806ef70fa2160c97afa0a0e0ae5373e","modified":1492581215081},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1492581215081},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"394888efec32749b353292a59ec7f1b609d6325e","modified":1492581215080},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"3159b55f35c40bd08e55b00148c523760a708c51","modified":1492581215082},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1492581215082},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"702be9e57dd6ff5fa99642a1f6e3df26215b8805","modified":1492581215081},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1492581215082},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1492581215082},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"38c0db81a7361b947aeb8a4cc2919ffd9b33503e","modified":1492581215083},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1492581215083},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"8420b4be386469337243336aee694297875bd439","modified":1492581215083},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1492581215084},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1492581215083},{"_id":"themes/next/source/css/_common/components/third-party/gentie.styl","hash":"cd526e814f9323a79fe835085d64867d34b3715d","modified":1492581215084},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1492581215085},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"dc944a01dd59f5ed2d44bb22fdb21fc3f455948f","modified":1492581215085},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"cf900c5026ab36f31118317d0ae32a213e3ec2a9","modified":1492581215092},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1492581215090},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1492581215084},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"cf900c5026ab36f31118317d0ae32a213e3ec2a9","modified":1492581215091},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"6516b70ee9e44f1cf9443412cc31bcccb6cdb684","modified":1492581215085},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1492581215109},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1492581215109},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1492581215109},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1492581215110},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1492581215110},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1492581215110},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1492581215120},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1492581215106},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"964e8dac2cee79c4b49b5bc300675773f6518812","modified":1492581215119}],"Category":[{"name":"javaee","_id":"cj4qaebcg00042oq9a3mqaa4d"},{"name":"笔记","_id":"cj4qaebcv000e2oq9w0f1qhoq"},{"name":"library","_id":"cj4qaebd4000s2oq94qz1doju"},{"name":"java","parent":"cj4qaebcv000e2oq9w0f1qhoq","_id":"cj4qaebd8000y2oq9qy7czhm3"},{"name":"android studio","parent":"cj4qaebcv000e2oq9w0f1qhoq","_id":"cj4qaebda00122oq92e5tb36r"},{"name":"自定义view","parent":"cj4qaebcv000e2oq9w0f1qhoq","_id":"cj4qaebdd00182oq9a05juqzp"},{"name":"android","parent":"cj4qaebcv000e2oq9w0f1qhoq","_id":"cj4qaebdh001c2oq9avqxr9p9"}],"Data":[],"Page":[{"title":"分类","date":"2017-03-20T01:33:31.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2017-03-20 09:33:31\ntype: \"categories\"\n---\n","updated":"2017-04-19T05:53:35.015Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cj4qaebcb00012oq9pocvffo6","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2017-03-20T01:31:59.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2017-03-20 09:31:59\ntype: \"tags\"\n---\n","updated":"2017-04-19T05:53:35.015Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cj4qaebce00032oq91xo9tuzq","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"springmvc搭建","date":"2017-07-04T09:02:30.000Z","_content":"#### 创建工程\n* 直接在eclipse中新建一个mavneproject--->选择webapp那项建立工程\n* 在pom.xml中添加spring的核心依赖\n```xml\n<dependency>\n\t\t\t<groupId>org.springframework</groupId>\n\t\t\t<artifactId>spring-web</artifactId>\n\t\t\t<version>4.3.9.RELEASE</version>\n</dependency>\n<dependency>\n\t\t\t<groupId>org.springframework</groupId>\n\t\t\t<artifactId>spring-webmvc</artifactId>\n\t\t\t<version>4.3.9.RELEASE</version>\n</dependency>\n```\n\n* 在web.xml中添加配置\n```xml\n<servlet>\n\t\t<servlet-name>spring-mvc</servlet-name>\n\t\t<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>\n</servlet>\n<servlet-mapping>\n\t\t<servlet-name>spring-mvc</servlet-name>\n\t\t<url-pattern>/</url-pattern>\n</servlet-mapping>\n```\n\n* 在web.xml 同级别创建spring-mvc-servlet.xml\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!-- Bean头部 -->\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:p=\"http://www.springframework.org/schema/p\"\n\txmlns:mvc=\"http://www.springframework.org/schema/mvc\" xmlns:context=\"http://www.springframework.org/schema/context\"\n\txmlns:util=\"http://www.springframework.org/schema/util\"\n\txsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd  \n            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd  \n            http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd              \n            http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd\">\n\n\t<!-- 激活@Controller模式 -->\n\t<mvc:annotation-driven />\n\t<!-- 对包中的所有类进行扫描，以完成Bean创建和自动依赖注入的功能 需要更改 -->\n\t<context:component-scan base-package=\"li.hello\" />\n\n\t<bean\n\t\tclass=\"org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter\" />\n\t<!-- 错误异常的统一处理 id必须是这个-->\n\t<bean id=\"handlerExceptionResolver\" class=\"handler.ExceptionHandler\" />\n\n\t<bean id=\"viewResolver\"\n\t\tclass=\"org.springframework.web.servlet.view.InternalResourceViewResolver\">\n\t\t<property name=\"prefix\">\n\t\t\t<value>/WEB-INF/jsp/</value>\n\t\t</property>\n\t\t<property name=\"suffix\">\n\t\t\t<value>.jsp</value>\n\t\t</property>\n\t</bean>\n</beans>\n```\n\n#### 编写Controller\n* 新建类 类的包名应该在上面扫描的包注册过\n\n```java\n@RequestMapping(\"/phone/app/test\") //请求的地址\n@Controller                        //必须标记为controller 才可以被识别\npublic class Test {\n\n\t// http://172.16.0.35:8080/lidong/phone/app/test?name=13&password=133\n\t// {\n\t// \"name\": \"13\",\n\t// \"password\": \"133\"\n\t// }\n\t@RequestMapping(value = \"\")\n\tpublic View test0(Model model, @RequestParam(defaultValue = \"\", name = \"name\") String name,\n\t\t\t@RequestParam(required = true) String password) {\n\t\tmodel.addAttribute(\"name\", name);\n\t\tmodel.addAttribute(\"password\", password);\n\t\treturn new MappingJackson2JsonView();\n\t}\n\n\t// http://172.16.0.35:8080/lidong/phone/app/test/test1?a=3&b=4&c=34&c=111&c=15\n\t// {\n\t// \"a\": \"3\",\n\t// \"b\": 4,\n\t// \"haha\": 1,\n\t// \"c\": [\n\t// \"34\",\n\t// \"111\",\n\t// \"15\"\n\t// ]\n\t// }\n\t@RequestMapping(value = \"/test1\", method = RequestMethod.POST)\n\tpublic View test1(Model model, String a, int b, String[] c) {\n\t\tArrayList<String> arrayList = new ArrayList<>();\n\t\tfor (int i = 0; i < c.length; i++) {\n\t\t\tarrayList.add(c[i]);\n\t\t}\n\t\tmodel.addAttribute(\"a\", a);\n\t\tmodel.addAttribute(\"b\", b);\n\t\tmodel.addAttribute(\"c\", arrayList);\n\t\tmodel.addAttribute(\"haha\", 1);\n\t\treturn new MappingJackson2JsonView();\n\t}\n\n\t// http://172.16.0.35:8080/lidong/phone/app/test/test2/lidong/123\n\t// {\n\t// \"name\": \"lidong\",\n\t// \"password\": \"123\"\n\t// }\n\t@RequestMapping(value = \"/test2/{name}/{password}\", method = RequestMethod.GET)\n\tpublic View test2(Model model, @PathVariable String name, @PathVariable String password) {\n\t\tmodel.addAttribute(\"name\", name);\n\t\tmodel.addAttribute(\"password\", password);\n\t\treturn new MappingJackson2JsonView();\n\t}\n\n\t@RequestMapping(value = \"/test3\")\n\tpublic View test3(Model model, MultipartFile file, String name, String password) {\n\t\tString url = \"testRecord/\" + name + \"/\" + password + \"/\" + file.getOriginalFilename();\n\t\tString filePath = FileUtils.getAbsoluteFilePath(url);\n\t\tcopytFile(file, filePath);\n\t\tmodel.addAttribute(\"result\", 1);\n\t\treturn new MappingJackson2JsonView();\n\t}\n\n\t@RequestMapping(value = \"/test4\")\n\tpublic View test3(Model model, MultipartFile[] file, String name, String password) {\n\t\tfor (int i = 0; i < file.length; i++) {\n\t\t\tString url = \"testRecord/\" + name + \"/\" + password + \"/\" + file[i].getOriginalFilename();\n\t\t\tString filePath = FileUtils.getAbsoluteFilePath(url);\n\t\t\tcopytFile(file[i], filePath);\n\t\t}\n\t\tmodel.addAttribute(\"result\", 1);\n\t\treturn new MappingJackson2JsonView();\n\t}\n\n  //spring中转移文件的方法\n\tprivate void copytFile(MultipartFile file, String dest) {\n\t\ttry {\n\t\t\tFile destFile = new File(dest);\n\t\t\tif (destFile.exists()) {\n\t\t\t\tdestFile.delete();\n\t\t\t}\n\t\t\tif (!destFile.getParentFile().exists()) {\n\t\t\t\tdestFile.getParentFile().mkdirs();\n\t\t\t}\n\t\t\tfile.transferTo(destFile);\n\t\t} catch (IllegalStateException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t} catch (IOException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}\n\n```\n\n#### springmvc 中返回json的两种方式\n* 添加maven依赖\n```xml\n<dependency>\n\t\t\t<groupId>com.fasterxml.jackson.core</groupId>\n\t\t\t<artifactId>jackson-core</artifactId>\n\t\t\t<version>2.5.4</version>\n</dependency>\n<dependency>\n\t\t\t<groupId>com.fasterxml.jackson.core</groupId>\n\t\t\t<artifactId>jackson-databind</artifactId>\n\t\t\t<version>2.5.4</version>\n</dependency>\n```\n* 两种方法\n  * 第一种@RequestBody\n  ```java\n  @RequestMapping(\"test\")\n\t@ResponseBody\n\tpublic Map<String, Object> hello() {\n\t\tMap<String, Object> map = new HashMap<String, Object>();\n\t\tmap.put(\"haha\", \"222\");\n\t\treturn map;\n\t}\n  ```\n  * 第二种\n  ```java\n  @RequestMapping(\"test1\")\n\tpublic View hello1(Model model) {\n\t\tmodel.addAttribute(\"haha\", \"222\");\n\t\treturn new MappingJackson2JsonView();\n\t}\n  ```\n\n#### springmvc的错误统一处理\n* 如第一步注册\n* 实现HandlerExceptionResolver\n```java\npublic class ExceptionHandler implements HandlerExceptionResolver {\n\n\tpublic ModelAndView resolveException(HttpServletRequest request, HttpServletResponse response, Object handler,\n\t\t\tException ex) {\n\t\ttry{\n\t\t\tthrow ex;\n\t\t}catch (Exception e) {\n\t\t\tModelAndView modelAndView = new ModelAndView();\n\t\t\tmodelAndView.setView(new MappingJackson2JsonView());\n\t\t\tmodelAndView.addObject(\"result\", \"0\");\n\t\t\tmodelAndView.addObject(\"desc\", \"\");\n\t\t\treturn modelAndView;\n\t\t}\n\t}\n}\n```\n","source":"_posts/spring搭建.md","raw":"---\ntitle: springmvc搭建\ndate: 2017-07-04 17:02:30\ncategories:\n- javaee\ntags:\n- spring\n- javaee\n---\n#### 创建工程\n* 直接在eclipse中新建一个mavneproject--->选择webapp那项建立工程\n* 在pom.xml中添加spring的核心依赖\n```xml\n<dependency>\n\t\t\t<groupId>org.springframework</groupId>\n\t\t\t<artifactId>spring-web</artifactId>\n\t\t\t<version>4.3.9.RELEASE</version>\n</dependency>\n<dependency>\n\t\t\t<groupId>org.springframework</groupId>\n\t\t\t<artifactId>spring-webmvc</artifactId>\n\t\t\t<version>4.3.9.RELEASE</version>\n</dependency>\n```\n\n* 在web.xml中添加配置\n```xml\n<servlet>\n\t\t<servlet-name>spring-mvc</servlet-name>\n\t\t<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>\n</servlet>\n<servlet-mapping>\n\t\t<servlet-name>spring-mvc</servlet-name>\n\t\t<url-pattern>/</url-pattern>\n</servlet-mapping>\n```\n\n* 在web.xml 同级别创建spring-mvc-servlet.xml\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!-- Bean头部 -->\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:p=\"http://www.springframework.org/schema/p\"\n\txmlns:mvc=\"http://www.springframework.org/schema/mvc\" xmlns:context=\"http://www.springframework.org/schema/context\"\n\txmlns:util=\"http://www.springframework.org/schema/util\"\n\txsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd  \n            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd  \n            http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd              \n            http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd\">\n\n\t<!-- 激活@Controller模式 -->\n\t<mvc:annotation-driven />\n\t<!-- 对包中的所有类进行扫描，以完成Bean创建和自动依赖注入的功能 需要更改 -->\n\t<context:component-scan base-package=\"li.hello\" />\n\n\t<bean\n\t\tclass=\"org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter\" />\n\t<!-- 错误异常的统一处理 id必须是这个-->\n\t<bean id=\"handlerExceptionResolver\" class=\"handler.ExceptionHandler\" />\n\n\t<bean id=\"viewResolver\"\n\t\tclass=\"org.springframework.web.servlet.view.InternalResourceViewResolver\">\n\t\t<property name=\"prefix\">\n\t\t\t<value>/WEB-INF/jsp/</value>\n\t\t</property>\n\t\t<property name=\"suffix\">\n\t\t\t<value>.jsp</value>\n\t\t</property>\n\t</bean>\n</beans>\n```\n\n#### 编写Controller\n* 新建类 类的包名应该在上面扫描的包注册过\n\n```java\n@RequestMapping(\"/phone/app/test\") //请求的地址\n@Controller                        //必须标记为controller 才可以被识别\npublic class Test {\n\n\t// http://172.16.0.35:8080/lidong/phone/app/test?name=13&password=133\n\t// {\n\t// \"name\": \"13\",\n\t// \"password\": \"133\"\n\t// }\n\t@RequestMapping(value = \"\")\n\tpublic View test0(Model model, @RequestParam(defaultValue = \"\", name = \"name\") String name,\n\t\t\t@RequestParam(required = true) String password) {\n\t\tmodel.addAttribute(\"name\", name);\n\t\tmodel.addAttribute(\"password\", password);\n\t\treturn new MappingJackson2JsonView();\n\t}\n\n\t// http://172.16.0.35:8080/lidong/phone/app/test/test1?a=3&b=4&c=34&c=111&c=15\n\t// {\n\t// \"a\": \"3\",\n\t// \"b\": 4,\n\t// \"haha\": 1,\n\t// \"c\": [\n\t// \"34\",\n\t// \"111\",\n\t// \"15\"\n\t// ]\n\t// }\n\t@RequestMapping(value = \"/test1\", method = RequestMethod.POST)\n\tpublic View test1(Model model, String a, int b, String[] c) {\n\t\tArrayList<String> arrayList = new ArrayList<>();\n\t\tfor (int i = 0; i < c.length; i++) {\n\t\t\tarrayList.add(c[i]);\n\t\t}\n\t\tmodel.addAttribute(\"a\", a);\n\t\tmodel.addAttribute(\"b\", b);\n\t\tmodel.addAttribute(\"c\", arrayList);\n\t\tmodel.addAttribute(\"haha\", 1);\n\t\treturn new MappingJackson2JsonView();\n\t}\n\n\t// http://172.16.0.35:8080/lidong/phone/app/test/test2/lidong/123\n\t// {\n\t// \"name\": \"lidong\",\n\t// \"password\": \"123\"\n\t// }\n\t@RequestMapping(value = \"/test2/{name}/{password}\", method = RequestMethod.GET)\n\tpublic View test2(Model model, @PathVariable String name, @PathVariable String password) {\n\t\tmodel.addAttribute(\"name\", name);\n\t\tmodel.addAttribute(\"password\", password);\n\t\treturn new MappingJackson2JsonView();\n\t}\n\n\t@RequestMapping(value = \"/test3\")\n\tpublic View test3(Model model, MultipartFile file, String name, String password) {\n\t\tString url = \"testRecord/\" + name + \"/\" + password + \"/\" + file.getOriginalFilename();\n\t\tString filePath = FileUtils.getAbsoluteFilePath(url);\n\t\tcopytFile(file, filePath);\n\t\tmodel.addAttribute(\"result\", 1);\n\t\treturn new MappingJackson2JsonView();\n\t}\n\n\t@RequestMapping(value = \"/test4\")\n\tpublic View test3(Model model, MultipartFile[] file, String name, String password) {\n\t\tfor (int i = 0; i < file.length; i++) {\n\t\t\tString url = \"testRecord/\" + name + \"/\" + password + \"/\" + file[i].getOriginalFilename();\n\t\t\tString filePath = FileUtils.getAbsoluteFilePath(url);\n\t\t\tcopytFile(file[i], filePath);\n\t\t}\n\t\tmodel.addAttribute(\"result\", 1);\n\t\treturn new MappingJackson2JsonView();\n\t}\n\n  //spring中转移文件的方法\n\tprivate void copytFile(MultipartFile file, String dest) {\n\t\ttry {\n\t\t\tFile destFile = new File(dest);\n\t\t\tif (destFile.exists()) {\n\t\t\t\tdestFile.delete();\n\t\t\t}\n\t\t\tif (!destFile.getParentFile().exists()) {\n\t\t\t\tdestFile.getParentFile().mkdirs();\n\t\t\t}\n\t\t\tfile.transferTo(destFile);\n\t\t} catch (IllegalStateException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t} catch (IOException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}\n\n```\n\n#### springmvc 中返回json的两种方式\n* 添加maven依赖\n```xml\n<dependency>\n\t\t\t<groupId>com.fasterxml.jackson.core</groupId>\n\t\t\t<artifactId>jackson-core</artifactId>\n\t\t\t<version>2.5.4</version>\n</dependency>\n<dependency>\n\t\t\t<groupId>com.fasterxml.jackson.core</groupId>\n\t\t\t<artifactId>jackson-databind</artifactId>\n\t\t\t<version>2.5.4</version>\n</dependency>\n```\n* 两种方法\n  * 第一种@RequestBody\n  ```java\n  @RequestMapping(\"test\")\n\t@ResponseBody\n\tpublic Map<String, Object> hello() {\n\t\tMap<String, Object> map = new HashMap<String, Object>();\n\t\tmap.put(\"haha\", \"222\");\n\t\treturn map;\n\t}\n  ```\n  * 第二种\n  ```java\n  @RequestMapping(\"test1\")\n\tpublic View hello1(Model model) {\n\t\tmodel.addAttribute(\"haha\", \"222\");\n\t\treturn new MappingJackson2JsonView();\n\t}\n  ```\n\n#### springmvc的错误统一处理\n* 如第一步注册\n* 实现HandlerExceptionResolver\n```java\npublic class ExceptionHandler implements HandlerExceptionResolver {\n\n\tpublic ModelAndView resolveException(HttpServletRequest request, HttpServletResponse response, Object handler,\n\t\t\tException ex) {\n\t\ttry{\n\t\t\tthrow ex;\n\t\t}catch (Exception e) {\n\t\t\tModelAndView modelAndView = new ModelAndView();\n\t\t\tmodelAndView.setView(new MappingJackson2JsonView());\n\t\t\tmodelAndView.addObject(\"result\", \"0\");\n\t\t\tmodelAndView.addObject(\"desc\", \"\");\n\t\t\treturn modelAndView;\n\t\t}\n\t}\n}\n```\n","slug":"spring搭建","published":1,"updated":"2017-07-04T09:28:12.232Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4qaebbz00002oq9qf3l0u2s","content":"<h4 id=\"创建工程\"><a href=\"#创建工程\" class=\"headerlink\" title=\"创建工程\"></a>创建工程</h4><ul>\n<li>直接在eclipse中新建一个mavneproject—&gt;选择webapp那项建立工程</li>\n<li><p>在pom.xml中添加spring的核心依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.3.9.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-webmvc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.3.9.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>在web.xml中添加配置</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>spring-mvc<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>spring-mvc<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>在web.xml 同级别创建spring-mvc-servlet.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</div><div class=\"line\"><span class=\"comment\">&lt;!-- Bean头部 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></div><div class=\"line\">\t<span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span> <span class=\"attr\">xmlns:p</span>=<span class=\"string\">\"http://www.springframework.org/schema/p\"</span></div><div class=\"line\">\t<span class=\"attr\">xmlns:mvc</span>=<span class=\"string\">\"http://www.springframework.org/schema/mvc\"</span> <span class=\"attr\">xmlns:context</span>=<span class=\"string\">\"http://www.springframework.org/schema/context\"</span></div><div class=\"line\">\t<span class=\"attr\">xmlns:util</span>=<span class=\"string\">\"http://www.springframework.org/schema/util\"</span></div><div class=\"line\">\t<span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd  </span></div><div class=\"line\">            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd  </div><div class=\"line\">            http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd              </div><div class=\"line\">            http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd\"&gt;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">&lt;!-- 激活@Controller模式 --&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">mvc:annotation-driven</span> /&gt;</span></div><div class=\"line\">\t<span class=\"comment\">&lt;!-- 对包中的所有类进行扫描，以完成Bean创建和自动依赖注入的功能 需要更改 --&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">\"li.hello\"</span> /&gt;</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span></span></div><div class=\"line\">\t\t<span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter\"</span> /&gt;</div><div class=\"line\">\t<span class=\"comment\">&lt;!-- 错误异常的统一处理 id必须是这个--&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"handlerExceptionResolver\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"handler.ExceptionHandler\"</span> /&gt;</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"viewResolver\"</span></span></div><div class=\"line\">\t\t<span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.web.servlet.view.InternalResourceViewResolver\"</span>&gt;</div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"prefix\"</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>/WEB-INF/jsp/<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"suffix\"</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>.jsp<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"编写Controller\"><a href=\"#编写Controller\" class=\"headerlink\" title=\"编写Controller\"></a>编写Controller</h4><ul>\n<li>新建类 类的包名应该在上面扫描的包注册过</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/phone/app/test\"</span>) <span class=\"comment\">//请求的地址</span></div><div class=\"line\"><span class=\"meta\">@Controller</span>                        <span class=\"comment\">//必须标记为controller 才可以被识别</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// http://172.16.0.35:8080/lidong/phone/app/test?name=13&amp;password=133</span></div><div class=\"line\">\t<span class=\"comment\">// &#123;</span></div><div class=\"line\">\t<span class=\"comment\">// \"name\": \"13\",</span></div><div class=\"line\">\t<span class=\"comment\">// \"password\": \"133\"</span></div><div class=\"line\">\t<span class=\"comment\">// &#125;</span></div><div class=\"line\">\t<span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"\"</span>)</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">test0</span><span class=\"params\">(Model model, @RequestParam(defaultValue = <span class=\"string\">\"\"</span>, name = <span class=\"string\">\"name\"</span>)</span> String name,</span></div><div class=\"line\">\t\t\t@<span class=\"title\">RequestParam</span><span class=\"params\">(required = <span class=\"keyword\">true</span>)</span> String password) &#123;</div><div class=\"line\">\t\tmodel.addAttribute(<span class=\"string\">\"name\"</span>, name);</div><div class=\"line\">\t\tmodel.addAttribute(<span class=\"string\">\"password\"</span>, password);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MappingJackson2JsonView();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// http://172.16.0.35:8080/lidong/phone/app/test/test1?a=3&amp;b=4&amp;c=34&amp;c=111&amp;c=15</span></div><div class=\"line\">\t<span class=\"comment\">// &#123;</span></div><div class=\"line\">\t<span class=\"comment\">// \"a\": \"3\",</span></div><div class=\"line\">\t<span class=\"comment\">// \"b\": 4,</span></div><div class=\"line\">\t<span class=\"comment\">// \"haha\": 1,</span></div><div class=\"line\">\t<span class=\"comment\">// \"c\": [</span></div><div class=\"line\">\t<span class=\"comment\">// \"34\",</span></div><div class=\"line\">\t<span class=\"comment\">// \"111\",</span></div><div class=\"line\">\t<span class=\"comment\">// \"15\"</span></div><div class=\"line\">\t<span class=\"comment\">// ]</span></div><div class=\"line\">\t<span class=\"comment\">// &#125;</span></div><div class=\"line\">\t<span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/test1\"</span>, method = RequestMethod.POST)</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">test1</span><span class=\"params\">(Model model, String a, <span class=\"keyword\">int</span> b, String[] c)</span> </span>&#123;</div><div class=\"line\">\t\tArrayList&lt;String&gt; arrayList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; c.length; i++) &#123;</div><div class=\"line\">\t\t\tarrayList.add(c[i]);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tmodel.addAttribute(<span class=\"string\">\"a\"</span>, a);</div><div class=\"line\">\t\tmodel.addAttribute(<span class=\"string\">\"b\"</span>, b);</div><div class=\"line\">\t\tmodel.addAttribute(<span class=\"string\">\"c\"</span>, arrayList);</div><div class=\"line\">\t\tmodel.addAttribute(<span class=\"string\">\"haha\"</span>, <span class=\"number\">1</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MappingJackson2JsonView();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// http://172.16.0.35:8080/lidong/phone/app/test/test2/lidong/123</span></div><div class=\"line\">\t<span class=\"comment\">// &#123;</span></div><div class=\"line\">\t<span class=\"comment\">// \"name\": \"lidong\",</span></div><div class=\"line\">\t<span class=\"comment\">// \"password\": \"123\"</span></div><div class=\"line\">\t<span class=\"comment\">// &#125;</span></div><div class=\"line\">\t<span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/test2/&#123;name&#125;/&#123;password&#125;\"</span>, method = RequestMethod.GET)</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">test2</span><span class=\"params\">(Model model, @PathVariable String name, @PathVariable String password)</span> </span>&#123;</div><div class=\"line\">\t\tmodel.addAttribute(<span class=\"string\">\"name\"</span>, name);</div><div class=\"line\">\t\tmodel.addAttribute(<span class=\"string\">\"password\"</span>, password);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MappingJackson2JsonView();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/test3\"</span>)</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">test3</span><span class=\"params\">(Model model, MultipartFile file, String name, String password)</span> </span>&#123;</div><div class=\"line\">\t\tString url = <span class=\"string\">\"testRecord/\"</span> + name + <span class=\"string\">\"/\"</span> + password + <span class=\"string\">\"/\"</span> + file.getOriginalFilename();</div><div class=\"line\">\t\tString filePath = FileUtils.getAbsoluteFilePath(url);</div><div class=\"line\">\t\tcopytFile(file, filePath);</div><div class=\"line\">\t\tmodel.addAttribute(<span class=\"string\">\"result\"</span>, <span class=\"number\">1</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MappingJackson2JsonView();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/test4\"</span>)</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">test3</span><span class=\"params\">(Model model, MultipartFile[] file, String name, String password)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; file.length; i++) &#123;</div><div class=\"line\">\t\t\tString url = <span class=\"string\">\"testRecord/\"</span> + name + <span class=\"string\">\"/\"</span> + password + <span class=\"string\">\"/\"</span> + file[i].getOriginalFilename();</div><div class=\"line\">\t\t\tString filePath = FileUtils.getAbsoluteFilePath(url);</div><div class=\"line\">\t\t\tcopytFile(file[i], filePath);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tmodel.addAttribute(<span class=\"string\">\"result\"</span>, <span class=\"number\">1</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MappingJackson2JsonView();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//spring中转移文件的方法</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">copytFile</span><span class=\"params\">(MultipartFile file, String dest)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\tFile destFile = <span class=\"keyword\">new</span> File(dest);</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (destFile.exists()) &#123;</div><div class=\"line\">\t\t\t\tdestFile.delete();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!destFile.getParentFile().exists()) &#123;</div><div class=\"line\">\t\t\t\tdestFile.getParentFile().mkdirs();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\tfile.transferTo(destFile);</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (IllegalStateException e) &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"springmvc-中返回json的两种方式\"><a href=\"#springmvc-中返回json的两种方式\" class=\"headerlink\" title=\"springmvc 中返回json的两种方式\"></a>springmvc 中返回json的两种方式</h4><ul>\n<li><p>添加maven依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jackson-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.5.4<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jackson-databind<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.5.4<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>两种方法</p>\n<ul>\n<li><p>第一种@RequestBody</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"test\"</span>)</div><div class=\"line\"><span class=\"meta\">@ResponseBody</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Map&lt;String, Object&gt; <span class=\"title\">hello</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\tMap&lt;String, Object&gt; map = <span class=\"keyword\">new</span> HashMap&lt;String, Object&gt;();</div><div class=\"line\">\tmap.put(<span class=\"string\">\"haha\"</span>, <span class=\"string\">\"222\"</span>);</div><div class=\"line\">\t<span class=\"keyword\">return</span> map;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>第二种</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"test1\"</span>)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">hello1</span><span class=\"params\">(Model model)</span> </span>&#123;</div><div class=\"line\">\tmodel.addAttribute(<span class=\"string\">\"haha\"</span>, <span class=\"string\">\"222\"</span>);</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MappingJackson2JsonView();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"springmvc的错误统一处理\"><a href=\"#springmvc的错误统一处理\" class=\"headerlink\" title=\"springmvc的错误统一处理\"></a>springmvc的错误统一处理</h4><ul>\n<li>如第一步注册</li>\n<li>实现HandlerExceptionResolver<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExceptionHandler</span> <span class=\"keyword\">implements</span> <span class=\"title\">HandlerExceptionResolver</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> ModelAndView <span class=\"title\">resolveException</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler,</span></span></div><div class=\"line\">\t\t\tException ex) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">try</span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">throw</span> ex;</div><div class=\"line\">\t\t&#125;<span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">\t\t\tModelAndView modelAndView = <span class=\"keyword\">new</span> ModelAndView();</div><div class=\"line\">\t\t\tmodelAndView.setView(<span class=\"keyword\">new</span> MappingJackson2JsonView());</div><div class=\"line\">\t\t\tmodelAndView.addObject(<span class=\"string\">\"result\"</span>, <span class=\"string\">\"0\"</span>);</div><div class=\"line\">\t\t\tmodelAndView.addObject(<span class=\"string\">\"desc\"</span>, <span class=\"string\">\"\"</span>);</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> modelAndView;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"创建工程\"><a href=\"#创建工程\" class=\"headerlink\" title=\"创建工程\"></a>创建工程</h4><ul>\n<li>直接在eclipse中新建一个mavneproject—&gt;选择webapp那项建立工程</li>\n<li><p>在pom.xml中添加spring的核心依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.3.9.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-webmvc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.3.9.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>在web.xml中添加配置</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>spring-mvc<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>spring-mvc<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>在web.xml 同级别创建spring-mvc-servlet.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</div><div class=\"line\"><span class=\"comment\">&lt;!-- Bean头部 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></div><div class=\"line\">\t<span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span> <span class=\"attr\">xmlns:p</span>=<span class=\"string\">\"http://www.springframework.org/schema/p\"</span></div><div class=\"line\">\t<span class=\"attr\">xmlns:mvc</span>=<span class=\"string\">\"http://www.springframework.org/schema/mvc\"</span> <span class=\"attr\">xmlns:context</span>=<span class=\"string\">\"http://www.springframework.org/schema/context\"</span></div><div class=\"line\">\t<span class=\"attr\">xmlns:util</span>=<span class=\"string\">\"http://www.springframework.org/schema/util\"</span></div><div class=\"line\">\t<span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd  </div><div class=\"line\">            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd  </div><div class=\"line\">            http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd              </div><div class=\"line\">            http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">&lt;!-- 激活@Controller模式 --&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">mvc:annotation-driven</span> /&gt;</span></div><div class=\"line\">\t<span class=\"comment\">&lt;!-- 对包中的所有类进行扫描，以完成Bean创建和自动依赖注入的功能 需要更改 --&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">\"li.hello\"</span> /&gt;</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span></div><div class=\"line\">\t\t<span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter\"</span> /&gt;</span></div><div class=\"line\">\t<span class=\"comment\">&lt;!-- 错误异常的统一处理 id必须是这个--&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"handlerExceptionResolver\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"handler.ExceptionHandler\"</span> /&gt;</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"viewResolver\"</span></div><div class=\"line\">\t\t<span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.web.servlet.view.InternalResourceViewResolver\"</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"prefix\"</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>/WEB-INF/jsp/<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"suffix\"</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>.jsp<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"编写Controller\"><a href=\"#编写Controller\" class=\"headerlink\" title=\"编写Controller\"></a>编写Controller</h4><ul>\n<li>新建类 类的包名应该在上面扫描的包注册过</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/phone/app/test\"</span>) <span class=\"comment\">//请求的地址</span></div><div class=\"line\"><span class=\"meta\">@Controller</span>                        <span class=\"comment\">//必须标记为controller 才可以被识别</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// http://172.16.0.35:8080/lidong/phone/app/test?name=13&amp;password=133</span></div><div class=\"line\">\t<span class=\"comment\">// &#123;</span></div><div class=\"line\">\t<span class=\"comment\">// \"name\": \"13\",</span></div><div class=\"line\">\t<span class=\"comment\">// \"password\": \"133\"</span></div><div class=\"line\">\t<span class=\"comment\">// &#125;</span></div><div class=\"line\">\t<span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"\"</span>)</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">test0</span><span class=\"params\">(Model model, @RequestParam(defaultValue = <span class=\"string\">\"\"</span>, name = <span class=\"string\">\"name\"</span>)</span> String name,</div><div class=\"line\">\t\t\t@<span class=\"title\">RequestParam</span><span class=\"params\">(required = <span class=\"keyword\">true</span>)</span> String password) </span>&#123;</div><div class=\"line\">\t\tmodel.addAttribute(<span class=\"string\">\"name\"</span>, name);</div><div class=\"line\">\t\tmodel.addAttribute(<span class=\"string\">\"password\"</span>, password);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MappingJackson2JsonView();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// http://172.16.0.35:8080/lidong/phone/app/test/test1?a=3&amp;b=4&amp;c=34&amp;c=111&amp;c=15</span></div><div class=\"line\">\t<span class=\"comment\">// &#123;</span></div><div class=\"line\">\t<span class=\"comment\">// \"a\": \"3\",</span></div><div class=\"line\">\t<span class=\"comment\">// \"b\": 4,</span></div><div class=\"line\">\t<span class=\"comment\">// \"haha\": 1,</span></div><div class=\"line\">\t<span class=\"comment\">// \"c\": [</span></div><div class=\"line\">\t<span class=\"comment\">// \"34\",</span></div><div class=\"line\">\t<span class=\"comment\">// \"111\",</span></div><div class=\"line\">\t<span class=\"comment\">// \"15\"</span></div><div class=\"line\">\t<span class=\"comment\">// ]</span></div><div class=\"line\">\t<span class=\"comment\">// &#125;</span></div><div class=\"line\">\t<span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/test1\"</span>, method = RequestMethod.POST)</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">test1</span><span class=\"params\">(Model model, String a, <span class=\"keyword\">int</span> b, String[] c)</span> </span>&#123;</div><div class=\"line\">\t\tArrayList&lt;String&gt; arrayList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; c.length; i++) &#123;</div><div class=\"line\">\t\t\tarrayList.add(c[i]);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tmodel.addAttribute(<span class=\"string\">\"a\"</span>, a);</div><div class=\"line\">\t\tmodel.addAttribute(<span class=\"string\">\"b\"</span>, b);</div><div class=\"line\">\t\tmodel.addAttribute(<span class=\"string\">\"c\"</span>, arrayList);</div><div class=\"line\">\t\tmodel.addAttribute(<span class=\"string\">\"haha\"</span>, <span class=\"number\">1</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MappingJackson2JsonView();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// http://172.16.0.35:8080/lidong/phone/app/test/test2/lidong/123</span></div><div class=\"line\">\t<span class=\"comment\">// &#123;</span></div><div class=\"line\">\t<span class=\"comment\">// \"name\": \"lidong\",</span></div><div class=\"line\">\t<span class=\"comment\">// \"password\": \"123\"</span></div><div class=\"line\">\t<span class=\"comment\">// &#125;</span></div><div class=\"line\">\t<span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/test2/&#123;name&#125;/&#123;password&#125;\"</span>, method = RequestMethod.GET)</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">test2</span><span class=\"params\">(Model model, @PathVariable String name, @PathVariable String password)</span> </span>&#123;</div><div class=\"line\">\t\tmodel.addAttribute(<span class=\"string\">\"name\"</span>, name);</div><div class=\"line\">\t\tmodel.addAttribute(<span class=\"string\">\"password\"</span>, password);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MappingJackson2JsonView();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/test3\"</span>)</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">test3</span><span class=\"params\">(Model model, MultipartFile file, String name, String password)</span> </span>&#123;</div><div class=\"line\">\t\tString url = <span class=\"string\">\"testRecord/\"</span> + name + <span class=\"string\">\"/\"</span> + password + <span class=\"string\">\"/\"</span> + file.getOriginalFilename();</div><div class=\"line\">\t\tString filePath = FileUtils.getAbsoluteFilePath(url);</div><div class=\"line\">\t\tcopytFile(file, filePath);</div><div class=\"line\">\t\tmodel.addAttribute(<span class=\"string\">\"result\"</span>, <span class=\"number\">1</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MappingJackson2JsonView();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/test4\"</span>)</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">test3</span><span class=\"params\">(Model model, MultipartFile[] file, String name, String password)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; file.length; i++) &#123;</div><div class=\"line\">\t\t\tString url = <span class=\"string\">\"testRecord/\"</span> + name + <span class=\"string\">\"/\"</span> + password + <span class=\"string\">\"/\"</span> + file[i].getOriginalFilename();</div><div class=\"line\">\t\t\tString filePath = FileUtils.getAbsoluteFilePath(url);</div><div class=\"line\">\t\t\tcopytFile(file[i], filePath);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tmodel.addAttribute(<span class=\"string\">\"result\"</span>, <span class=\"number\">1</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MappingJackson2JsonView();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//spring中转移文件的方法</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">copytFile</span><span class=\"params\">(MultipartFile file, String dest)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\tFile destFile = <span class=\"keyword\">new</span> File(dest);</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (destFile.exists()) &#123;</div><div class=\"line\">\t\t\t\tdestFile.delete();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!destFile.getParentFile().exists()) &#123;</div><div class=\"line\">\t\t\t\tdestFile.getParentFile().mkdirs();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\tfile.transferTo(destFile);</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (IllegalStateException e) &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"springmvc-中返回json的两种方式\"><a href=\"#springmvc-中返回json的两种方式\" class=\"headerlink\" title=\"springmvc 中返回json的两种方式\"></a>springmvc 中返回json的两种方式</h4><ul>\n<li><p>添加maven依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jackson-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.5.4<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jackson-databind<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.5.4<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>两种方法</p>\n<ul>\n<li><p>第一种@RequestBody</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"test\"</span>)</div><div class=\"line\"><span class=\"meta\">@ResponseBody</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Map&lt;String, Object&gt; <span class=\"title\">hello</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\tMap&lt;String, Object&gt; map = <span class=\"keyword\">new</span> HashMap&lt;String, Object&gt;();</div><div class=\"line\">\tmap.put(<span class=\"string\">\"haha\"</span>, <span class=\"string\">\"222\"</span>);</div><div class=\"line\">\t<span class=\"keyword\">return</span> map;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>第二种</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"test1\"</span>)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">hello1</span><span class=\"params\">(Model model)</span> </span>&#123;</div><div class=\"line\">\tmodel.addAttribute(<span class=\"string\">\"haha\"</span>, <span class=\"string\">\"222\"</span>);</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MappingJackson2JsonView();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"springmvc的错误统一处理\"><a href=\"#springmvc的错误统一处理\" class=\"headerlink\" title=\"springmvc的错误统一处理\"></a>springmvc的错误统一处理</h4><ul>\n<li>如第一步注册</li>\n<li>实现HandlerExceptionResolver<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExceptionHandler</span> <span class=\"keyword\">implements</span> <span class=\"title\">HandlerExceptionResolver</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> ModelAndView <span class=\"title\">resolveException</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler,</div><div class=\"line\">\t\t\tException ex)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">try</span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">throw</span> ex;</div><div class=\"line\">\t\t&#125;<span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">\t\t\tModelAndView modelAndView = <span class=\"keyword\">new</span> ModelAndView();</div><div class=\"line\">\t\t\tmodelAndView.setView(<span class=\"keyword\">new</span> MappingJackson2JsonView());</div><div class=\"line\">\t\t\tmodelAndView.addObject(<span class=\"string\">\"result\"</span>, <span class=\"string\">\"0\"</span>);</div><div class=\"line\">\t\t\tmodelAndView.addObject(<span class=\"string\">\"desc\"</span>, <span class=\"string\">\"\"</span>);</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> modelAndView;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n"},{"title":"sql笔记","date":"2017-06-24T07:55:11.000Z","_content":"## sql笔记\n\n### Select---想选择什么，以及从什么地方选\n#### 简单例子\n* 检索单个列\n  ```sql\n   SELECT RealName FROM t_user\n  ```\n\n* 检索多个列\n  ```sql\n     SELECT RealName,Gender FROM t_user\n  //在选择多个列时，一定要在列名之间加上逗号，但最后一个列名后不加。如果在最后一个列名后加了逗号，将出现错误。\n  ```\n* 检索所有列\n  ```sql\n  SELECT * FROM t_user\n  ```\n\n* 检索返回不同的值\n  ```sql\n  SELECT DISTINCT Ctype,Gender FROM t_user  //DISTINCT会将这个字段不重复的值返回,DISTINCT关键字作用于所有的列，不仅仅是跟在其后的那一列。例如，你指定SELECT DISTINCT Ctype, Gender，除非指定的两列完全相同，否则所有的行都会被检索出来\n  ```\n\n* 检索限制结果\n  ```sql\n   SELECT Gender FROM t_user LIMIT 5  OFFSET 5; //各个数据库方式不同mysql中使用方法 限制从第五个开始 长度为5 SELECT Gender FROM t_user LIMIT 5,5;\n  ```\n\n#### 排序---关系数据库设计理论认为，如果不明确规定排序顺序，则不应该假定检索出的数据的顺序有任何意义。\n\n* 单列排序\n  ```sql\n   SELECT * FROM t_user ORDER BY RealName\n  //在指定一条ORDER BY子句时，应该保证它是SELECT语句中最后一条子句。如果它不是最后的子句，将会出现错误消息。\n  ```\n* 多列排序\n  ```sql\n   SELECT * FROM t_user ORDER BY RealName,Gender //只有在realname有相同值之后才会比较Gender\n  ```\n* 升降序\n  ```sql\n   SELECT * FROM t_user ORDER BY RealName DESC,Gender ASC//升降序默认只针对前面的列成立 DESC降序 ASC默认升序可不写\n  ```\n\n#### where\n\n* is Null ---在创建表时，表设计人员可以指定其中的列能否不包含值。在一个列不包含值时，称其包含空值NULL。\n\n  ```sql\n  SELECT * FROM t_user WHERE t_user.Tel IS NULL //通过过滤选择不包含指定值的所有行时，你可能希望返回含NULL值的行。但是这做不到。因为未知（unknown）有特殊的含义，数据库不知道它们是否匹配，所以在进行匹配过滤或非匹配过滤时，不会返回这些结果。\n  ```\n\n* And\n  ```sql\n  SELECT * FROM t_user WHERE Tel > 15504409406 AND ID < 91000 AND Gender= '男' //并列条件可以使用And连接\n  ```\n\n* or or并列时一般满足第一个条件就会返回不需在做其他操作\n  ```sql\n  SELECT prod_name, prod_price FROM Products WHERE (vend_id = 'DLL01' OR vend_id = 'BRS01') AND prod_price >= 10;//用圆括号括起来不会产生歧义 否则 And 会比 or优先导致结果出错\n  ```\n* IN 与or具有相同功能 更好的观察性 更好的速度 可以包含select语句\n  ```sql\n  SELECT prod_name, prod_price FROM Products WHERE vend_id IN('DLL01','BRS01') AND prod_price >= 10\n  ```\n\n#### 通配符 LIKE\n  * 通配符搜索一般比前面讨论的其他搜索要耗费更长的处理时\n  * 不要过度使用通配符。如果其他操作符能达到相同的目的，应该使用其他操作符。\n  * 在确实需要使用通配符时，也尽量不要把它们用在搜索模式的开始处。把通配符置于开始处，搜索起来是最慢的。\n\n\n* % 匹配字符类型 可以在任何位置 可以多个同时使用 但是 通配符%看起来像是可以匹配任何东西，但有个例外，这就是NULL。子句WHERE prod_name LIKE '%'不会匹配产品名称为NULL的行。\n  ```sql\n  SELECT * FROM t_user WHERE Tel LIKE '1550440%'\n  ```\n\n* _ 下划线 一个下划线只能匹配一个字符\n  ```sql\n  SELECT * FROM t_user WHERE Tel LIKE '1550440940_'\n  ```\n\n#### 计算字段\n\n* 拼接字段\n```sql\nSELECT  CONCAT(Gender,'(',RealName,')') AS GR FROM t_user WHERE Tel = 15504409406\n//别名 用as来引用导致输出结果可以直接用此字段使用\n```\n\n* 计算字段\n```sql\nSELECT LoginNum*CType AS la,LoginNum,CType FROM t_user WHERE Tel=15504409406\n```\n\n#### 函数\n\n* 文本处理函数\n\n  * 某字段左起几个字符\n```sql\nSELECT LEFT(RealName,1) AS left_name from t_user WHERE Tel = 18629863729;\n```\n  * 某字段右起几个字符\n```sql\nSELECT RIGHT(cname,2) from t_vip WHERE ID=76\n```\n  * 某个字段的长度\n```sql\nSELECT LENGTH(Tel) AS left_name from t_user\n```\n  * 大写变小写\n```sql\nSELECT LOWER(w_wk.KeyWord) from w_wk\n```\n  * 小写变大写\n```sql\nSELECT UPPER(w_wk.KeyWord) from w_wk\n```\n  * 去空格\n```sql\nSELECT RTRIM(LTRIM(RIGHT(cname,2))) from t_vip WHERE ID=76\n```\n  * SOUNDEX 寻找相近读音的单词\n```sql\nSELECT * from t_vip WHERE SOUNDEX(CName)=SOUNDEX('tu')\n```\n\n* 数值日期处理函数太多-----现用现查\n* 聚集函数\n  * 平均数 AVG()函数忽略列值为NULL的行。\n```sql\nselect AVG(Price) AS avg from t_bk_school\n```\n  * 计数\n```sql\nselect COUNT(*) AS avg from t_bk_school ; //包含null值的\nSELECT COUNT(t_bk_school.FatherID) as o from t_bk_school; //忽略列值为NULL的行\n```\n  * 最大最小值 忽略null  文本数据也可以取默认取第一个和最后一个\n```sql\nselect MIN(ID) from ac_activity  ORDER BY id DESC ;\n```\n  * 求和 忽略null\n```sql\nSELECT SUM(CType) FROM t_user\n```\n\n#### 分组数据\n\n* group by\n\n      GROUP BY子句可以包含任意数目的列，因而可以对分组进行嵌套，更细致地进行数据分组。 如果在GROUP BY子句中嵌套了分组，数据将在最后指定的分组上进行汇总。换句话说，在建立分组时，指定的所有列都一起计算（所以 不能从个别的列取回数据）。\n      GROUP BY子句中列出的每一列都必须是检索列或有效的表达式（但不能是聚集函数）。\n      如果在SELECT中使用表达式，则必须在GROUP BY子句中指定相同的表达式。不能使用别名。\n      大多数SQL实现不允许GROUP BY列带有长度可变的数据类型（如文本或备注型字段）。 除聚集计算语句外，SELECT语句中的每一列都必须在GROUP BY子句中给出。\n      如果分组列中包含具有NULL值的行，则NULL将作为一个分组返回。如果列中有多行NULL值，它们将分为一组。 GROUP BY子句必须出现在WHERE子句之后，ORDER BY子句之前。\n```sql\nSELECT CType,COUNT(*) as num from t_user group by CType\nSELECT Gender,CType,COUNT(*) as num from t_user group by CType,Gender\n```\n\n* Having\n```sql\nSELECT CType,Gender,COUNT(*) from t_user GROUP BY Gender,CType HAVING CType<2\n// HAVING 与 GROUP BY 共同使用时 子句中除了聚集函数外 使用的列必须在group by中使用\n// WHERE在数据分组前进行过滤，HAVING在数据分组后进行过滤\n```\n\n\n#### 子查询\n\n```sql\nSELECT * FROM t_user_authority WHERE UserID = (SELECT ID FROM t_user WHERE t_user.Tel = 155044094061)\n```\n\n注意使用完全限定名\n","source":"_posts/sql笔记.md","raw":"---\ntitle: sql笔记\ndate: 2017-06-24 15:55:11\ncategories:\n- javaee\ntags:\n- sql\n- javaee\n---\n## sql笔记\n\n### Select---想选择什么，以及从什么地方选\n#### 简单例子\n* 检索单个列\n  ```sql\n   SELECT RealName FROM t_user\n  ```\n\n* 检索多个列\n  ```sql\n     SELECT RealName,Gender FROM t_user\n  //在选择多个列时，一定要在列名之间加上逗号，但最后一个列名后不加。如果在最后一个列名后加了逗号，将出现错误。\n  ```\n* 检索所有列\n  ```sql\n  SELECT * FROM t_user\n  ```\n\n* 检索返回不同的值\n  ```sql\n  SELECT DISTINCT Ctype,Gender FROM t_user  //DISTINCT会将这个字段不重复的值返回,DISTINCT关键字作用于所有的列，不仅仅是跟在其后的那一列。例如，你指定SELECT DISTINCT Ctype, Gender，除非指定的两列完全相同，否则所有的行都会被检索出来\n  ```\n\n* 检索限制结果\n  ```sql\n   SELECT Gender FROM t_user LIMIT 5  OFFSET 5; //各个数据库方式不同mysql中使用方法 限制从第五个开始 长度为5 SELECT Gender FROM t_user LIMIT 5,5;\n  ```\n\n#### 排序---关系数据库设计理论认为，如果不明确规定排序顺序，则不应该假定检索出的数据的顺序有任何意义。\n\n* 单列排序\n  ```sql\n   SELECT * FROM t_user ORDER BY RealName\n  //在指定一条ORDER BY子句时，应该保证它是SELECT语句中最后一条子句。如果它不是最后的子句，将会出现错误消息。\n  ```\n* 多列排序\n  ```sql\n   SELECT * FROM t_user ORDER BY RealName,Gender //只有在realname有相同值之后才会比较Gender\n  ```\n* 升降序\n  ```sql\n   SELECT * FROM t_user ORDER BY RealName DESC,Gender ASC//升降序默认只针对前面的列成立 DESC降序 ASC默认升序可不写\n  ```\n\n#### where\n\n* is Null ---在创建表时，表设计人员可以指定其中的列能否不包含值。在一个列不包含值时，称其包含空值NULL。\n\n  ```sql\n  SELECT * FROM t_user WHERE t_user.Tel IS NULL //通过过滤选择不包含指定值的所有行时，你可能希望返回含NULL值的行。但是这做不到。因为未知（unknown）有特殊的含义，数据库不知道它们是否匹配，所以在进行匹配过滤或非匹配过滤时，不会返回这些结果。\n  ```\n\n* And\n  ```sql\n  SELECT * FROM t_user WHERE Tel > 15504409406 AND ID < 91000 AND Gender= '男' //并列条件可以使用And连接\n  ```\n\n* or or并列时一般满足第一个条件就会返回不需在做其他操作\n  ```sql\n  SELECT prod_name, prod_price FROM Products WHERE (vend_id = 'DLL01' OR vend_id = 'BRS01') AND prod_price >= 10;//用圆括号括起来不会产生歧义 否则 And 会比 or优先导致结果出错\n  ```\n* IN 与or具有相同功能 更好的观察性 更好的速度 可以包含select语句\n  ```sql\n  SELECT prod_name, prod_price FROM Products WHERE vend_id IN('DLL01','BRS01') AND prod_price >= 10\n  ```\n\n#### 通配符 LIKE\n  * 通配符搜索一般比前面讨论的其他搜索要耗费更长的处理时\n  * 不要过度使用通配符。如果其他操作符能达到相同的目的，应该使用其他操作符。\n  * 在确实需要使用通配符时，也尽量不要把它们用在搜索模式的开始处。把通配符置于开始处，搜索起来是最慢的。\n\n\n* % 匹配字符类型 可以在任何位置 可以多个同时使用 但是 通配符%看起来像是可以匹配任何东西，但有个例外，这就是NULL。子句WHERE prod_name LIKE '%'不会匹配产品名称为NULL的行。\n  ```sql\n  SELECT * FROM t_user WHERE Tel LIKE '1550440%'\n  ```\n\n* _ 下划线 一个下划线只能匹配一个字符\n  ```sql\n  SELECT * FROM t_user WHERE Tel LIKE '1550440940_'\n  ```\n\n#### 计算字段\n\n* 拼接字段\n```sql\nSELECT  CONCAT(Gender,'(',RealName,')') AS GR FROM t_user WHERE Tel = 15504409406\n//别名 用as来引用导致输出结果可以直接用此字段使用\n```\n\n* 计算字段\n```sql\nSELECT LoginNum*CType AS la,LoginNum,CType FROM t_user WHERE Tel=15504409406\n```\n\n#### 函数\n\n* 文本处理函数\n\n  * 某字段左起几个字符\n```sql\nSELECT LEFT(RealName,1) AS left_name from t_user WHERE Tel = 18629863729;\n```\n  * 某字段右起几个字符\n```sql\nSELECT RIGHT(cname,2) from t_vip WHERE ID=76\n```\n  * 某个字段的长度\n```sql\nSELECT LENGTH(Tel) AS left_name from t_user\n```\n  * 大写变小写\n```sql\nSELECT LOWER(w_wk.KeyWord) from w_wk\n```\n  * 小写变大写\n```sql\nSELECT UPPER(w_wk.KeyWord) from w_wk\n```\n  * 去空格\n```sql\nSELECT RTRIM(LTRIM(RIGHT(cname,2))) from t_vip WHERE ID=76\n```\n  * SOUNDEX 寻找相近读音的单词\n```sql\nSELECT * from t_vip WHERE SOUNDEX(CName)=SOUNDEX('tu')\n```\n\n* 数值日期处理函数太多-----现用现查\n* 聚集函数\n  * 平均数 AVG()函数忽略列值为NULL的行。\n```sql\nselect AVG(Price) AS avg from t_bk_school\n```\n  * 计数\n```sql\nselect COUNT(*) AS avg from t_bk_school ; //包含null值的\nSELECT COUNT(t_bk_school.FatherID) as o from t_bk_school; //忽略列值为NULL的行\n```\n  * 最大最小值 忽略null  文本数据也可以取默认取第一个和最后一个\n```sql\nselect MIN(ID) from ac_activity  ORDER BY id DESC ;\n```\n  * 求和 忽略null\n```sql\nSELECT SUM(CType) FROM t_user\n```\n\n#### 分组数据\n\n* group by\n\n      GROUP BY子句可以包含任意数目的列，因而可以对分组进行嵌套，更细致地进行数据分组。 如果在GROUP BY子句中嵌套了分组，数据将在最后指定的分组上进行汇总。换句话说，在建立分组时，指定的所有列都一起计算（所以 不能从个别的列取回数据）。\n      GROUP BY子句中列出的每一列都必须是检索列或有效的表达式（但不能是聚集函数）。\n      如果在SELECT中使用表达式，则必须在GROUP BY子句中指定相同的表达式。不能使用别名。\n      大多数SQL实现不允许GROUP BY列带有长度可变的数据类型（如文本或备注型字段）。 除聚集计算语句外，SELECT语句中的每一列都必须在GROUP BY子句中给出。\n      如果分组列中包含具有NULL值的行，则NULL将作为一个分组返回。如果列中有多行NULL值，它们将分为一组。 GROUP BY子句必须出现在WHERE子句之后，ORDER BY子句之前。\n```sql\nSELECT CType,COUNT(*) as num from t_user group by CType\nSELECT Gender,CType,COUNT(*) as num from t_user group by CType,Gender\n```\n\n* Having\n```sql\nSELECT CType,Gender,COUNT(*) from t_user GROUP BY Gender,CType HAVING CType<2\n// HAVING 与 GROUP BY 共同使用时 子句中除了聚集函数外 使用的列必须在group by中使用\n// WHERE在数据分组前进行过滤，HAVING在数据分组后进行过滤\n```\n\n\n#### 子查询\n\n```sql\nSELECT * FROM t_user_authority WHERE UserID = (SELECT ID FROM t_user WHERE t_user.Tel = 155044094061)\n```\n\n注意使用完全限定名\n","slug":"sql笔记","published":1,"updated":"2017-07-04T09:01:06.080Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4qaebcd00022oq9hdq803am","content":"<h2 id=\"sql笔记\"><a href=\"#sql笔记\" class=\"headerlink\" title=\"sql笔记\"></a>sql笔记</h2><h3 id=\"Select—想选择什么，以及从什么地方选\"><a href=\"#Select—想选择什么，以及从什么地方选\" class=\"headerlink\" title=\"Select—想选择什么，以及从什么地方选\"></a>Select—想选择什么，以及从什么地方选</h3><h4 id=\"简单例子\"><a href=\"#简单例子\" class=\"headerlink\" title=\"简单例子\"></a>简单例子</h4><ul>\n<li><p>检索单个列</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">SELECT</span> RealName <span class=\"keyword\">FROM</span> t_user</div></pre></td></tr></table></figure>\n</li>\n<li><p>检索多个列</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">   <span class=\"keyword\">SELECT</span> RealName,Gender <span class=\"keyword\">FROM</span> t_user</div><div class=\"line\">//在选择多个列时，一定要在列名之间加上逗号，但最后一个列名后不加。如果在最后一个列名后加了逗号，将出现错误。</div></pre></td></tr></table></figure>\n</li>\n<li><p>检索所有列</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> t_user</div></pre></td></tr></table></figure>\n</li>\n<li><p>检索返回不同的值</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">DISTINCT</span> Ctype,Gender <span class=\"keyword\">FROM</span> t_user  //<span class=\"keyword\">DISTINCT</span>会将这个字段不重复的值返回,<span class=\"keyword\">DISTINCT</span>关键字作用于所有的列，不仅仅是跟在其后的那一列。例如，你指定<span class=\"keyword\">SELECT</span> <span class=\"keyword\">DISTINCT</span> Ctype, Gender，除非指定的两列完全相同，否则所有的行都会被检索出来</div></pre></td></tr></table></figure>\n</li>\n<li><p>检索限制结果</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">SELECT</span> Gender <span class=\"keyword\">FROM</span> t_user <span class=\"keyword\">LIMIT</span> <span class=\"number\">5</span>  <span class=\"keyword\">OFFSET</span> <span class=\"number\">5</span>; //各个数据库方式不同mysql中使用方法 限制从第五个开始 长度为5 <span class=\"keyword\">SELECT</span> Gender <span class=\"keyword\">FROM</span> t_user <span class=\"keyword\">LIMIT</span> <span class=\"number\">5</span>,<span class=\"number\">5</span>;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"排序—关系数据库设计理论认为，如果不明确规定排序顺序，则不应该假定检索出的数据的顺序有任何意义。\"><a href=\"#排序—关系数据库设计理论认为，如果不明确规定排序顺序，则不应该假定检索出的数据的顺序有任何意义。\" class=\"headerlink\" title=\"排序—关系数据库设计理论认为，如果不明确规定排序顺序，则不应该假定检索出的数据的顺序有任何意义。\"></a>排序—关系数据库设计理论认为，如果不明确规定排序顺序，则不应该假定检索出的数据的顺序有任何意义。</h4><ul>\n<li><p>单列排序</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> t_user <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> RealName</div><div class=\"line\">//在指定一条<span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span>子句时，应该保证它是<span class=\"keyword\">SELECT</span>语句中最后一条子句。如果它不是最后的子句，将会出现错误消息。</div></pre></td></tr></table></figure>\n</li>\n<li><p>多列排序</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> t_user <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> RealName,Gender //只有在realname有相同值之后才会比较Gender</div></pre></td></tr></table></figure>\n</li>\n<li><p>升降序</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> t_user <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> RealName <span class=\"keyword\">DESC</span>,Gender <span class=\"keyword\">ASC</span>//升降序默认只针对前面的列成立 <span class=\"keyword\">DESC</span>降序 <span class=\"keyword\">ASC</span>默认升序可不写</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"where\"><a href=\"#where\" class=\"headerlink\" title=\"where\"></a>where</h4><ul>\n<li><p>is Null —在创建表时，表设计人员可以指定其中的列能否不包含值。在一个列不包含值时，称其包含空值NULL。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> t_user <span class=\"keyword\">WHERE</span> t_user.Tel <span class=\"keyword\">IS</span> <span class=\"literal\">NULL</span> //通过过滤选择不包含指定值的所有行时，你可能希望返回含<span class=\"literal\">NULL</span>值的行。但是这做不到。因为未知（<span class=\"keyword\">unknown</span>）有特殊的含义，数据库不知道它们是否匹配，所以在进行匹配过滤或非匹配过滤时，不会返回这些结果。</div></pre></td></tr></table></figure>\n</li>\n<li><p>And</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> t_user <span class=\"keyword\">WHERE</span> Tel &gt; <span class=\"number\">15504409406</span> <span class=\"keyword\">AND</span> <span class=\"keyword\">ID</span> &lt; <span class=\"number\">91000</span> <span class=\"keyword\">AND</span> Gender= <span class=\"string\">'男'</span> //并列条件可以使用<span class=\"keyword\">And</span>连接</div></pre></td></tr></table></figure>\n</li>\n<li><p>or or并列时一般满足第一个条件就会返回不需在做其他操作</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">SELECT</span> prod_name, prod_price <span class=\"keyword\">FROM</span> Products <span class=\"keyword\">WHERE</span> (vend_id = <span class=\"string\">'DLL01'</span> <span class=\"keyword\">OR</span> vend_id = <span class=\"string\">'BRS01'</span>) <span class=\"keyword\">AND</span> prod_price &gt;= <span class=\"number\">10</span>;//用圆括号括起来不会产生歧义 否则 And 会比 or优先导致结果出错</div></pre></td></tr></table></figure>\n</li>\n<li><p>IN 与or具有相同功能 更好的观察性 更好的速度 可以包含select语句</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">SELECT</span> prod_name, prod_price <span class=\"keyword\">FROM</span> Products <span class=\"keyword\">WHERE</span> vend_id <span class=\"keyword\">IN</span>(<span class=\"string\">'DLL01'</span>,<span class=\"string\">'BRS01'</span>) <span class=\"keyword\">AND</span> prod_price &gt;= <span class=\"number\">10</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"通配符-LIKE\"><a href=\"#通配符-LIKE\" class=\"headerlink\" title=\"通配符 LIKE\"></a>通配符 LIKE</h4><ul>\n<li>通配符搜索一般比前面讨论的其他搜索要耗费更长的处理时</li>\n<li>不要过度使用通配符。如果其他操作符能达到相同的目的，应该使用其他操作符。</li>\n<li>在确实需要使用通配符时，也尽量不要把它们用在搜索模式的开始处。把通配符置于开始处，搜索起来是最慢的。</li>\n</ul>\n<ul>\n<li><p>% 匹配字符类型 可以在任何位置 可以多个同时使用 但是 通配符%看起来像是可以匹配任何东西，但有个例外，这就是NULL。子句WHERE prod_name LIKE ‘%’不会匹配产品名称为NULL的行。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> t_user <span class=\"keyword\">WHERE</span> Tel <span class=\"keyword\">LIKE</span> <span class=\"string\">'1550440%'</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>_ 下划线 一个下划线只能匹配一个字符</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> t_user <span class=\"keyword\">WHERE</span> Tel <span class=\"keyword\">LIKE</span> <span class=\"string\">'1550440940_'</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"计算字段\"><a href=\"#计算字段\" class=\"headerlink\" title=\"计算字段\"></a>计算字段</h4><ul>\n<li><p>拼接字段</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">SELECT</span>  <span class=\"keyword\">CONCAT</span>(Gender,<span class=\"string\">'('</span>,RealName,<span class=\"string\">')'</span>) <span class=\"keyword\">AS</span> GR <span class=\"keyword\">FROM</span> t_user <span class=\"keyword\">WHERE</span> Tel = <span class=\"number\">15504409406</span></div><div class=\"line\">//别名 用<span class=\"keyword\">as</span>来引用导致输出结果可以直接用此字段使用</div></pre></td></tr></table></figure>\n</li>\n<li><p>计算字段</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">SELECT</span> LoginNum*CType <span class=\"keyword\">AS</span> la,LoginNum,CType <span class=\"keyword\">FROM</span> t_user <span class=\"keyword\">WHERE</span> Tel=<span class=\"number\">15504409406</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h4><ul>\n<li><p>文本处理函数</p>\n<ul>\n<li><p>某字段左起几个字符</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">LEFT</span>(RealName,<span class=\"number\">1</span>) <span class=\"keyword\">AS</span> left_name <span class=\"keyword\">from</span> t_user <span class=\"keyword\">WHERE</span> Tel = <span class=\"number\">18629863729</span>;</div></pre></td></tr></table></figure>\n</li>\n<li><p>某字段右起几个字符</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">RIGHT</span>(cname,<span class=\"number\">2</span>) <span class=\"keyword\">from</span> t_vip <span class=\"keyword\">WHERE</span> <span class=\"keyword\">ID</span>=<span class=\"number\">76</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>某个字段的长度</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">LENGTH</span>(Tel) <span class=\"keyword\">AS</span> left_name <span class=\"keyword\">from</span> t_user</div></pre></td></tr></table></figure>\n</li>\n<li><p>大写变小写</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">LOWER</span>(w_wk.KeyWord) <span class=\"keyword\">from</span> w_wk</div></pre></td></tr></table></figure>\n</li>\n<li><p>小写变大写</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">UPPER</span>(w_wk.KeyWord) <span class=\"keyword\">from</span> w_wk</div></pre></td></tr></table></figure>\n</li>\n<li><p>去空格</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">RTRIM</span>(<span class=\"keyword\">LTRIM</span>(<span class=\"keyword\">RIGHT</span>(cname,<span class=\"number\">2</span>))) <span class=\"keyword\">from</span> t_vip <span class=\"keyword\">WHERE</span> <span class=\"keyword\">ID</span>=<span class=\"number\">76</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>SOUNDEX 寻找相近读音的单词</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">from</span> t_vip <span class=\"keyword\">WHERE</span> <span class=\"keyword\">SOUNDEX</span>(CName)=<span class=\"keyword\">SOUNDEX</span>(<span class=\"string\">'tu'</span>)</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>数值日期处理函数太多—–现用现查</p>\n</li>\n<li><p>聚集函数</p>\n<ul>\n<li><p>平均数 AVG()函数忽略列值为NULL的行。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">AVG</span>(Price) <span class=\"keyword\">AS</span> <span class=\"keyword\">avg</span> <span class=\"keyword\">from</span> t_bk_school</div></pre></td></tr></table></figure>\n</li>\n<li><p>计数</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">COUNT</span>(*) <span class=\"keyword\">AS</span> <span class=\"keyword\">avg</span> <span class=\"keyword\">from</span> t_bk_school ; //包含null值的</div><div class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">COUNT</span>(t_bk_school.FatherID) <span class=\"keyword\">as</span> o <span class=\"keyword\">from</span> t_bk_school; //忽略列值为NULL的行</div></pre></td></tr></table></figure>\n</li>\n<li><p>最大最小值 忽略null  文本数据也可以取默认取第一个和最后一个</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">MIN</span>(<span class=\"keyword\">ID</span>) <span class=\"keyword\">from</span> ac_activity  <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> <span class=\"keyword\">id</span> <span class=\"keyword\">DESC</span> ;</div></pre></td></tr></table></figure>\n</li>\n<li><p>求和 忽略null</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">SUM</span>(CType) <span class=\"keyword\">FROM</span> t_user</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"分组数据\"><a href=\"#分组数据\" class=\"headerlink\" title=\"分组数据\"></a>分组数据</h4><ul>\n<li><p>group by</p>\n<pre><code>GROUP BY子句可以包含任意数目的列，因而可以对分组进行嵌套，更细致地进行数据分组。 如果在GROUP BY子句中嵌套了分组，数据将在最后指定的分组上进行汇总。换句话说，在建立分组时，指定的所有列都一起计算（所以 不能从个别的列取回数据）。\nGROUP BY子句中列出的每一列都必须是检索列或有效的表达式（但不能是聚集函数）。\n如果在SELECT中使用表达式，则必须在GROUP BY子句中指定相同的表达式。不能使用别名。\n大多数SQL实现不允许GROUP BY列带有长度可变的数据类型（如文本或备注型字段）。 除聚集计算语句外，SELECT语句中的每一列都必须在GROUP BY子句中给出。\n如果分组列中包含具有NULL值的行，则NULL将作为一个分组返回。如果列中有多行NULL值，它们将分为一组。 GROUP BY子句必须出现在WHERE子句之后，ORDER BY子句之前。\n</code></pre><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">SELECT</span> CType,<span class=\"keyword\">COUNT</span>(*) <span class=\"keyword\">as</span> <span class=\"keyword\">num</span> <span class=\"keyword\">from</span> t_user <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> CType</div><div class=\"line\"><span class=\"keyword\">SELECT</span> Gender,CType,<span class=\"keyword\">COUNT</span>(*) <span class=\"keyword\">as</span> <span class=\"keyword\">num</span> <span class=\"keyword\">from</span> t_user <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> CType,Gender</div></pre></td></tr></table></figure>\n</li>\n<li><p>Having</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">SELECT</span> CType,Gender,<span class=\"keyword\">COUNT</span>(*) <span class=\"keyword\">from</span> t_user <span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> Gender,CType <span class=\"keyword\">HAVING</span> CType&lt;<span class=\"number\">2</span></div><div class=\"line\">// <span class=\"keyword\">HAVING</span> 与 <span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> 共同使用时 子句中除了聚集函数外 使用的列必须在<span class=\"keyword\">group</span> <span class=\"keyword\">by</span>中使用</div><div class=\"line\">// <span class=\"keyword\">WHERE</span>在数据分组前进行过滤，<span class=\"keyword\">HAVING</span>在数据分组后进行过滤</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"子查询\"><a href=\"#子查询\" class=\"headerlink\" title=\"子查询\"></a>子查询</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> t_user_authority <span class=\"keyword\">WHERE</span> UserID = (<span class=\"keyword\">SELECT</span> <span class=\"keyword\">ID</span> <span class=\"keyword\">FROM</span> t_user <span class=\"keyword\">WHERE</span> t_user.Tel = <span class=\"number\">155044094061</span>)</div></pre></td></tr></table></figure>\n<p>注意使用完全限定名</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"sql笔记\"><a href=\"#sql笔记\" class=\"headerlink\" title=\"sql笔记\"></a>sql笔记</h2><h3 id=\"Select—想选择什么，以及从什么地方选\"><a href=\"#Select—想选择什么，以及从什么地方选\" class=\"headerlink\" title=\"Select—想选择什么，以及从什么地方选\"></a>Select—想选择什么，以及从什么地方选</h3><h4 id=\"简单例子\"><a href=\"#简单例子\" class=\"headerlink\" title=\"简单例子\"></a>简单例子</h4><ul>\n<li><p>检索单个列</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">SELECT</span> RealName <span class=\"keyword\">FROM</span> t_user</div></pre></td></tr></table></figure>\n</li>\n<li><p>检索多个列</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">   <span class=\"keyword\">SELECT</span> RealName,Gender <span class=\"keyword\">FROM</span> t_user</div><div class=\"line\">//在选择多个列时，一定要在列名之间加上逗号，但最后一个列名后不加。如果在最后一个列名后加了逗号，将出现错误。</div></pre></td></tr></table></figure>\n</li>\n<li><p>检索所有列</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> t_user</div></pre></td></tr></table></figure>\n</li>\n<li><p>检索返回不同的值</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">DISTINCT</span> Ctype,Gender <span class=\"keyword\">FROM</span> t_user  //<span class=\"keyword\">DISTINCT</span>会将这个字段不重复的值返回,<span class=\"keyword\">DISTINCT</span>关键字作用于所有的列，不仅仅是跟在其后的那一列。例如，你指定<span class=\"keyword\">SELECT</span> <span class=\"keyword\">DISTINCT</span> Ctype, Gender，除非指定的两列完全相同，否则所有的行都会被检索出来</div></pre></td></tr></table></figure>\n</li>\n<li><p>检索限制结果</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">SELECT</span> Gender <span class=\"keyword\">FROM</span> t_user <span class=\"keyword\">LIMIT</span> <span class=\"number\">5</span>  <span class=\"keyword\">OFFSET</span> <span class=\"number\">5</span>; //各个数据库方式不同mysql中使用方法 限制从第五个开始 长度为5 <span class=\"keyword\">SELECT</span> Gender <span class=\"keyword\">FROM</span> t_user <span class=\"keyword\">LIMIT</span> <span class=\"number\">5</span>,<span class=\"number\">5</span>;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"排序—关系数据库设计理论认为，如果不明确规定排序顺序，则不应该假定检索出的数据的顺序有任何意义。\"><a href=\"#排序—关系数据库设计理论认为，如果不明确规定排序顺序，则不应该假定检索出的数据的顺序有任何意义。\" class=\"headerlink\" title=\"排序—关系数据库设计理论认为，如果不明确规定排序顺序，则不应该假定检索出的数据的顺序有任何意义。\"></a>排序—关系数据库设计理论认为，如果不明确规定排序顺序，则不应该假定检索出的数据的顺序有任何意义。</h4><ul>\n<li><p>单列排序</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> t_user <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> RealName</div><div class=\"line\">//在指定一条<span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span>子句时，应该保证它是<span class=\"keyword\">SELECT</span>语句中最后一条子句。如果它不是最后的子句，将会出现错误消息。</div></pre></td></tr></table></figure>\n</li>\n<li><p>多列排序</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> t_user <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> RealName,Gender //只有在realname有相同值之后才会比较Gender</div></pre></td></tr></table></figure>\n</li>\n<li><p>升降序</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> t_user <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> RealName <span class=\"keyword\">DESC</span>,Gender <span class=\"keyword\">ASC</span>//升降序默认只针对前面的列成立 <span class=\"keyword\">DESC</span>降序 <span class=\"keyword\">ASC</span>默认升序可不写</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"where\"><a href=\"#where\" class=\"headerlink\" title=\"where\"></a>where</h4><ul>\n<li><p>is Null —在创建表时，表设计人员可以指定其中的列能否不包含值。在一个列不包含值时，称其包含空值NULL。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> t_user <span class=\"keyword\">WHERE</span> t_user.Tel <span class=\"keyword\">IS</span> <span class=\"literal\">NULL</span> //通过过滤选择不包含指定值的所有行时，你可能希望返回含<span class=\"literal\">NULL</span>值的行。但是这做不到。因为未知（<span class=\"keyword\">unknown</span>）有特殊的含义，数据库不知道它们是否匹配，所以在进行匹配过滤或非匹配过滤时，不会返回这些结果。</div></pre></td></tr></table></figure>\n</li>\n<li><p>And</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> t_user <span class=\"keyword\">WHERE</span> Tel &gt; <span class=\"number\">15504409406</span> <span class=\"keyword\">AND</span> <span class=\"keyword\">ID</span> &lt; <span class=\"number\">91000</span> <span class=\"keyword\">AND</span> Gender= <span class=\"string\">'男'</span> //并列条件可以使用<span class=\"keyword\">And</span>连接</div></pre></td></tr></table></figure>\n</li>\n<li><p>or or并列时一般满足第一个条件就会返回不需在做其他操作</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">SELECT</span> prod_name, prod_price <span class=\"keyword\">FROM</span> Products <span class=\"keyword\">WHERE</span> (vend_id = <span class=\"string\">'DLL01'</span> <span class=\"keyword\">OR</span> vend_id = <span class=\"string\">'BRS01'</span>) <span class=\"keyword\">AND</span> prod_price &gt;= <span class=\"number\">10</span>;//用圆括号括起来不会产生歧义 否则 And 会比 or优先导致结果出错</div></pre></td></tr></table></figure>\n</li>\n<li><p>IN 与or具有相同功能 更好的观察性 更好的速度 可以包含select语句</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">SELECT</span> prod_name, prod_price <span class=\"keyword\">FROM</span> Products <span class=\"keyword\">WHERE</span> vend_id <span class=\"keyword\">IN</span>(<span class=\"string\">'DLL01'</span>,<span class=\"string\">'BRS01'</span>) <span class=\"keyword\">AND</span> prod_price &gt;= <span class=\"number\">10</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"通配符-LIKE\"><a href=\"#通配符-LIKE\" class=\"headerlink\" title=\"通配符 LIKE\"></a>通配符 LIKE</h4><ul>\n<li>通配符搜索一般比前面讨论的其他搜索要耗费更长的处理时</li>\n<li>不要过度使用通配符。如果其他操作符能达到相同的目的，应该使用其他操作符。</li>\n<li>在确实需要使用通配符时，也尽量不要把它们用在搜索模式的开始处。把通配符置于开始处，搜索起来是最慢的。</li>\n</ul>\n<ul>\n<li><p>% 匹配字符类型 可以在任何位置 可以多个同时使用 但是 通配符%看起来像是可以匹配任何东西，但有个例外，这就是NULL。子句WHERE prod_name LIKE ‘%’不会匹配产品名称为NULL的行。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> t_user <span class=\"keyword\">WHERE</span> Tel <span class=\"keyword\">LIKE</span> <span class=\"string\">'1550440%'</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>_ 下划线 一个下划线只能匹配一个字符</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> t_user <span class=\"keyword\">WHERE</span> Tel <span class=\"keyword\">LIKE</span> <span class=\"string\">'1550440940_'</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"计算字段\"><a href=\"#计算字段\" class=\"headerlink\" title=\"计算字段\"></a>计算字段</h4><ul>\n<li><p>拼接字段</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">SELECT</span>  <span class=\"keyword\">CONCAT</span>(Gender,<span class=\"string\">'('</span>,RealName,<span class=\"string\">')'</span>) <span class=\"keyword\">AS</span> GR <span class=\"keyword\">FROM</span> t_user <span class=\"keyword\">WHERE</span> Tel = <span class=\"number\">15504409406</span></div><div class=\"line\">//别名 用<span class=\"keyword\">as</span>来引用导致输出结果可以直接用此字段使用</div></pre></td></tr></table></figure>\n</li>\n<li><p>计算字段</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">SELECT</span> LoginNum*CType <span class=\"keyword\">AS</span> la,LoginNum,CType <span class=\"keyword\">FROM</span> t_user <span class=\"keyword\">WHERE</span> Tel=<span class=\"number\">15504409406</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h4><ul>\n<li><p>文本处理函数</p>\n<ul>\n<li><p>某字段左起几个字符</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">LEFT</span>(RealName,<span class=\"number\">1</span>) <span class=\"keyword\">AS</span> left_name <span class=\"keyword\">from</span> t_user <span class=\"keyword\">WHERE</span> Tel = <span class=\"number\">18629863729</span>;</div></pre></td></tr></table></figure>\n</li>\n<li><p>某字段右起几个字符</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">RIGHT</span>(cname,<span class=\"number\">2</span>) <span class=\"keyword\">from</span> t_vip <span class=\"keyword\">WHERE</span> <span class=\"keyword\">ID</span>=<span class=\"number\">76</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>某个字段的长度</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">LENGTH</span>(Tel) <span class=\"keyword\">AS</span> left_name <span class=\"keyword\">from</span> t_user</div></pre></td></tr></table></figure>\n</li>\n<li><p>大写变小写</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">LOWER</span>(w_wk.KeyWord) <span class=\"keyword\">from</span> w_wk</div></pre></td></tr></table></figure>\n</li>\n<li><p>小写变大写</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">UPPER</span>(w_wk.KeyWord) <span class=\"keyword\">from</span> w_wk</div></pre></td></tr></table></figure>\n</li>\n<li><p>去空格</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">RTRIM</span>(<span class=\"keyword\">LTRIM</span>(<span class=\"keyword\">RIGHT</span>(cname,<span class=\"number\">2</span>))) <span class=\"keyword\">from</span> t_vip <span class=\"keyword\">WHERE</span> <span class=\"keyword\">ID</span>=<span class=\"number\">76</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>SOUNDEX 寻找相近读音的单词</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">from</span> t_vip <span class=\"keyword\">WHERE</span> <span class=\"keyword\">SOUNDEX</span>(CName)=<span class=\"keyword\">SOUNDEX</span>(<span class=\"string\">'tu'</span>)</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>数值日期处理函数太多—–现用现查</p>\n</li>\n<li><p>聚集函数</p>\n<ul>\n<li><p>平均数 AVG()函数忽略列值为NULL的行。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">AVG</span>(Price) <span class=\"keyword\">AS</span> <span class=\"keyword\">avg</span> <span class=\"keyword\">from</span> t_bk_school</div></pre></td></tr></table></figure>\n</li>\n<li><p>计数</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">COUNT</span>(*) <span class=\"keyword\">AS</span> <span class=\"keyword\">avg</span> <span class=\"keyword\">from</span> t_bk_school ; //包含null值的</div><div class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">COUNT</span>(t_bk_school.FatherID) <span class=\"keyword\">as</span> o <span class=\"keyword\">from</span> t_bk_school; //忽略列值为NULL的行</div></pre></td></tr></table></figure>\n</li>\n<li><p>最大最小值 忽略null  文本数据也可以取默认取第一个和最后一个</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">MIN</span>(<span class=\"keyword\">ID</span>) <span class=\"keyword\">from</span> ac_activity  <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> <span class=\"keyword\">id</span> <span class=\"keyword\">DESC</span> ;</div></pre></td></tr></table></figure>\n</li>\n<li><p>求和 忽略null</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">SUM</span>(CType) <span class=\"keyword\">FROM</span> t_user</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"分组数据\"><a href=\"#分组数据\" class=\"headerlink\" title=\"分组数据\"></a>分组数据</h4><ul>\n<li><p>group by</p>\n<pre><code>GROUP BY子句可以包含任意数目的列，因而可以对分组进行嵌套，更细致地进行数据分组。 如果在GROUP BY子句中嵌套了分组，数据将在最后指定的分组上进行汇总。换句话说，在建立分组时，指定的所有列都一起计算（所以 不能从个别的列取回数据）。\nGROUP BY子句中列出的每一列都必须是检索列或有效的表达式（但不能是聚集函数）。\n如果在SELECT中使用表达式，则必须在GROUP BY子句中指定相同的表达式。不能使用别名。\n大多数SQL实现不允许GROUP BY列带有长度可变的数据类型（如文本或备注型字段）。 除聚集计算语句外，SELECT语句中的每一列都必须在GROUP BY子句中给出。\n如果分组列中包含具有NULL值的行，则NULL将作为一个分组返回。如果列中有多行NULL值，它们将分为一组。 GROUP BY子句必须出现在WHERE子句之后，ORDER BY子句之前。\n</code></pre><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">SELECT</span> CType,<span class=\"keyword\">COUNT</span>(*) <span class=\"keyword\">as</span> <span class=\"keyword\">num</span> <span class=\"keyword\">from</span> t_user <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> CType</div><div class=\"line\"><span class=\"keyword\">SELECT</span> Gender,CType,<span class=\"keyword\">COUNT</span>(*) <span class=\"keyword\">as</span> <span class=\"keyword\">num</span> <span class=\"keyword\">from</span> t_user <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> CType,Gender</div></pre></td></tr></table></figure>\n</li>\n<li><p>Having</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">SELECT</span> CType,Gender,<span class=\"keyword\">COUNT</span>(*) <span class=\"keyword\">from</span> t_user <span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> Gender,CType <span class=\"keyword\">HAVING</span> CType&lt;<span class=\"number\">2</span></div><div class=\"line\">// <span class=\"keyword\">HAVING</span> 与 <span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> 共同使用时 子句中除了聚集函数外 使用的列必须在<span class=\"keyword\">group</span> <span class=\"keyword\">by</span>中使用</div><div class=\"line\">// <span class=\"keyword\">WHERE</span>在数据分组前进行过滤，<span class=\"keyword\">HAVING</span>在数据分组后进行过滤</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"子查询\"><a href=\"#子查询\" class=\"headerlink\" title=\"子查询\"></a>子查询</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> t_user_authority <span class=\"keyword\">WHERE</span> UserID = (<span class=\"keyword\">SELECT</span> <span class=\"keyword\">ID</span> <span class=\"keyword\">FROM</span> t_user <span class=\"keyword\">WHERE</span> t_user.Tel = <span class=\"number\">155044094061</span>)</div></pre></td></tr></table></figure>\n<p>注意使用完全限定名</p>\n"},{"title":"java反射笔记","date":"2017-04-19T01:28:04.000Z","_content":"```\n仓廪实而知礼节，衣食足而知荣辱 --管仲\n```\n## Class\n### 获取Class 对象\n*  \n```java\n    Class clazz = A.class;\n  ```\n* String 要放全路径包名 可能会报ClassNotFoundException\n  ```java\ntry {\n    Class class1 = Class.forName(\"refletc.A\");\n  } catch (ClassNotFoundException e) {\n    e.printStackTrace();\n  }\n```\n<!-- more -->\n### Class 方法\n#### 获取名称\n```java\nString className = aClass.getName();  //全限定类名\nString simpleClassName = aClass.getSimpleName(); //类名（不包含包名）\nString packageName = aClass.getPackage().getName();// 包名\n```\n#### 获得类的修饰符 判断类的修饰符\n```java\nint modifiers = aClass.getModifiers();\nModifier.isAbstract(int modifiers);\nModifier.isFinal(int modifiers);\nModifier.isInterface(int modifiers);\nModifier.isNative(int modifiers);\nModifier.isPrivate(int modifiers);\nModifier.isProtected(int modifiers);\nModifier.isPublic(int modifiers);\nModifier.isStatic(int modifiers);\nModifier.isStrict(int modifiers);\nModifier.isSynchronized(int modifiers);\nModifier.isTransient(int modifiers);\nModifier.isVolatile(int modifiers);\n```\n#### 更多方法\n```java\nClass superclass = aClass.getSuperclass(); //获取父类\nClass[] interfaces = aClass.getInterfaces(); //获取实现的接口\n//下面的方法不能获取到私有的方法 变量 构造器\nConstructor[] constructors = aClass.getConstructors(); //获取构造器\nMethod[] method = aClass.getMethods(); //获取方法\nField[] method = aClass.getFields(); //获取变量\n```\n## Constructor\n通过已知构造参数 获取构造方法 new新对象\n```java\n      try {\n            Constructor constructor = clazz.getConstructor(String.class);\n            A r = (A) constructor.newInstance(\"test\");\n        } catch (NoSuchMethodException e) {\n            e.printStackTrace();\n        } catch (IllegalAccessException e) {\n            e.printStackTrace();\n        } catch (InstantiationException e) {\n            e.printStackTrace();\n        } catch (InvocationTargetException e) {\n            e.printStackTrace();\n        }\n```\n## Field变量 可以通过此方法动态改变成员变量中的静态变量\n```java\n      try {\n            //获取所有的变量 私有的不行\n            Field[] fields = clazz.getFields();\n            //获取指定的成员变量\n            Field field = clazz.getField(\"name\");\n            System.out.println(field.getName()); //name 变量名\n            System.out.println(field.getType());  //class java.lang.String\n            HelloWorld obj = new HelloWorld(\"123\");\n            s.set(obj,\"222\");                 //设置 成员变量值\n            System.out.println(obj.getField(obj)); //得到成员变量值\n\n            Field s1 = clazz.getField(\"password\"); //password为静态变量   \n            System.out.println(s1.get(null));   //静态变量获取时 变量只需要传null\n            s1.set(null,\"rrr\");               \n            System.out.println(s1.get(null));   //静态变量设置后 其他的实例中静态变量也都相应改变\n            System.out.println(obj.s1);\n        } catch (NoSuchFieldException e) {\n            e.printStackTrace();\n        } catch (IllegalAccessException e) {\n            e.printStackTrace();\n        }\n```\n## Method方法\n```java\n  Method[] methods = clazz.getMethods();\n  try {\n    Method method = clazz.getMethod(\"test\", String.class);//参数1为方法名 参数2为参数类型，没有参数传null\n    method.invoke(clazz.newInstance(), \"test\");           //执行方法 参数1传实例 2为参数\n    Method method2 = clazz.getMethod(\"testStatic\", null); //获取静态方法\n    method2.invoke(null, null);                           //执行静态方法 1可以传null 没有参数传null\n  } catch (Exception e) {\n    // TODO Auto-generated catch block\n    e.printStackTrace();\n  }\n```\n## 访问私有方法 变量\n### Field\n```java\n  try {\n    Field privateField = clazz.getDeclaredField(\"privateString\");\n    privateField.setAccessible(true);   //设置可以访问 可以读写 不开启会报错\n    A a = clazz.newInstance();\n    String privateString = (String) privateField.get(a);\n    privateField.set(a, \"changeField\");\n  } catch (Exception e) {\n    // TODO Auto-generated catch block\n    e.printStackTrace();\n  }\n```\n### Method\n```java\n  try {\n\t\t\tMethod privateMethod = clazz.getDeclaredMethod(\"privateMehtod\", String.class, int.class);\n\t\t\tprivateMethod.setAccessible(true);\n\t\t\tprivateMethod.invoke(clazz.newInstance(), \"private\", 12);\n\t\t} catch (Exception e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n```\n","source":"_posts/java反射笔记.md","raw":"---\ntitle: java反射笔记\ndate: 2017-04-19 09:28:04\ntags:\n- 笔记\n- java\ncategories:\n- 笔记\n- java\n---\n```\n仓廪实而知礼节，衣食足而知荣辱 --管仲\n```\n## Class\n### 获取Class 对象\n*  \n```java\n    Class clazz = A.class;\n  ```\n* String 要放全路径包名 可能会报ClassNotFoundException\n  ```java\ntry {\n    Class class1 = Class.forName(\"refletc.A\");\n  } catch (ClassNotFoundException e) {\n    e.printStackTrace();\n  }\n```\n<!-- more -->\n### Class 方法\n#### 获取名称\n```java\nString className = aClass.getName();  //全限定类名\nString simpleClassName = aClass.getSimpleName(); //类名（不包含包名）\nString packageName = aClass.getPackage().getName();// 包名\n```\n#### 获得类的修饰符 判断类的修饰符\n```java\nint modifiers = aClass.getModifiers();\nModifier.isAbstract(int modifiers);\nModifier.isFinal(int modifiers);\nModifier.isInterface(int modifiers);\nModifier.isNative(int modifiers);\nModifier.isPrivate(int modifiers);\nModifier.isProtected(int modifiers);\nModifier.isPublic(int modifiers);\nModifier.isStatic(int modifiers);\nModifier.isStrict(int modifiers);\nModifier.isSynchronized(int modifiers);\nModifier.isTransient(int modifiers);\nModifier.isVolatile(int modifiers);\n```\n#### 更多方法\n```java\nClass superclass = aClass.getSuperclass(); //获取父类\nClass[] interfaces = aClass.getInterfaces(); //获取实现的接口\n//下面的方法不能获取到私有的方法 变量 构造器\nConstructor[] constructors = aClass.getConstructors(); //获取构造器\nMethod[] method = aClass.getMethods(); //获取方法\nField[] method = aClass.getFields(); //获取变量\n```\n## Constructor\n通过已知构造参数 获取构造方法 new新对象\n```java\n      try {\n            Constructor constructor = clazz.getConstructor(String.class);\n            A r = (A) constructor.newInstance(\"test\");\n        } catch (NoSuchMethodException e) {\n            e.printStackTrace();\n        } catch (IllegalAccessException e) {\n            e.printStackTrace();\n        } catch (InstantiationException e) {\n            e.printStackTrace();\n        } catch (InvocationTargetException e) {\n            e.printStackTrace();\n        }\n```\n## Field变量 可以通过此方法动态改变成员变量中的静态变量\n```java\n      try {\n            //获取所有的变量 私有的不行\n            Field[] fields = clazz.getFields();\n            //获取指定的成员变量\n            Field field = clazz.getField(\"name\");\n            System.out.println(field.getName()); //name 变量名\n            System.out.println(field.getType());  //class java.lang.String\n            HelloWorld obj = new HelloWorld(\"123\");\n            s.set(obj,\"222\");                 //设置 成员变量值\n            System.out.println(obj.getField(obj)); //得到成员变量值\n\n            Field s1 = clazz.getField(\"password\"); //password为静态变量   \n            System.out.println(s1.get(null));   //静态变量获取时 变量只需要传null\n            s1.set(null,\"rrr\");               \n            System.out.println(s1.get(null));   //静态变量设置后 其他的实例中静态变量也都相应改变\n            System.out.println(obj.s1);\n        } catch (NoSuchFieldException e) {\n            e.printStackTrace();\n        } catch (IllegalAccessException e) {\n            e.printStackTrace();\n        }\n```\n## Method方法\n```java\n  Method[] methods = clazz.getMethods();\n  try {\n    Method method = clazz.getMethod(\"test\", String.class);//参数1为方法名 参数2为参数类型，没有参数传null\n    method.invoke(clazz.newInstance(), \"test\");           //执行方法 参数1传实例 2为参数\n    Method method2 = clazz.getMethod(\"testStatic\", null); //获取静态方法\n    method2.invoke(null, null);                           //执行静态方法 1可以传null 没有参数传null\n  } catch (Exception e) {\n    // TODO Auto-generated catch block\n    e.printStackTrace();\n  }\n```\n## 访问私有方法 变量\n### Field\n```java\n  try {\n    Field privateField = clazz.getDeclaredField(\"privateString\");\n    privateField.setAccessible(true);   //设置可以访问 可以读写 不开启会报错\n    A a = clazz.newInstance();\n    String privateString = (String) privateField.get(a);\n    privateField.set(a, \"changeField\");\n  } catch (Exception e) {\n    // TODO Auto-generated catch block\n    e.printStackTrace();\n  }\n```\n### Method\n```java\n  try {\n\t\t\tMethod privateMethod = clazz.getDeclaredMethod(\"privateMehtod\", String.class, int.class);\n\t\t\tprivateMethod.setAccessible(true);\n\t\t\tprivateMethod.invoke(clazz.newInstance(), \"private\", 12);\n\t\t} catch (Exception e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n```\n","slug":"java反射笔记","published":1,"updated":"2017-04-24T02:26:15.114Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4qaebcj00062oq90r0aqlpd","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">仓廪实而知礼节，衣食足而知荣辱 --管仲</div></pre></td></tr></table></figure>\n<h2 id=\"Class\"><a href=\"#Class\" class=\"headerlink\" title=\"Class\"></a>Class</h2><h3 id=\"获取Class-对象\"><a href=\"#获取Class-对象\" class=\"headerlink\" title=\"获取Class 对象\"></a>获取Class 对象</h3><ul>\n<li><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Class clazz = A.class;</div></pre></td></tr></table></figure>\n</li>\n<li><p>String 要放全路径包名 可能会报ClassNotFoundException</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">    Class class1 = Class.forName(<span class=\"string\">\"refletc.A\"</span>);</div><div class=\"line\">  &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</div><div class=\"line\">    e.printStackTrace();</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<a id=\"more\"></a>\n<h3 id=\"Class-方法\"><a href=\"#Class-方法\" class=\"headerlink\" title=\"Class 方法\"></a>Class 方法</h3><h4 id=\"获取名称\"><a href=\"#获取名称\" class=\"headerlink\" title=\"获取名称\"></a>获取名称</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">String className = aClass.getName();  <span class=\"comment\">//全限定类名</span></div><div class=\"line\">String simpleClassName = aClass.getSimpleName(); <span class=\"comment\">//类名（不包含包名）</span></div><div class=\"line\">String packageName = aClass.getPackage().getName();<span class=\"comment\">// 包名</span></div></pre></td></tr></table></figure>\n<h4 id=\"获得类的修饰符-判断类的修饰符\"><a href=\"#获得类的修饰符-判断类的修饰符\" class=\"headerlink\" title=\"获得类的修饰符 判断类的修饰符\"></a>获得类的修饰符 判断类的修饰符</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">int</span> modifiers = aClass.getModifiers();</div><div class=\"line\">Modifier.isAbstract(<span class=\"keyword\">int</span> modifiers);</div><div class=\"line\">Modifier.isFinal(<span class=\"keyword\">int</span> modifiers);</div><div class=\"line\">Modifier.isInterface(<span class=\"keyword\">int</span> modifiers);</div><div class=\"line\">Modifier.isNative(<span class=\"keyword\">int</span> modifiers);</div><div class=\"line\">Modifier.isPrivate(<span class=\"keyword\">int</span> modifiers);</div><div class=\"line\">Modifier.isProtected(<span class=\"keyword\">int</span> modifiers);</div><div class=\"line\">Modifier.isPublic(<span class=\"keyword\">int</span> modifiers);</div><div class=\"line\">Modifier.isStatic(<span class=\"keyword\">int</span> modifiers);</div><div class=\"line\">Modifier.isStrict(<span class=\"keyword\">int</span> modifiers);</div><div class=\"line\">Modifier.isSynchronized(<span class=\"keyword\">int</span> modifiers);</div><div class=\"line\">Modifier.isTransient(<span class=\"keyword\">int</span> modifiers);</div><div class=\"line\">Modifier.isVolatile(<span class=\"keyword\">int</span> modifiers);</div></pre></td></tr></table></figure>\n<h4 id=\"更多方法\"><a href=\"#更多方法\" class=\"headerlink\" title=\"更多方法\"></a>更多方法</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">Class superclass = aClass.getSuperclass(); <span class=\"comment\">//获取父类</span></div><div class=\"line\">Class[] interfaces = aClass.getInterfaces(); <span class=\"comment\">//获取实现的接口</span></div><div class=\"line\"><span class=\"comment\">//下面的方法不能获取到私有的方法 变量 构造器</span></div><div class=\"line\">Constructor[] constructors = aClass.getConstructors(); <span class=\"comment\">//获取构造器</span></div><div class=\"line\">Method[] method = aClass.getMethods(); <span class=\"comment\">//获取方法</span></div><div class=\"line\">Field[] method = aClass.getFields(); <span class=\"comment\">//获取变量</span></div></pre></td></tr></table></figure>\n<h2 id=\"Constructor\"><a href=\"#Constructor\" class=\"headerlink\" title=\"Constructor\"></a>Constructor</h2><p>通过已知构造参数 获取构造方法 new新对象<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">      Constructor constructor = clazz.getConstructor(String.class);</div><div class=\"line\">      A r = (A) constructor.newInstance(<span class=\"string\">\"test\"</span>);</div><div class=\"line\">  &#125; <span class=\"keyword\">catch</span> (NoSuchMethodException e) &#123;</div><div class=\"line\">      e.printStackTrace();</div><div class=\"line\">  &#125; <span class=\"keyword\">catch</span> (IllegalAccessException e) &#123;</div><div class=\"line\">      e.printStackTrace();</div><div class=\"line\">  &#125; <span class=\"keyword\">catch</span> (InstantiationException e) &#123;</div><div class=\"line\">      e.printStackTrace();</div><div class=\"line\">  &#125; <span class=\"keyword\">catch</span> (InvocationTargetException e) &#123;</div><div class=\"line\">      e.printStackTrace();</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"Field变量-可以通过此方法动态改变成员变量中的静态变量\"><a href=\"#Field变量-可以通过此方法动态改变成员变量中的静态变量\" class=\"headerlink\" title=\"Field变量 可以通过此方法动态改变成员变量中的静态变量\"></a>Field变量 可以通过此方法动态改变成员变量中的静态变量</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">      <span class=\"comment\">//获取所有的变量 私有的不行</span></div><div class=\"line\">      Field[] fields = clazz.getFields();</div><div class=\"line\">      <span class=\"comment\">//获取指定的成员变量</span></div><div class=\"line\">      Field field = clazz.getField(<span class=\"string\">\"name\"</span>);</div><div class=\"line\">      System.out.println(field.getName()); <span class=\"comment\">//name 变量名</span></div><div class=\"line\">      System.out.println(field.getType());  <span class=\"comment\">//class java.lang.String</span></div><div class=\"line\">      HelloWorld obj = <span class=\"keyword\">new</span> HelloWorld(<span class=\"string\">\"123\"</span>);</div><div class=\"line\">      s.set(obj,<span class=\"string\">\"222\"</span>);                 <span class=\"comment\">//设置 成员变量值</span></div><div class=\"line\">      System.out.println(obj.getField(obj)); <span class=\"comment\">//得到成员变量值</span></div><div class=\"line\"></div><div class=\"line\">      Field s1 = clazz.getField(<span class=\"string\">\"password\"</span>); <span class=\"comment\">//password为静态变量   </span></div><div class=\"line\">      System.out.println(s1.get(<span class=\"keyword\">null</span>));   <span class=\"comment\">//静态变量获取时 变量只需要传null</span></div><div class=\"line\">      s1.set(<span class=\"keyword\">null</span>,<span class=\"string\">\"rrr\"</span>);               </div><div class=\"line\">      System.out.println(s1.get(<span class=\"keyword\">null</span>));   <span class=\"comment\">//静态变量设置后 其他的实例中静态变量也都相应改变</span></div><div class=\"line\">      System.out.println(obj.s1);</div><div class=\"line\">  &#125; <span class=\"keyword\">catch</span> (NoSuchFieldException e) &#123;</div><div class=\"line\">      e.printStackTrace();</div><div class=\"line\">  &#125; <span class=\"keyword\">catch</span> (IllegalAccessException e) &#123;</div><div class=\"line\">      e.printStackTrace();</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Method方法\"><a href=\"#Method方法\" class=\"headerlink\" title=\"Method方法\"></a>Method方法</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">Method[] methods = clazz.getMethods();</div><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">  Method method = clazz.getMethod(<span class=\"string\">\"test\"</span>, String.class);<span class=\"comment\">//参数1为方法名 参数2为参数类型，没有参数传null</span></div><div class=\"line\">  method.invoke(clazz.newInstance(), <span class=\"string\">\"test\"</span>);           <span class=\"comment\">//执行方法 参数1传实例 2为参数</span></div><div class=\"line\">  Method method2 = clazz.getMethod(<span class=\"string\">\"testStatic\"</span>, <span class=\"keyword\">null</span>); <span class=\"comment\">//获取静态方法</span></div><div class=\"line\">  method2.invoke(<span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);                           <span class=\"comment\">//执行静态方法 1可以传null 没有参数传null</span></div><div class=\"line\">&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">  <span class=\"comment\">// TODO Auto-generated catch block</span></div><div class=\"line\">  e.printStackTrace();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"访问私有方法-变量\"><a href=\"#访问私有方法-变量\" class=\"headerlink\" title=\"访问私有方法 变量\"></a>访问私有方法 变量</h2><h3 id=\"Field\"><a href=\"#Field\" class=\"headerlink\" title=\"Field\"></a>Field</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">  Field privateField = clazz.getDeclaredField(<span class=\"string\">\"privateString\"</span>);</div><div class=\"line\">  privateField.setAccessible(<span class=\"keyword\">true</span>);   <span class=\"comment\">//设置可以访问 可以读写 不开启会报错</span></div><div class=\"line\">  A a = clazz.newInstance();</div><div class=\"line\">  String privateString = (String) privateField.get(a);</div><div class=\"line\">  privateField.set(a, <span class=\"string\">\"changeField\"</span>);</div><div class=\"line\">&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">  <span class=\"comment\">// TODO Auto-generated catch block</span></div><div class=\"line\">  e.printStackTrace();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"Method\"><a href=\"#Method\" class=\"headerlink\" title=\"Method\"></a>Method</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\tMethod privateMethod = clazz.getDeclaredMethod(<span class=\"string\">\"privateMehtod\"</span>, String.class, <span class=\"keyword\">int</span>.class);</div><div class=\"line\">\tprivateMethod.setAccessible(<span class=\"keyword\">true</span>);</div><div class=\"line\">\tprivateMethod.invoke(clazz.newInstance(), <span class=\"string\">\"private\"</span>, <span class=\"number\">12</span>);</div><div class=\"line\">&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">\t<span class=\"comment\">// TODO Auto-generated catch block</span></div><div class=\"line\">\te.printStackTrace();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">仓廪实而知礼节，衣食足而知荣辱 --管仲</div></pre></td></tr></table></figure>\n<h2 id=\"Class\"><a href=\"#Class\" class=\"headerlink\" title=\"Class\"></a>Class</h2><h3 id=\"获取Class-对象\"><a href=\"#获取Class-对象\" class=\"headerlink\" title=\"获取Class 对象\"></a>获取Class 对象</h3><ul>\n<li><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Class clazz = A.class;</div></pre></td></tr></table></figure>\n</li>\n<li><p>String 要放全路径包名 可能会报ClassNotFoundException</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">    Class class1 = Class.forName(<span class=\"string\">\"refletc.A\"</span>);</div><div class=\"line\">  &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</div><div class=\"line\">    e.printStackTrace();</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>","more":"<h3 id=\"Class-方法\"><a href=\"#Class-方法\" class=\"headerlink\" title=\"Class 方法\"></a>Class 方法</h3><h4 id=\"获取名称\"><a href=\"#获取名称\" class=\"headerlink\" title=\"获取名称\"></a>获取名称</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">String className = aClass.getName();  <span class=\"comment\">//全限定类名</span></div><div class=\"line\">String simpleClassName = aClass.getSimpleName(); <span class=\"comment\">//类名（不包含包名）</span></div><div class=\"line\">String packageName = aClass.getPackage().getName();<span class=\"comment\">// 包名</span></div></pre></td></tr></table></figure>\n<h4 id=\"获得类的修饰符-判断类的修饰符\"><a href=\"#获得类的修饰符-判断类的修饰符\" class=\"headerlink\" title=\"获得类的修饰符 判断类的修饰符\"></a>获得类的修饰符 判断类的修饰符</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">int</span> modifiers = aClass.getModifiers();</div><div class=\"line\">Modifier.isAbstract(<span class=\"keyword\">int</span> modifiers);</div><div class=\"line\">Modifier.isFinal(<span class=\"keyword\">int</span> modifiers);</div><div class=\"line\">Modifier.isInterface(<span class=\"keyword\">int</span> modifiers);</div><div class=\"line\">Modifier.isNative(<span class=\"keyword\">int</span> modifiers);</div><div class=\"line\">Modifier.isPrivate(<span class=\"keyword\">int</span> modifiers);</div><div class=\"line\">Modifier.isProtected(<span class=\"keyword\">int</span> modifiers);</div><div class=\"line\">Modifier.isPublic(<span class=\"keyword\">int</span> modifiers);</div><div class=\"line\">Modifier.isStatic(<span class=\"keyword\">int</span> modifiers);</div><div class=\"line\">Modifier.isStrict(<span class=\"keyword\">int</span> modifiers);</div><div class=\"line\">Modifier.isSynchronized(<span class=\"keyword\">int</span> modifiers);</div><div class=\"line\">Modifier.isTransient(<span class=\"keyword\">int</span> modifiers);</div><div class=\"line\">Modifier.isVolatile(<span class=\"keyword\">int</span> modifiers);</div></pre></td></tr></table></figure>\n<h4 id=\"更多方法\"><a href=\"#更多方法\" class=\"headerlink\" title=\"更多方法\"></a>更多方法</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">Class superclass = aClass.getSuperclass(); <span class=\"comment\">//获取父类</span></div><div class=\"line\">Class[] interfaces = aClass.getInterfaces(); <span class=\"comment\">//获取实现的接口</span></div><div class=\"line\"><span class=\"comment\">//下面的方法不能获取到私有的方法 变量 构造器</span></div><div class=\"line\">Constructor[] constructors = aClass.getConstructors(); <span class=\"comment\">//获取构造器</span></div><div class=\"line\">Method[] method = aClass.getMethods(); <span class=\"comment\">//获取方法</span></div><div class=\"line\">Field[] method = aClass.getFields(); <span class=\"comment\">//获取变量</span></div></pre></td></tr></table></figure>\n<h2 id=\"Constructor\"><a href=\"#Constructor\" class=\"headerlink\" title=\"Constructor\"></a>Constructor</h2><p>通过已知构造参数 获取构造方法 new新对象<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">      Constructor constructor = clazz.getConstructor(String.class);</div><div class=\"line\">      A r = (A) constructor.newInstance(<span class=\"string\">\"test\"</span>);</div><div class=\"line\">  &#125; <span class=\"keyword\">catch</span> (NoSuchMethodException e) &#123;</div><div class=\"line\">      e.printStackTrace();</div><div class=\"line\">  &#125; <span class=\"keyword\">catch</span> (IllegalAccessException e) &#123;</div><div class=\"line\">      e.printStackTrace();</div><div class=\"line\">  &#125; <span class=\"keyword\">catch</span> (InstantiationException e) &#123;</div><div class=\"line\">      e.printStackTrace();</div><div class=\"line\">  &#125; <span class=\"keyword\">catch</span> (InvocationTargetException e) &#123;</div><div class=\"line\">      e.printStackTrace();</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"Field变量-可以通过此方法动态改变成员变量中的静态变量\"><a href=\"#Field变量-可以通过此方法动态改变成员变量中的静态变量\" class=\"headerlink\" title=\"Field变量 可以通过此方法动态改变成员变量中的静态变量\"></a>Field变量 可以通过此方法动态改变成员变量中的静态变量</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">      <span class=\"comment\">//获取所有的变量 私有的不行</span></div><div class=\"line\">      Field[] fields = clazz.getFields();</div><div class=\"line\">      <span class=\"comment\">//获取指定的成员变量</span></div><div class=\"line\">      Field field = clazz.getField(<span class=\"string\">\"name\"</span>);</div><div class=\"line\">      System.out.println(field.getName()); <span class=\"comment\">//name 变量名</span></div><div class=\"line\">      System.out.println(field.getType());  <span class=\"comment\">//class java.lang.String</span></div><div class=\"line\">      HelloWorld obj = <span class=\"keyword\">new</span> HelloWorld(<span class=\"string\">\"123\"</span>);</div><div class=\"line\">      s.set(obj,<span class=\"string\">\"222\"</span>);                 <span class=\"comment\">//设置 成员变量值</span></div><div class=\"line\">      System.out.println(obj.getField(obj)); <span class=\"comment\">//得到成员变量值</span></div><div class=\"line\"></div><div class=\"line\">      Field s1 = clazz.getField(<span class=\"string\">\"password\"</span>); <span class=\"comment\">//password为静态变量   </span></div><div class=\"line\">      System.out.println(s1.get(<span class=\"keyword\">null</span>));   <span class=\"comment\">//静态变量获取时 变量只需要传null</span></div><div class=\"line\">      s1.set(<span class=\"keyword\">null</span>,<span class=\"string\">\"rrr\"</span>);               </div><div class=\"line\">      System.out.println(s1.get(<span class=\"keyword\">null</span>));   <span class=\"comment\">//静态变量设置后 其他的实例中静态变量也都相应改变</span></div><div class=\"line\">      System.out.println(obj.s1);</div><div class=\"line\">  &#125; <span class=\"keyword\">catch</span> (NoSuchFieldException e) &#123;</div><div class=\"line\">      e.printStackTrace();</div><div class=\"line\">  &#125; <span class=\"keyword\">catch</span> (IllegalAccessException e) &#123;</div><div class=\"line\">      e.printStackTrace();</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Method方法\"><a href=\"#Method方法\" class=\"headerlink\" title=\"Method方法\"></a>Method方法</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">Method[] methods = clazz.getMethods();</div><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">  Method method = clazz.getMethod(<span class=\"string\">\"test\"</span>, String.class);<span class=\"comment\">//参数1为方法名 参数2为参数类型，没有参数传null</span></div><div class=\"line\">  method.invoke(clazz.newInstance(), <span class=\"string\">\"test\"</span>);           <span class=\"comment\">//执行方法 参数1传实例 2为参数</span></div><div class=\"line\">  Method method2 = clazz.getMethod(<span class=\"string\">\"testStatic\"</span>, <span class=\"keyword\">null</span>); <span class=\"comment\">//获取静态方法</span></div><div class=\"line\">  method2.invoke(<span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);                           <span class=\"comment\">//执行静态方法 1可以传null 没有参数传null</span></div><div class=\"line\">&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">  <span class=\"comment\">// TODO Auto-generated catch block</span></div><div class=\"line\">  e.printStackTrace();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"访问私有方法-变量\"><a href=\"#访问私有方法-变量\" class=\"headerlink\" title=\"访问私有方法 变量\"></a>访问私有方法 变量</h2><h3 id=\"Field\"><a href=\"#Field\" class=\"headerlink\" title=\"Field\"></a>Field</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">  Field privateField = clazz.getDeclaredField(<span class=\"string\">\"privateString\"</span>);</div><div class=\"line\">  privateField.setAccessible(<span class=\"keyword\">true</span>);   <span class=\"comment\">//设置可以访问 可以读写 不开启会报错</span></div><div class=\"line\">  A a = clazz.newInstance();</div><div class=\"line\">  String privateString = (String) privateField.get(a);</div><div class=\"line\">  privateField.set(a, <span class=\"string\">\"changeField\"</span>);</div><div class=\"line\">&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">  <span class=\"comment\">// TODO Auto-generated catch block</span></div><div class=\"line\">  e.printStackTrace();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"Method\"><a href=\"#Method\" class=\"headerlink\" title=\"Method\"></a>Method</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\tMethod privateMethod = clazz.getDeclaredMethod(<span class=\"string\">\"privateMehtod\"</span>, String.class, <span class=\"keyword\">int</span>.class);</div><div class=\"line\">\tprivateMethod.setAccessible(<span class=\"keyword\">true</span>);</div><div class=\"line\">\tprivateMethod.invoke(clazz.newInstance(), <span class=\"string\">\"private\"</span>, <span class=\"number\">12</span>);</div><div class=\"line\">&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">\t<span class=\"comment\">// TODO Auto-generated catch block</span></div><div class=\"line\">\te.printStackTrace();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"struts2中返回json数据","date":"2017-05-10T14:01:46.000Z","_content":"## 导入struts2-json-pligin\n```xml\n<dependency>\n\t\t\t<groupId>org.apache.struts</groupId>\n\t\t\t<artifactId>struts2-json-plugin</artifactId>\n\t\t\t<version>2.3.14</version>\n</dependency>\n```\n<!-- more -->\n## 在Action中\n```java\npublic class Login extends ActionSupport{\n\n\tprivate static final long serialVersionUID = 6792184906021258229L;\n\tprivate Map<String, Object> data;\n\n\t@Override\n\tpublic String execute() throws Exception {\n\t\t// TODO Auto-generated method stub\n\t\tMap<String, Object> map = new HashMap<String, Object>();\n\t\tmap.put(\"li\", \"liu\");\n\t\tmap.put(\"dong\", \"yue\");\n\t\tthis.setData(map);\n\t\treturn SUCCESS;\n\t}\n\n\tpublic Map<String, Object> getData() {\n\t\treturn data;\n\t}\n\n\tpublic void setData(Map<String, Object> data) {\n\t\tthis.data = data;\n\t}\n\n}\n```\n## 在struts.xml中 继承自json-default\n```xml\n<package name=\"default\" extends=\"json-default\">\n\t\t<action name=\"login\" class=\"eason.test.maven.Login\">\n\t\t\t<result type=\"json\"> 返回值json\n\t\t\t\t<param name=\"root\">data</param> 不写这个有问题 data为json最外围map的名称\n\t\t\t</result>\n\t\t</action>\n</package>\n```\n","source":"_posts/struts2中返回json数据.md","raw":"---\ntitle: struts2中返回json数据\ndate: 2017-05-10 22:01:46\ncategories:\n- javaee\ntags:\n- struts2\n- javaee\n---\n## 导入struts2-json-pligin\n```xml\n<dependency>\n\t\t\t<groupId>org.apache.struts</groupId>\n\t\t\t<artifactId>struts2-json-plugin</artifactId>\n\t\t\t<version>2.3.14</version>\n</dependency>\n```\n<!-- more -->\n## 在Action中\n```java\npublic class Login extends ActionSupport{\n\n\tprivate static final long serialVersionUID = 6792184906021258229L;\n\tprivate Map<String, Object> data;\n\n\t@Override\n\tpublic String execute() throws Exception {\n\t\t// TODO Auto-generated method stub\n\t\tMap<String, Object> map = new HashMap<String, Object>();\n\t\tmap.put(\"li\", \"liu\");\n\t\tmap.put(\"dong\", \"yue\");\n\t\tthis.setData(map);\n\t\treturn SUCCESS;\n\t}\n\n\tpublic Map<String, Object> getData() {\n\t\treturn data;\n\t}\n\n\tpublic void setData(Map<String, Object> data) {\n\t\tthis.data = data;\n\t}\n\n}\n```\n## 在struts.xml中 继承自json-default\n```xml\n<package name=\"default\" extends=\"json-default\">\n\t\t<action name=\"login\" class=\"eason.test.maven.Login\">\n\t\t\t<result type=\"json\"> 返回值json\n\t\t\t\t<param name=\"root\">data</param> 不写这个有问题 data为json最外围map的名称\n\t\t\t</result>\n\t\t</action>\n</package>\n```\n","slug":"struts2中返回json数据","published":1,"updated":"2017-05-13T01:40:36.517Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4qaebcl00072oq96ezfz935","content":"<h2 id=\"导入struts2-json-pligin\"><a href=\"#导入struts2-json-pligin\" class=\"headerlink\" title=\"导入struts2-json-pligin\"></a>导入struts2-json-pligin</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.struts<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>struts2-json-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.3.14<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h2 id=\"在Action中\"><a href=\"#在Action中\" class=\"headerlink\" title=\"在Action中\"></a>在Action中</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Login</span> <span class=\"keyword\">extends</span> <span class=\"title\">ActionSupport</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">6792184906021258229L</span>;</div><div class=\"line\">\t<span class=\"keyword\">private</span> Map&lt;String, Object&gt; data;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">execute</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated method stub</span></div><div class=\"line\">\t\tMap&lt;String, Object&gt; map = <span class=\"keyword\">new</span> HashMap&lt;String, Object&gt;();</div><div class=\"line\">\t\tmap.put(<span class=\"string\">\"li\"</span>, <span class=\"string\">\"liu\"</span>);</div><div class=\"line\">\t\tmap.put(<span class=\"string\">\"dong\"</span>, <span class=\"string\">\"yue\"</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.setData(map);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> SUCCESS;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Map&lt;String, Object&gt; <span class=\"title\">getData</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> data;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setData</span><span class=\"params\">(Map&lt;String, Object&gt; data)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.data = data;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"在struts-xml中-继承自json-default\"><a href=\"#在struts-xml中-继承自json-default\" class=\"headerlink\" title=\"在struts.xml中 继承自json-default\"></a>在struts.xml中 继承自json-default</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">package</span> <span class=\"attr\">name</span>=<span class=\"string\">\"default\"</span> <span class=\"attr\">extends</span>=<span class=\"string\">\"json-default\"</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">name</span>=<span class=\"string\">\"login\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"eason.test.maven.Login\"</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">type</span>=<span class=\"string\">\"json\"</span>&gt;</span> 返回值json</div><div class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"root\"</span>&gt;</span>data<span class=\"tag\">&lt;/<span class=\"name\">param</span>&gt;</span> 不写这个有问题 data为json最外围map的名称</div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">action</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">package</span>&gt;</span></div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"导入struts2-json-pligin\"><a href=\"#导入struts2-json-pligin\" class=\"headerlink\" title=\"导入struts2-json-pligin\"></a>导入struts2-json-pligin</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.struts<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>struts2-json-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.3.14<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure>","more":"<h2 id=\"在Action中\"><a href=\"#在Action中\" class=\"headerlink\" title=\"在Action中\"></a>在Action中</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Login</span> <span class=\"keyword\">extends</span> <span class=\"title\">ActionSupport</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">6792184906021258229L</span>;</div><div class=\"line\">\t<span class=\"keyword\">private</span> Map&lt;String, Object&gt; data;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">execute</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated method stub</span></div><div class=\"line\">\t\tMap&lt;String, Object&gt; map = <span class=\"keyword\">new</span> HashMap&lt;String, Object&gt;();</div><div class=\"line\">\t\tmap.put(<span class=\"string\">\"li\"</span>, <span class=\"string\">\"liu\"</span>);</div><div class=\"line\">\t\tmap.put(<span class=\"string\">\"dong\"</span>, <span class=\"string\">\"yue\"</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.setData(map);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> SUCCESS;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Map&lt;String, Object&gt; <span class=\"title\">getData</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> data;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setData</span><span class=\"params\">(Map&lt;String, Object&gt; data)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.data = data;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"在struts-xml中-继承自json-default\"><a href=\"#在struts-xml中-继承自json-default\" class=\"headerlink\" title=\"在struts.xml中 继承自json-default\"></a>在struts.xml中 继承自json-default</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">package</span> <span class=\"attr\">name</span>=<span class=\"string\">\"default\"</span> <span class=\"attr\">extends</span>=<span class=\"string\">\"json-default\"</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">name</span>=<span class=\"string\">\"login\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"eason.test.maven.Login\"</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">type</span>=<span class=\"string\">\"json\"</span>&gt;</span> 返回值json</div><div class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"root\"</span>&gt;</span>data<span class=\"tag\">&lt;/<span class=\"name\">param</span>&gt;</span> 不写这个有问题 data为json最外围map的名称</div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">action</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">package</span>&gt;</span></div></pre></td></tr></table></figure>"},{"title":"struts2环境搭建","date":"2017-04-21T07:55:11.000Z","_content":"## Struts2 环境搭建\n### 下包方法\n#### maven方式\n直接在eclipse中新建一个mavneproject--->选择webapp那项建立工程\n在pom.xml中添加struts2的核心依赖\n```xml\n<dependency>\n\t\t\t<groupId>org.apache.struts</groupId>\n\t\t\t<artifactId>struts2-core</artifactId>\n\t\t\t<version>2.5.10</version>\n</dependency>\n```\n#### 传统方式下载jar包\n[Struts2官网](https://struts.apache.org/)中下载最新jar包 当前版本2.5.10\n其中关键性jar包为\n* asm-5.1.jar 操作字节码 基于子类的动态代理\n* asm-commons-5.1.jar\n* asm-tree-5.1.jar\n* commons-fileupload-1.3.2.jar  io操作的jar\n* commons-io-2.4.jar\n* commons-lang3-3.4.jar   对java.lang的扩展\n* commons-logging-1.1.3.jar 对日志的扩展\n* freemaker-2.3.23.jar 对页面模板的扩展\n* javassist-3.20.0-GA.jar  对字节码的支持\n* log4j-api-2.7.jar 对日志的扩展\n* ognl-3.1.12.jar OGNL表达式\n* struts2-core-2.5.10.1.jar 核心库（新版包含xwork无需添加xwork）\n<!-- more -->\n\n### 创建工程\n* 将上文中的jar包拷入WEB-INFO中的lib，加到builPath\n* 在WEB-INFO中创建web.xml 添加 注意StrutsPrepareAndExecuteFilter类的位置在2.5中全限定名为这个\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<web-app xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txmlns=\"http://java.sun.com/xml/ns/javaee\"\n\txsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\"\n\tid=\"WebApp_ID\" version=\"3.0\">\n\t <filter>\n        <filter-name>struts2</filter-name>\n        <filter-class>org.apache.struts2.dispatcher.filter.StrutsPrepareAndExecuteFilter</filter-class>\n    </filter>\n    <filter-mapping>\n        <filter-name>struts2</filter-name>\n        <url-pattern>/*</url-pattern>\n    </filter-mapping>\n</web-app>\n```\n* 在src中创建struts.xml\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>    \n<!DOCTYPE struts PUBLIC    \n            \"-//Apache Software Foundation//DTD Struts Configuration 2.5//EN\"    \n    \"http://struts.apache.org/dtds/struts-2.5.dtd\">\n<struts>\n\t<package name=\"s\" extends=\"struts-default\">\n\t\t<action name=\"hell\" class=\"com.eason.hello.HelloWorld\">\n\t\t\t<result>/hello.jsp</result>\n\t\t</action>\n\t</package>\n</struts>\n```\n* 创建类 创建方法 运行...\n\n### 配置struts.xml  在struts.properties文件中创建重复的属性会覆盖   在web.xml中重复的属性会最终覆盖之前的属性\n```xml\n\t<constant name=\"struts.action.extension\" value=\"li,,\" /> //配置后缀\n\t<constant name=\"struts.devMode\" value=\"true\" />\t\t\t\t\t//开启dev模式 修改配置文件不用重启  更多的错误信息\n\t<constant name=\"struts.i18n.encoding\" value=\"UTF-8\" />\t//编码\n\t<constant name=\"struts.enable.DynamicMethodInvocation\" value=\"true\" /> //是否开启动态方法调用 动作名称！动作方法名  尽量不启用 方法名称放在url中不安全\n```\n```xml\n<package name=\"s\" extends=\"struts-default\">\n\tname 属性唯一\n\textends 继承struts-default 可以struts的核心功能\n\tnamespace 命名空间 添加之后路径名同事改变\n\t<action name=\"hello\" class=\"com.eason.hello.HelloWorld\" method=\"hello\">\n\t\tname 自定义名称 用于url调用 不可以添加.action\n\t\tclass 类全限定名称\n\t\tmethod 方法名\n\t\t<result name=\"add\">/add.jsp</result>\n\t\t\tname 与动作方法的返回值相同\n\t\t\ttype dispatcher 请求转发 默认值\n\t\t\t\t\t redirect  重定向 重定向后地址栏会发生改变-显著特征\n\t\t\t\t\t <result name=\"success\" type=\"redirect\">/redirect.jsp</result>\n\t\t\t\t\t chain 转发到另一个动作\n\t\t\t\t\t 同package下转发到另一个动作\n\t\t\t\t\t <action name=\"hello\" class=\"com.eason.l.HelloWorld\">\n\t \t\t\t\t \t\t<result name=\"success\" type=\"chain\">action</result>\n \t\t\t\t\t </action>\n \t\t\t\t \t <action name=\"action\" class=\"com.eason.l.HelloWorld\" method=\"action\">\n\t \t\t\t\t\t\t<result name=\"action\">/success.jsp</result>\n \t\t\t\t\t </action>\n\t\t\t\t\t 不同package下\n\t\t\t\t\t <action name=\"hello\" class=\"com.eason.l.HelloWorld\">\n\t\t\t\t\t\t \t<result name=\"success\" type=\"chain\">\n\t\t\t\t\t\t\t\t<param name=\"namespace\">/p2</param> 填写package的name\n\t\t\t\t\t\t\t\t<param name=\"actionName\">hello</param> 填写方法名称\n\t\t\t\t\t\t\t</result>\n\t\t\t\t\t\t</action>\n\t\t\t\t\t redirectAction 重定向到另一个动作 同上除了type不相同\n\t\t\t\t\t <action name=\"hello_*\" class=\"com.eason.l.HelloWorld\" method=\"{1}\">\n\t\t\t\t\t\t <result type=\"redirect\">/direct.jsp</result>\n\t\t\t\t\t\t <result name=\"add\" type=\"redirectAction\">hello</result>\n\t\t\t\t\t\t 在2.5之后通配符方法需要添加\n\t\t\t\t\t\t <allowed-methods>add,delete</allowed-methods>\n\t\t\t\t\t </action>\n\t</action>\n</package>\n```\n### struts.xml分包管理\n* 新建xml文件\n* 正常写配置信息\n* 在struts.xml 引入\n```xml\n<include file=\"struts_action.xml\"></include>\n```\n\n### servletApi获取\n* 推荐直接获取\n```java\n\tprivate HttpServletResponse response;\n\tprivate ServletContext application;\n\tprivate HttpSession session;\n\tprivate HttpServletRequest request;\n\trequest = ServletActionContext.getRequest();\n\tresponse = ServletActionContext.getResponse();\n\tapplication = ServletActionContext.getServletContext();\n\tsession = request.getSession();\n```\n* 实现接口方法\n```java\npublic class ServletAPI extends ActionSupport\n\t\timplements ServletContextAware, ServletResponseAware, ServletRequestAware {\n\t\t\t@Override\n\t\t\tpublic void setServletRequest(HttpServletRequest request){\n\t\t\t\tthis.request = request;\n\t\t\t}\n\t\t\t@Override\n\t\t\tpublic void setServletResponse(HttpServletResponse arg0) {\n\t\t\t\tthis.response = arg0;\n\t\t\t}\n\t\t\t@Override\n\t\t\tpublic void setServletContext(ServletContext arg0) {\n\t\t\t\tthis.application = arg0;\n\t\t\t}\n\t\t}\n```\n","source":"_posts/struts2环境搭建.md","raw":"---\ntitle: struts2环境搭建\ndate: 2017-04-21 15:55:11\ncategories:\n- javaee\ntags:\n- struts2\n- javaee\n---\n## Struts2 环境搭建\n### 下包方法\n#### maven方式\n直接在eclipse中新建一个mavneproject--->选择webapp那项建立工程\n在pom.xml中添加struts2的核心依赖\n```xml\n<dependency>\n\t\t\t<groupId>org.apache.struts</groupId>\n\t\t\t<artifactId>struts2-core</artifactId>\n\t\t\t<version>2.5.10</version>\n</dependency>\n```\n#### 传统方式下载jar包\n[Struts2官网](https://struts.apache.org/)中下载最新jar包 当前版本2.5.10\n其中关键性jar包为\n* asm-5.1.jar 操作字节码 基于子类的动态代理\n* asm-commons-5.1.jar\n* asm-tree-5.1.jar\n* commons-fileupload-1.3.2.jar  io操作的jar\n* commons-io-2.4.jar\n* commons-lang3-3.4.jar   对java.lang的扩展\n* commons-logging-1.1.3.jar 对日志的扩展\n* freemaker-2.3.23.jar 对页面模板的扩展\n* javassist-3.20.0-GA.jar  对字节码的支持\n* log4j-api-2.7.jar 对日志的扩展\n* ognl-3.1.12.jar OGNL表达式\n* struts2-core-2.5.10.1.jar 核心库（新版包含xwork无需添加xwork）\n<!-- more -->\n\n### 创建工程\n* 将上文中的jar包拷入WEB-INFO中的lib，加到builPath\n* 在WEB-INFO中创建web.xml 添加 注意StrutsPrepareAndExecuteFilter类的位置在2.5中全限定名为这个\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<web-app xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txmlns=\"http://java.sun.com/xml/ns/javaee\"\n\txsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\"\n\tid=\"WebApp_ID\" version=\"3.0\">\n\t <filter>\n        <filter-name>struts2</filter-name>\n        <filter-class>org.apache.struts2.dispatcher.filter.StrutsPrepareAndExecuteFilter</filter-class>\n    </filter>\n    <filter-mapping>\n        <filter-name>struts2</filter-name>\n        <url-pattern>/*</url-pattern>\n    </filter-mapping>\n</web-app>\n```\n* 在src中创建struts.xml\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>    \n<!DOCTYPE struts PUBLIC    \n            \"-//Apache Software Foundation//DTD Struts Configuration 2.5//EN\"    \n    \"http://struts.apache.org/dtds/struts-2.5.dtd\">\n<struts>\n\t<package name=\"s\" extends=\"struts-default\">\n\t\t<action name=\"hell\" class=\"com.eason.hello.HelloWorld\">\n\t\t\t<result>/hello.jsp</result>\n\t\t</action>\n\t</package>\n</struts>\n```\n* 创建类 创建方法 运行...\n\n### 配置struts.xml  在struts.properties文件中创建重复的属性会覆盖   在web.xml中重复的属性会最终覆盖之前的属性\n```xml\n\t<constant name=\"struts.action.extension\" value=\"li,,\" /> //配置后缀\n\t<constant name=\"struts.devMode\" value=\"true\" />\t\t\t\t\t//开启dev模式 修改配置文件不用重启  更多的错误信息\n\t<constant name=\"struts.i18n.encoding\" value=\"UTF-8\" />\t//编码\n\t<constant name=\"struts.enable.DynamicMethodInvocation\" value=\"true\" /> //是否开启动态方法调用 动作名称！动作方法名  尽量不启用 方法名称放在url中不安全\n```\n```xml\n<package name=\"s\" extends=\"struts-default\">\n\tname 属性唯一\n\textends 继承struts-default 可以struts的核心功能\n\tnamespace 命名空间 添加之后路径名同事改变\n\t<action name=\"hello\" class=\"com.eason.hello.HelloWorld\" method=\"hello\">\n\t\tname 自定义名称 用于url调用 不可以添加.action\n\t\tclass 类全限定名称\n\t\tmethod 方法名\n\t\t<result name=\"add\">/add.jsp</result>\n\t\t\tname 与动作方法的返回值相同\n\t\t\ttype dispatcher 请求转发 默认值\n\t\t\t\t\t redirect  重定向 重定向后地址栏会发生改变-显著特征\n\t\t\t\t\t <result name=\"success\" type=\"redirect\">/redirect.jsp</result>\n\t\t\t\t\t chain 转发到另一个动作\n\t\t\t\t\t 同package下转发到另一个动作\n\t\t\t\t\t <action name=\"hello\" class=\"com.eason.l.HelloWorld\">\n\t \t\t\t\t \t\t<result name=\"success\" type=\"chain\">action</result>\n \t\t\t\t\t </action>\n \t\t\t\t \t <action name=\"action\" class=\"com.eason.l.HelloWorld\" method=\"action\">\n\t \t\t\t\t\t\t<result name=\"action\">/success.jsp</result>\n \t\t\t\t\t </action>\n\t\t\t\t\t 不同package下\n\t\t\t\t\t <action name=\"hello\" class=\"com.eason.l.HelloWorld\">\n\t\t\t\t\t\t \t<result name=\"success\" type=\"chain\">\n\t\t\t\t\t\t\t\t<param name=\"namespace\">/p2</param> 填写package的name\n\t\t\t\t\t\t\t\t<param name=\"actionName\">hello</param> 填写方法名称\n\t\t\t\t\t\t\t</result>\n\t\t\t\t\t\t</action>\n\t\t\t\t\t redirectAction 重定向到另一个动作 同上除了type不相同\n\t\t\t\t\t <action name=\"hello_*\" class=\"com.eason.l.HelloWorld\" method=\"{1}\">\n\t\t\t\t\t\t <result type=\"redirect\">/direct.jsp</result>\n\t\t\t\t\t\t <result name=\"add\" type=\"redirectAction\">hello</result>\n\t\t\t\t\t\t 在2.5之后通配符方法需要添加\n\t\t\t\t\t\t <allowed-methods>add,delete</allowed-methods>\n\t\t\t\t\t </action>\n\t</action>\n</package>\n```\n### struts.xml分包管理\n* 新建xml文件\n* 正常写配置信息\n* 在struts.xml 引入\n```xml\n<include file=\"struts_action.xml\"></include>\n```\n\n### servletApi获取\n* 推荐直接获取\n```java\n\tprivate HttpServletResponse response;\n\tprivate ServletContext application;\n\tprivate HttpSession session;\n\tprivate HttpServletRequest request;\n\trequest = ServletActionContext.getRequest();\n\tresponse = ServletActionContext.getResponse();\n\tapplication = ServletActionContext.getServletContext();\n\tsession = request.getSession();\n```\n* 实现接口方法\n```java\npublic class ServletAPI extends ActionSupport\n\t\timplements ServletContextAware, ServletResponseAware, ServletRequestAware {\n\t\t\t@Override\n\t\t\tpublic void setServletRequest(HttpServletRequest request){\n\t\t\t\tthis.request = request;\n\t\t\t}\n\t\t\t@Override\n\t\t\tpublic void setServletResponse(HttpServletResponse arg0) {\n\t\t\t\tthis.response = arg0;\n\t\t\t}\n\t\t\t@Override\n\t\t\tpublic void setServletContext(ServletContext arg0) {\n\t\t\t\tthis.application = arg0;\n\t\t\t}\n\t\t}\n```\n","slug":"struts2环境搭建","published":1,"updated":"2017-05-13T00:33:23.763Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4qaebco00082oq9pj19nlkf","content":"<h2 id=\"Struts2-环境搭建\"><a href=\"#Struts2-环境搭建\" class=\"headerlink\" title=\"Struts2 环境搭建\"></a>Struts2 环境搭建</h2><h3 id=\"下包方法\"><a href=\"#下包方法\" class=\"headerlink\" title=\"下包方法\"></a>下包方法</h3><h4 id=\"maven方式\"><a href=\"#maven方式\" class=\"headerlink\" title=\"maven方式\"></a>maven方式</h4><p>直接在eclipse中新建一个mavneproject—&gt;选择webapp那项建立工程<br>在pom.xml中添加struts2的核心依赖<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.struts<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>struts2-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.5.10<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"传统方式下载jar包\"><a href=\"#传统方式下载jar包\" class=\"headerlink\" title=\"传统方式下载jar包\"></a>传统方式下载jar包</h4><p><a href=\"https://struts.apache.org/\" target=\"_blank\" rel=\"external\">Struts2官网</a>中下载最新jar包 当前版本2.5.10<br>其中关键性jar包为</p>\n<ul>\n<li>asm-5.1.jar 操作字节码 基于子类的动态代理</li>\n<li>asm-commons-5.1.jar</li>\n<li>asm-tree-5.1.jar</li>\n<li>commons-fileupload-1.3.2.jar  io操作的jar</li>\n<li>commons-io-2.4.jar</li>\n<li>commons-lang3-3.4.jar   对java.lang的扩展</li>\n<li>commons-logging-1.1.3.jar 对日志的扩展</li>\n<li>freemaker-2.3.23.jar 对页面模板的扩展</li>\n<li>javassist-3.20.0-GA.jar  对字节码的支持</li>\n<li>log4j-api-2.7.jar 对日志的扩展</li>\n<li>ognl-3.1.12.jar OGNL表达式</li>\n<li>struts2-core-2.5.10.1.jar 核心库（新版包含xwork无需添加xwork）<a id=\"more\"></a>\n</li>\n</ul>\n<h3 id=\"创建工程\"><a href=\"#创建工程\" class=\"headerlink\" title=\"创建工程\"></a>创建工程</h3><ul>\n<li>将上文中的jar包拷入WEB-INFO中的lib，加到builPath</li>\n<li><p>在WEB-INFO中创建web.xml 添加 注意StrutsPrepareAndExecuteFilter类的位置在2.5中全限定名为这个</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">web-app</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></div><div class=\"line\">\t<span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://java.sun.com/xml/ns/javaee\"</span></div><div class=\"line\">\t<span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\"</span></div><div class=\"line\">\t<span class=\"attr\">id</span>=<span class=\"string\">\"WebApp_ID\"</span> <span class=\"attr\">version</span>=<span class=\"string\">\"3.0\"</span>&gt;</div><div class=\"line\">\t <span class=\"tag\">&lt;<span class=\"name\">filter</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>struts2<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">filter-class</span>&gt;</span>org.apache.struts2.dispatcher.filter.StrutsPrepareAndExecuteFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-class</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-mapping</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>struts2<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/*<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">filter-mapping</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">web-app</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>在src中创建struts.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;    </div><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE struts PUBLIC    </span></div><div class=\"line\">            \"-//Apache Software Foundation//DTD Struts Configuration 2.5//EN\"    </div><div class=\"line\">    \"http://struts.apache.org/dtds/struts-2.5.dtd\"&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">struts</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">package</span> <span class=\"attr\">name</span>=<span class=\"string\">\"s\"</span> <span class=\"attr\">extends</span>=<span class=\"string\">\"struts-default\"</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hell\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.eason.hello.HelloWorld\"</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">result</span>&gt;</span>/hello.jsp<span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">action</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">package</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">struts</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>创建类 创建方法 运行…</p>\n</li>\n</ul>\n<h3 id=\"配置struts-xml-在struts-properties文件中创建重复的属性会覆盖-在web-xml中重复的属性会最终覆盖之前的属性\"><a href=\"#配置struts-xml-在struts-properties文件中创建重复的属性会覆盖-在web-xml中重复的属性会最终覆盖之前的属性\" class=\"headerlink\" title=\"配置struts.xml  在struts.properties文件中创建重复的属性会覆盖   在web.xml中重复的属性会最终覆盖之前的属性\"></a>配置struts.xml  在struts.properties文件中创建重复的属性会覆盖   在web.xml中重复的属性会最终覆盖之前的属性</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">constant</span> <span class=\"attr\">name</span>=<span class=\"string\">\"struts.action.extension\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"li,,\"</span> /&gt;</span> //配置后缀</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">constant</span> <span class=\"attr\">name</span>=<span class=\"string\">\"struts.devMode\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span> /&gt;</span>\t\t\t\t\t//开启dev模式 修改配置文件不用重启  更多的错误信息</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">constant</span> <span class=\"attr\">name</span>=<span class=\"string\">\"struts.i18n.encoding\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"UTF-8\"</span> /&gt;</span>\t//编码</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">constant</span> <span class=\"attr\">name</span>=<span class=\"string\">\"struts.enable.DynamicMethodInvocation\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span> /&gt;</span> //是否开启动态方法调用 动作名称！动作方法名  尽量不启用 方法名称放在url中不安全</div></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">package</span> <span class=\"attr\">name</span>=<span class=\"string\">\"s\"</span> <span class=\"attr\">extends</span>=<span class=\"string\">\"struts-default\"</span>&gt;</span></div><div class=\"line\">\tname 属性唯一</div><div class=\"line\">\textends 继承struts-default 可以struts的核心功能</div><div class=\"line\">\tnamespace 命名空间 添加之后路径名同事改变</div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hello\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.eason.hello.HelloWorld\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"hello\"</span>&gt;</span></div><div class=\"line\">\t\tname 自定义名称 用于url调用 不可以添加.action</div><div class=\"line\">\t\tclass 类全限定名称</div><div class=\"line\">\t\tmethod 方法名</div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">name</span>=<span class=\"string\">\"add\"</span>&gt;</span>/add.jsp<span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span></div><div class=\"line\">\t\t\tname 与动作方法的返回值相同</div><div class=\"line\">\t\t\ttype dispatcher 请求转发 默认值</div><div class=\"line\">\t\t\t\t\t redirect  重定向 重定向后地址栏会发生改变-显著特征</div><div class=\"line\">\t\t\t\t\t <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">name</span>=<span class=\"string\">\"success\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"redirect\"</span>&gt;</span>/redirect.jsp<span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span></div><div class=\"line\">\t\t\t\t\t chain 转发到另一个动作</div><div class=\"line\">\t\t\t\t\t 同package下转发到另一个动作</div><div class=\"line\">\t\t\t\t\t <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hello\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.eason.l.HelloWorld\"</span>&gt;</span></div><div class=\"line\">\t \t\t\t\t \t\t<span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">name</span>=<span class=\"string\">\"success\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"chain\"</span>&gt;</span>action<span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span></div><div class=\"line\"> \t\t\t\t\t <span class=\"tag\">&lt;/<span class=\"name\">action</span>&gt;</span></div><div class=\"line\"> \t\t\t\t \t <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">name</span>=<span class=\"string\">\"action\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.eason.l.HelloWorld\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"action\"</span>&gt;</span></div><div class=\"line\">\t \t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">name</span>=<span class=\"string\">\"action\"</span>&gt;</span>/success.jsp<span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span></div><div class=\"line\"> \t\t\t\t\t <span class=\"tag\">&lt;/<span class=\"name\">action</span>&gt;</span></div><div class=\"line\">\t\t\t\t\t 不同package下</div><div class=\"line\">\t\t\t\t\t <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hello\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.eason.l.HelloWorld\"</span>&gt;</span></div><div class=\"line\">\t\t\t\t\t\t \t<span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">name</span>=<span class=\"string\">\"success\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"chain\"</span>&gt;</span></div><div class=\"line\">\t\t\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"namespace\"</span>&gt;</span>/p2<span class=\"tag\">&lt;/<span class=\"name\">param</span>&gt;</span> 填写package的name</div><div class=\"line\">\t\t\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"actionName\"</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">param</span>&gt;</span> 填写方法名称</div><div class=\"line\">\t\t\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span></div><div class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">action</span>&gt;</span></div><div class=\"line\">\t\t\t\t\t redirectAction 重定向到另一个动作 同上除了type不相同</div><div class=\"line\">\t\t\t\t\t <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hello_*\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.eason.l.HelloWorld\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"&#123;1&#125;\"</span>&gt;</span></div><div class=\"line\">\t\t\t\t\t\t <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">type</span>=<span class=\"string\">\"redirect\"</span>&gt;</span>/direct.jsp<span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span></div><div class=\"line\">\t\t\t\t\t\t <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">name</span>=<span class=\"string\">\"add\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"redirectAction\"</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span></div><div class=\"line\">\t\t\t\t\t\t 在2.5之后通配符方法需要添加</div><div class=\"line\">\t\t\t\t\t\t <span class=\"tag\">&lt;<span class=\"name\">allowed-methods</span>&gt;</span>add,delete<span class=\"tag\">&lt;/<span class=\"name\">allowed-methods</span>&gt;</span></div><div class=\"line\">\t\t\t\t\t <span class=\"tag\">&lt;/<span class=\"name\">action</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">action</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">package</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"struts-xml分包管理\"><a href=\"#struts-xml分包管理\" class=\"headerlink\" title=\"struts.xml分包管理\"></a>struts.xml分包管理</h3><ul>\n<li>新建xml文件</li>\n<li>正常写配置信息</li>\n<li>在struts.xml 引入<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">file</span>=<span class=\"string\">\"struts_action.xml\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"servletApi获取\"><a href=\"#servletApi获取\" class=\"headerlink\" title=\"servletApi获取\"></a>servletApi获取</h3><ul>\n<li><p>推荐直接获取</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> HttpServletResponse response;</div><div class=\"line\"><span class=\"keyword\">private</span> ServletContext application;</div><div class=\"line\"><span class=\"keyword\">private</span> HttpSession session;</div><div class=\"line\"><span class=\"keyword\">private</span> HttpServletRequest request;</div><div class=\"line\">request = ServletActionContext.getRequest();</div><div class=\"line\">response = ServletActionContext.getResponse();</div><div class=\"line\">application = ServletActionContext.getServletContext();</div><div class=\"line\">session = request.getSession();</div></pre></td></tr></table></figure>\n</li>\n<li><p>实现接口方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ServletAPI</span> <span class=\"keyword\">extends</span> <span class=\"title\">ActionSupport</span></span></div><div class=\"line\">\t\t<span class=\"keyword\">implements</span> <span class=\"title\">ServletContextAware</span>, <span class=\"title\">ServletResponseAware</span>, <span class=\"title\">ServletRequestAware</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setServletRequest</span><span class=\"params\">(HttpServletRequest request)</span></span>&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">this</span>.request = request;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setServletResponse</span><span class=\"params\">(HttpServletResponse arg0)</span> </span>&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">this</span>.response = arg0;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setServletContext</span><span class=\"params\">(ServletContext arg0)</span> </span>&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">this</span>.application = arg0;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"Struts2-环境搭建\"><a href=\"#Struts2-环境搭建\" class=\"headerlink\" title=\"Struts2 环境搭建\"></a>Struts2 环境搭建</h2><h3 id=\"下包方法\"><a href=\"#下包方法\" class=\"headerlink\" title=\"下包方法\"></a>下包方法</h3><h4 id=\"maven方式\"><a href=\"#maven方式\" class=\"headerlink\" title=\"maven方式\"></a>maven方式</h4><p>直接在eclipse中新建一个mavneproject—&gt;选择webapp那项建立工程<br>在pom.xml中添加struts2的核心依赖<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.struts<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>struts2-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.5.10<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"传统方式下载jar包\"><a href=\"#传统方式下载jar包\" class=\"headerlink\" title=\"传统方式下载jar包\"></a>传统方式下载jar包</h4><p><a href=\"https://struts.apache.org/\">Struts2官网</a>中下载最新jar包 当前版本2.5.10<br>其中关键性jar包为</p>\n<ul>\n<li>asm-5.1.jar 操作字节码 基于子类的动态代理</li>\n<li>asm-commons-5.1.jar</li>\n<li>asm-tree-5.1.jar</li>\n<li>commons-fileupload-1.3.2.jar  io操作的jar</li>\n<li>commons-io-2.4.jar</li>\n<li>commons-lang3-3.4.jar   对java.lang的扩展</li>\n<li>commons-logging-1.1.3.jar 对日志的扩展</li>\n<li>freemaker-2.3.23.jar 对页面模板的扩展</li>\n<li>javassist-3.20.0-GA.jar  对字节码的支持</li>\n<li>log4j-api-2.7.jar 对日志的扩展</li>\n<li>ognl-3.1.12.jar OGNL表达式</li>\n<li>struts2-core-2.5.10.1.jar 核心库（新版包含xwork无需添加xwork）","more":"</li>\n</ul>\n<h3 id=\"创建工程\"><a href=\"#创建工程\" class=\"headerlink\" title=\"创建工程\"></a>创建工程</h3><ul>\n<li>将上文中的jar包拷入WEB-INFO中的lib，加到builPath</li>\n<li><p>在WEB-INFO中创建web.xml 添加 注意StrutsPrepareAndExecuteFilter类的位置在2.5中全限定名为这个</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">web-app</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></div><div class=\"line\">\t<span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://java.sun.com/xml/ns/javaee\"</span></div><div class=\"line\">\t<span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\"</span></div><div class=\"line\">\t<span class=\"attr\">id</span>=<span class=\"string\">\"WebApp_ID\"</span> <span class=\"attr\">version</span>=<span class=\"string\">\"3.0\"</span>&gt;</span></div><div class=\"line\">\t <span class=\"tag\">&lt;<span class=\"name\">filter</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>struts2<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">filter-class</span>&gt;</span>org.apache.struts2.dispatcher.filter.StrutsPrepareAndExecuteFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-class</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-mapping</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>struts2<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/*<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">filter-mapping</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">web-app</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>在src中创建struts.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;    </div><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE struts PUBLIC    </div><div class=\"line\">            \"-//Apache Software Foundation//DTD Struts Configuration 2.5//EN\"    </div><div class=\"line\">    \"http://struts.apache.org/dtds/struts-2.5.dtd\"&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">struts</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">package</span> <span class=\"attr\">name</span>=<span class=\"string\">\"s\"</span> <span class=\"attr\">extends</span>=<span class=\"string\">\"struts-default\"</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hell\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.eason.hello.HelloWorld\"</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">result</span>&gt;</span>/hello.jsp<span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">action</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">package</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">struts</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>创建类 创建方法 运行…</p>\n</li>\n</ul>\n<h3 id=\"配置struts-xml-在struts-properties文件中创建重复的属性会覆盖-在web-xml中重复的属性会最终覆盖之前的属性\"><a href=\"#配置struts-xml-在struts-properties文件中创建重复的属性会覆盖-在web-xml中重复的属性会最终覆盖之前的属性\" class=\"headerlink\" title=\"配置struts.xml  在struts.properties文件中创建重复的属性会覆盖   在web.xml中重复的属性会最终覆盖之前的属性\"></a>配置struts.xml  在struts.properties文件中创建重复的属性会覆盖   在web.xml中重复的属性会最终覆盖之前的属性</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">constant</span> <span class=\"attr\">name</span>=<span class=\"string\">\"struts.action.extension\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"li,,\"</span> /&gt;</span> //配置后缀</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">constant</span> <span class=\"attr\">name</span>=<span class=\"string\">\"struts.devMode\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span> /&gt;</span>\t\t\t\t\t//开启dev模式 修改配置文件不用重启  更多的错误信息</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">constant</span> <span class=\"attr\">name</span>=<span class=\"string\">\"struts.i18n.encoding\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"UTF-8\"</span> /&gt;</span>\t//编码</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">constant</span> <span class=\"attr\">name</span>=<span class=\"string\">\"struts.enable.DynamicMethodInvocation\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span> /&gt;</span> //是否开启动态方法调用 动作名称！动作方法名  尽量不启用 方法名称放在url中不安全</div></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">package</span> <span class=\"attr\">name</span>=<span class=\"string\">\"s\"</span> <span class=\"attr\">extends</span>=<span class=\"string\">\"struts-default\"</span>&gt;</span></div><div class=\"line\">\tname 属性唯一</div><div class=\"line\">\textends 继承struts-default 可以struts的核心功能</div><div class=\"line\">\tnamespace 命名空间 添加之后路径名同事改变</div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hello\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.eason.hello.HelloWorld\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"hello\"</span>&gt;</span></div><div class=\"line\">\t\tname 自定义名称 用于url调用 不可以添加.action</div><div class=\"line\">\t\tclass 类全限定名称</div><div class=\"line\">\t\tmethod 方法名</div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">name</span>=<span class=\"string\">\"add\"</span>&gt;</span>/add.jsp<span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span></div><div class=\"line\">\t\t\tname 与动作方法的返回值相同</div><div class=\"line\">\t\t\ttype dispatcher 请求转发 默认值</div><div class=\"line\">\t\t\t\t\t redirect  重定向 重定向后地址栏会发生改变-显著特征</div><div class=\"line\">\t\t\t\t\t <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">name</span>=<span class=\"string\">\"success\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"redirect\"</span>&gt;</span>/redirect.jsp<span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span></div><div class=\"line\">\t\t\t\t\t chain 转发到另一个动作</div><div class=\"line\">\t\t\t\t\t 同package下转发到另一个动作</div><div class=\"line\">\t\t\t\t\t <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hello\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.eason.l.HelloWorld\"</span>&gt;</span></div><div class=\"line\">\t \t\t\t\t \t\t<span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">name</span>=<span class=\"string\">\"success\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"chain\"</span>&gt;</span>action<span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span></div><div class=\"line\"> \t\t\t\t\t <span class=\"tag\">&lt;/<span class=\"name\">action</span>&gt;</span></div><div class=\"line\"> \t\t\t\t \t <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">name</span>=<span class=\"string\">\"action\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.eason.l.HelloWorld\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"action\"</span>&gt;</span></div><div class=\"line\">\t \t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">name</span>=<span class=\"string\">\"action\"</span>&gt;</span>/success.jsp<span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span></div><div class=\"line\"> \t\t\t\t\t <span class=\"tag\">&lt;/<span class=\"name\">action</span>&gt;</span></div><div class=\"line\">\t\t\t\t\t 不同package下</div><div class=\"line\">\t\t\t\t\t <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hello\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.eason.l.HelloWorld\"</span>&gt;</span></div><div class=\"line\">\t\t\t\t\t\t \t<span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">name</span>=<span class=\"string\">\"success\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"chain\"</span>&gt;</span></div><div class=\"line\">\t\t\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"namespace\"</span>&gt;</span>/p2<span class=\"tag\">&lt;/<span class=\"name\">param</span>&gt;</span> 填写package的name</div><div class=\"line\">\t\t\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"actionName\"</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">param</span>&gt;</span> 填写方法名称</div><div class=\"line\">\t\t\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span></div><div class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">action</span>&gt;</span></div><div class=\"line\">\t\t\t\t\t redirectAction 重定向到另一个动作 同上除了type不相同</div><div class=\"line\">\t\t\t\t\t <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hello_*\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.eason.l.HelloWorld\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"&#123;1&#125;\"</span>&gt;</span></div><div class=\"line\">\t\t\t\t\t\t <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">type</span>=<span class=\"string\">\"redirect\"</span>&gt;</span>/direct.jsp<span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span></div><div class=\"line\">\t\t\t\t\t\t <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">name</span>=<span class=\"string\">\"add\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"redirectAction\"</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span></div><div class=\"line\">\t\t\t\t\t\t 在2.5之后通配符方法需要添加</div><div class=\"line\">\t\t\t\t\t\t <span class=\"tag\">&lt;<span class=\"name\">allowed-methods</span>&gt;</span>add,delete<span class=\"tag\">&lt;/<span class=\"name\">allowed-methods</span>&gt;</span></div><div class=\"line\">\t\t\t\t\t <span class=\"tag\">&lt;/<span class=\"name\">action</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">action</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">package</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"struts-xml分包管理\"><a href=\"#struts-xml分包管理\" class=\"headerlink\" title=\"struts.xml分包管理\"></a>struts.xml分包管理</h3><ul>\n<li>新建xml文件</li>\n<li>正常写配置信息</li>\n<li>在struts.xml 引入<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">file</span>=<span class=\"string\">\"struts_action.xml\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"servletApi获取\"><a href=\"#servletApi获取\" class=\"headerlink\" title=\"servletApi获取\"></a>servletApi获取</h3><ul>\n<li><p>推荐直接获取</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> HttpServletResponse response;</div><div class=\"line\"><span class=\"keyword\">private</span> ServletContext application;</div><div class=\"line\"><span class=\"keyword\">private</span> HttpSession session;</div><div class=\"line\"><span class=\"keyword\">private</span> HttpServletRequest request;</div><div class=\"line\">request = ServletActionContext.getRequest();</div><div class=\"line\">response = ServletActionContext.getResponse();</div><div class=\"line\">application = ServletActionContext.getServletContext();</div><div class=\"line\">session = request.getSession();</div></pre></td></tr></table></figure>\n</li>\n<li><p>实现接口方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ServletAPI</span> <span class=\"keyword\">extends</span> <span class=\"title\">ActionSupport</span></div><div class=\"line\">\t\t<span class=\"keyword\">implements</span> <span class=\"title\">ServletContextAware</span>, <span class=\"title\">ServletResponseAware</span>, <span class=\"title\">ServletRequestAware</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setServletRequest</span><span class=\"params\">(HttpServletRequest request)</span></span>&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">this</span>.request = request;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setServletResponse</span><span class=\"params\">(HttpServletResponse arg0)</span> </span>&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">this</span>.response = arg0;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setServletContext</span><span class=\"params\">(ServletContext arg0)</span> </span>&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">this</span>.application = arg0;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>"},{"title":"struts获取正文","date":"2017-04-24T02:28:18.000Z","_content":"## 静态获取正文(写死)\n```java\n  private String name;\n\tprivate int age;\n\n\tpublic String addUser() {\n\t\tSystem.out.println(name + \"---\" + age);\n\t\treturn SUCCESS;\n\t}\n  //get and set..\n```\n<!-- more -->\n在配置action中添加\n```xml\n<action name=\"adduser\" class=\"com.eason.DynamicTest\" method=\"addUser\">\n\t\t\t<param name=\"name\">张三</param> 名称必须相同\n\t\t\t<param name=\"age\">13</param>\n\t\t\t<result>/success.jsp</result>\n</action>\n```\n## 动态获取正文\n* java类同上时 属性为成员变量时 直接访问即可,属性名称要相同http://localhost:8080/0424/adduser1?name=li&age=1\n* javabean 分出时 生成单独的domain包 访问\n  ```java\n  public class User {\n  \tprivate String name;\n  \tprivate int age;\n    //set and get\n  }\n  ```\n\n  ```java\n  private User user;\n\n\tpublic User getUser() {\n\t\treturn user;\n\t}\n\n\tpublic void setUser(User user) {\n\t\tthis.user = user;\n\t}\n  ```\n访问时需要这样http://localhost:8080/0424/adduser2?user.name=li&user.age=1\n* javabean 分出时 实现ModelDriven 接口 此时javabean必须初始化\n```java\n  private User user=new User();\n  @Override\n\tpublic User getModel() {\n\t\t// TODO Auto-generated method stub\n\t\treturn user;\n\t}\n```\n访问时http://localhost:8080/0424/adduser3?name=13&age=1即可\n","source":"_posts/struts获取正文.md","raw":"---\ntitle: struts获取正文\ndate: 2017-04-24 10:28:18\ncategories:\n- javaee\ntags:\n- struts2\n- javaee\n---\n## 静态获取正文(写死)\n```java\n  private String name;\n\tprivate int age;\n\n\tpublic String addUser() {\n\t\tSystem.out.println(name + \"---\" + age);\n\t\treturn SUCCESS;\n\t}\n  //get and set..\n```\n<!-- more -->\n在配置action中添加\n```xml\n<action name=\"adduser\" class=\"com.eason.DynamicTest\" method=\"addUser\">\n\t\t\t<param name=\"name\">张三</param> 名称必须相同\n\t\t\t<param name=\"age\">13</param>\n\t\t\t<result>/success.jsp</result>\n</action>\n```\n## 动态获取正文\n* java类同上时 属性为成员变量时 直接访问即可,属性名称要相同http://localhost:8080/0424/adduser1?name=li&age=1\n* javabean 分出时 生成单独的domain包 访问\n  ```java\n  public class User {\n  \tprivate String name;\n  \tprivate int age;\n    //set and get\n  }\n  ```\n\n  ```java\n  private User user;\n\n\tpublic User getUser() {\n\t\treturn user;\n\t}\n\n\tpublic void setUser(User user) {\n\t\tthis.user = user;\n\t}\n  ```\n访问时需要这样http://localhost:8080/0424/adduser2?user.name=li&user.age=1\n* javabean 分出时 实现ModelDriven 接口 此时javabean必须初始化\n```java\n  private User user=new User();\n  @Override\n\tpublic User getModel() {\n\t\t// TODO Auto-generated method stub\n\t\treturn user;\n\t}\n```\n访问时http://localhost:8080/0424/adduser3?name=13&age=1即可\n","slug":"struts获取正文","published":1,"updated":"2017-06-24T05:11:25.450Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4qaebct000b2oq9lie1hu8u","content":"<h2 id=\"静态获取正文-写死\"><a href=\"#静态获取正文-写死\" class=\"headerlink\" title=\"静态获取正文(写死)\"></a>静态获取正文(写死)</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"keyword\">private</span> String name;</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">addUser</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\tSystem.out.println(name + <span class=\"string\">\"---\"</span> + age);</div><div class=\"line\">\t<span class=\"keyword\">return</span> SUCCESS;</div><div class=\"line\">&#125;</div><div class=\"line\"> <span class=\"comment\">//get and set..</span></div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>在配置action中添加<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">name</span>=<span class=\"string\">\"adduser\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.eason.DynamicTest\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"addUser\"</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span>&gt;</span>张三<span class=\"tag\">&lt;/<span class=\"name\">param</span>&gt;</span> 名称必须相同</div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"age\"</span>&gt;</span>13<span class=\"tag\">&lt;/<span class=\"name\">param</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">result</span>&gt;</span>/success.jsp<span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">action</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"动态获取正文\"><a href=\"#动态获取正文\" class=\"headerlink\" title=\"动态获取正文\"></a>动态获取正文</h2><ul>\n<li>java类同上时 属性为成员变量时 直接访问即可,属性名称要相同<a href=\"http://localhost:8080/0424/adduser1?name=li&amp;age=1\" target=\"_blank\" rel=\"external\">http://localhost:8080/0424/adduser1?name=li&amp;age=1</a></li>\n<li><p>javabean 分出时 生成单独的domain包 访问</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> String name;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</div><div class=\"line\">  <span class=\"comment\">//set and get</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"keyword\">private</span> User user;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">getUser</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> user;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setUser</span><span class=\"params\">(User user)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">this</span>.user = user;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>访问时需要这样<a href=\"http://localhost:8080/0424/adduser2?user.name=li&amp;user.age=1\" target=\"_blank\" rel=\"external\">http://localhost:8080/0424/adduser2?user.name=li&amp;user.age=1</a></p>\n<ul>\n<li>javabean 分出时 实现ModelDriven 接口 此时javabean必须初始化<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"keyword\">private</span> User user=<span class=\"keyword\">new</span> User();</div><div class=\"line\"> <span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">getModel</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">// TODO Auto-generated method stub</span></div><div class=\"line\">\t<span class=\"keyword\">return</span> user;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>访问时<a href=\"http://localhost:8080/0424/adduser3?name=13&amp;age=1即可\" target=\"_blank\" rel=\"external\">http://localhost:8080/0424/adduser3?name=13&amp;age=1即可</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"静态获取正文-写死\"><a href=\"#静态获取正文-写死\" class=\"headerlink\" title=\"静态获取正文(写死)\"></a>静态获取正文(写死)</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"keyword\">private</span> String name;</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">addUser</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\tSystem.out.println(name + <span class=\"string\">\"---\"</span> + age);</div><div class=\"line\">\t<span class=\"keyword\">return</span> SUCCESS;</div><div class=\"line\">&#125;</div><div class=\"line\"> <span class=\"comment\">//get and set..</span></div></pre></td></tr></table></figure>","more":"<p>在配置action中添加<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">name</span>=<span class=\"string\">\"adduser\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.eason.DynamicTest\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"addUser\"</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span>&gt;</span>张三<span class=\"tag\">&lt;/<span class=\"name\">param</span>&gt;</span> 名称必须相同</div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"age\"</span>&gt;</span>13<span class=\"tag\">&lt;/<span class=\"name\">param</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">result</span>&gt;</span>/success.jsp<span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">action</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"动态获取正文\"><a href=\"#动态获取正文\" class=\"headerlink\" title=\"动态获取正文\"></a>动态获取正文</h2><ul>\n<li>java类同上时 属性为成员变量时 直接访问即可,属性名称要相同<a href=\"http://localhost:8080/0424/adduser1?name=li&amp;age=1\">http://localhost:8080/0424/adduser1?name=li&amp;age=1</a></li>\n<li><p>javabean 分出时 生成单独的domain包 访问</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> String name;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</div><div class=\"line\">  <span class=\"comment\">//set and get</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"keyword\">private</span> User user;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">getUser</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> user;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setUser</span><span class=\"params\">(User user)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">this</span>.user = user;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>访问时需要这样<a href=\"http://localhost:8080/0424/adduser2?user.name=li&amp;user.age=1\">http://localhost:8080/0424/adduser2?user.name=li&amp;user.age=1</a></p>\n<ul>\n<li>javabean 分出时 实现ModelDriven 接口 此时javabean必须初始化<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"keyword\">private</span> User user=<span class=\"keyword\">new</span> User();</div><div class=\"line\"> <span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">getModel</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">// TODO Auto-generated method stub</span></div><div class=\"line\">\t<span class=\"keyword\">return</span> user;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>访问时<a href=\"http://localhost:8080/0424/adduser3?name=13&amp;age=1即可\">http://localhost:8080/0424/adduser3?name=13&amp;age=1即可</a></p>"},{"title":"webview中控制视频播放暂停","date":"2017-04-13T13:50:04.000Z","_content":"## 视频播放失败情况\n\nwebview中https和http混合使用访问导致访问失败\n在低版本中是可以混合使用的，高版本中默认取消了这个模式需要手动开启\n```java\nif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n          webView.getSettings().setMixedContentMode(WebSettings.MIXED_CONTENT_ALWAYS_ALLOW);\n  }\n```\n\n## 播放视频退出声音还在\n\nwebview中播放视频需要手动控制停止还是播放可以通过反射方法来控制\n### 播放暂停\n```java\nwebView.getClass().getMethod(\"onPause\").invoke(webView,(Object[])null);\n```\n### 播放开始\n```java\nwebView.getClass().getMethod(\"onResume\").invoke(webView,(Object[])null);\n```\n","source":"_posts/webview中控制视频播放暂停.md","raw":"---\ntitle: webview中控制视频播放暂停\ndate: 2017-04-13 21:50:04\ntags:\n- 笔记\ncategories:\n- 笔记\n- android\n---\n## 视频播放失败情况\n\nwebview中https和http混合使用访问导致访问失败\n在低版本中是可以混合使用的，高版本中默认取消了这个模式需要手动开启\n```java\nif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n          webView.getSettings().setMixedContentMode(WebSettings.MIXED_CONTENT_ALWAYS_ALLOW);\n  }\n```\n\n## 播放视频退出声音还在\n\nwebview中播放视频需要手动控制停止还是播放可以通过反射方法来控制\n### 播放暂停\n```java\nwebView.getClass().getMethod(\"onPause\").invoke(webView,(Object[])null);\n```\n### 播放开始\n```java\nwebView.getClass().getMethod(\"onResume\").invoke(webView,(Object[])null);\n```\n","slug":"webview中控制视频播放暂停","published":1,"updated":"2017-04-19T05:53:35.013Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4qaebcu000d2oq96cpmzmqy","content":"<h2 id=\"视频播放失败情况\"><a href=\"#视频播放失败情况\" class=\"headerlink\" title=\"视频播放失败情况\"></a>视频播放失败情况</h2><p>webview中https和http混合使用访问导致访问失败<br>在低版本中是可以混合使用的，高版本中默认取消了这个模式需要手动开启<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP) &#123;</div><div class=\"line\">          webView.getSettings().setMixedContentMode(WebSettings.MIXED_CONTENT_ALWAYS_ALLOW);</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"播放视频退出声音还在\"><a href=\"#播放视频退出声音还在\" class=\"headerlink\" title=\"播放视频退出声音还在\"></a>播放视频退出声音还在</h2><p>webview中播放视频需要手动控制停止还是播放可以通过反射方法来控制</p>\n<h3 id=\"播放暂停\"><a href=\"#播放暂停\" class=\"headerlink\" title=\"播放暂停\"></a>播放暂停</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">webView.getClass().getMethod(<span class=\"string\">\"onPause\"</span>).invoke(webView,(Object[])<span class=\"keyword\">null</span>);</div></pre></td></tr></table></figure>\n<h3 id=\"播放开始\"><a href=\"#播放开始\" class=\"headerlink\" title=\"播放开始\"></a>播放开始</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">webView.getClass().getMethod(<span class=\"string\">\"onResume\"</span>).invoke(webView,(Object[])<span class=\"keyword\">null</span>);</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"视频播放失败情况\"><a href=\"#视频播放失败情况\" class=\"headerlink\" title=\"视频播放失败情况\"></a>视频播放失败情况</h2><p>webview中https和http混合使用访问导致访问失败<br>在低版本中是可以混合使用的，高版本中默认取消了这个模式需要手动开启<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP) &#123;</div><div class=\"line\">          webView.getSettings().setMixedContentMode(WebSettings.MIXED_CONTENT_ALWAYS_ALLOW);</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"播放视频退出声音还在\"><a href=\"#播放视频退出声音还在\" class=\"headerlink\" title=\"播放视频退出声音还在\"></a>播放视频退出声音还在</h2><p>webview中播放视频需要手动控制停止还是播放可以通过反射方法来控制</p>\n<h3 id=\"播放暂停\"><a href=\"#播放暂停\" class=\"headerlink\" title=\"播放暂停\"></a>播放暂停</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">webView.getClass().getMethod(<span class=\"string\">\"onPause\"</span>).invoke(webView,(Object[])<span class=\"keyword\">null</span>);</div></pre></td></tr></table></figure>\n<h3 id=\"播放开始\"><a href=\"#播放开始\" class=\"headerlink\" title=\"播放开始\"></a>播放开始</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">webView.getClass().getMethod(<span class=\"string\">\"onResume\"</span>).invoke(webView,(Object[])<span class=\"keyword\">null</span>);</div></pre></td></tr></table></figure>\n"},{"title":"仿美团外卖添加商品的抛物线动画","date":"2017-03-17T08:40:11.000Z","_content":"# [GitHub - jlcclidong/AddCartAniamtion: 仿美团外卖添加动画的三方库](https://github.com/jlcclidong/AddCartAniamtion)\n\n## 1.初衷\n公司要做一个点餐系统，要求类似要的美团外卖的点餐动画，就像下面这样一个抛物线（biu）\n\n![美团的动画](http://omy391n59.bkt.clouddn.com/image/addcart1905930-f419e78607521fb6.gif)\n\n身为一个把时间节约全部投入到工作中的程序员，baidu geogle了好久发现没有这个动画效果的具体实现.有的效果也不是很好，只好自己写一个这样的效果了(搬砖去了)\n<!-- more -->\n## 2.结果\n\n结果demo就是和下面一样做的一个动画效果\n![自己的动画\n](http://omy391n59.bkt.clouddn.com/image/addcart1905930-a9a2726a504ab56f.gif)\n\n\n可以直接使用拷贝这个类或者在Project中build.gradle添加\n````java\nallprojects{\n  repositories{\n    ...\n    maven{url\"https://jitpack.io\"}\n  }\n}\n````\n在Moudle中的build.gradle\n````java\n\ndependencies{\n  compile'com.github.jlcclidong:AddCartAniamtion:v3.0'\n}\n````\n直接使用AddCartAniamtion.AddToCart()完成动画，图片默认为填入ImageView的图片，想要自己更改的可以去源码中更改，本人水平有限，希望多交流。\n\n自己使用在RecycleView中没有问题。动画左右飞都木有问题。\n\n## 3.过程\n\n本身看到过一个用贝塞尔曲线来做这个效果的，效果不好(好吧，主要是自己数学实在不争气)\n身为程序员里物理学的最好的还是用物理公式来解决问题吧，加属性动画\n\n首先确定父控件，起始位置控件，以及终点位置控件位置\n\n````java\n//计算父控件的位置\nint[] parent =new int[2];\nrl.getLocationInWindow(parent);\n\n//计算起点控件位置\nint[] startLocation =new int[2];\nstartView.getLocationInWindow(startLocation);\n\n//计算终点控件位置\nint[] endLocation =new int[2];\nendView.getLocationInWindow(endLocation);\n````\n添加一个用于ImageView用于动画（注意确定添加的位置是一定要注意父控件的Padding值，因为这个错位了好久）\n````java\nfinal ImageView view =newImageView(mContext);\n\n//确定ImageView大小与传进来的ImageView相同\nRelativeLayout.LayoutParams params =new RelativeLayout.LayoutParams(startView.getWidth(),startView.getHeight());\n\n//获取ImageView的图片 并设置在新的ImageView上\nview.setImageDrawable(startView.getDrawable());\n\n//确定ImageView的位置与startView相同\nparams.leftMargin= startLocation[0] - parent[0] - rl.getPaddingLeft();\nparams.topMargin= startLocation[1] - parent[1] - rl.getPaddingTop();\n\nrl.addView(view,params);\n````\n好吧重点来了 我把初始的X轴Y轴速度设成相同的这样保证了上移的效果 然后根据时间 距离计算初速度 加速度 基本就用到了这么一个公式\n\n    s=vt+g*t*t/2\n````java\n//计算两者的横向X轴的距离差\nint XtoX = endLocation[0] - startLocation[0] + endView.getWidth() /2-\nstartView.getWidth() /2;\n\n//根据距离 时间 获取到对应的X轴的初速度\nfinal float xv = XtoX / time;\n\n//计算两者的横向X轴的距离差\nint YtoY = endLocation[1] - startLocation[1];\n\n//根据距离 时间 初始设置的Y轴初速度与X轴初速度相同 获取到竖直方向上的加速度\nfinal float g;\nif(xv>0) {\n  g = (YtoY + xv * time) / time / time *2;\n}else{\n  g = (YtoY - xv * time) / time / time *2;\n}\n设置属性动画了\n\nValueAnimator va =new ValueAnimator();\nva.setDuration(time *1000);\nva.setObjectValues(newPointF(0,0));\n\n//计算位置\n\nva.setEvaluator(new TypeEvaluator() {\n    @Override\n    public Point Fevaluate(float v,PointF pointF,PointF t1) {\n        PointF point =newPointF();\n        point.x= v *xv*time;\n        if(xv>0) {\n          point.y=g* (v *time) * (v *time) /2-xv* v *time;\n        }else{\n          point.y=g* (v *time) * (v *time) /2+xv* v *time;\n        }\n        return point;\n    }\n  });\n  //设置动画\nva.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\n  @Override\n  public void onAnimationUpdate(ValueAnimator valueAnimator) {\n    PointF point = (PointF)valueAnimator.getAnimatedValue();\n    view.setTranslationX(point.x);\n    view.setTranslationY(point.y);\n  }\n});\n设置成功 开启动画 最后监听动画结束时remove这个ImageView\n````\n\n\n## 4.结束语\n\n写逻辑代码写的久了很多时候就会忘了一般的动画实现，这个动画实现虽然没什么含金量，但是很多项目中都可能会用得到可以直接使用还是很方便的，大神掠过，新接触android动画的还是可以看看的，代码内注释很详细。\n\n[源码在这里 GitHub - jlcclidong/AddCartAniamtion: 仿美团外卖添加动画的三方库](https://github.com/jlcclidong/AddCartAniamtion)\n\n这个库的主要灵感感谢\n\n[Android 属性动画（Property Animation） 完全解析 （上） - Hongyang - 博客频道 - CSDN.NET](http://blog.csdn.net/lmj623565791/article/details/38067475)\n\n[把商品添加到购物车的动画效果（贝塞尔曲线） - Android_Study_OK的博客 - 博客频道 - CSDN.NET](http://blog.csdn.net/android_study_ok/article/details/51540759)\n","source":"_posts/仿美团外卖添加商品的抛物线动画.md","raw":"---\ntitle: 仿美团外卖添加商品的抛物线动画\ndate: 2017-03-17 16:40:11\ncategories:\n- library\ntags:\n- animation\n- library\n---\n# [GitHub - jlcclidong/AddCartAniamtion: 仿美团外卖添加动画的三方库](https://github.com/jlcclidong/AddCartAniamtion)\n\n## 1.初衷\n公司要做一个点餐系统，要求类似要的美团外卖的点餐动画，就像下面这样一个抛物线（biu）\n\n![美团的动画](http://omy391n59.bkt.clouddn.com/image/addcart1905930-f419e78607521fb6.gif)\n\n身为一个把时间节约全部投入到工作中的程序员，baidu geogle了好久发现没有这个动画效果的具体实现.有的效果也不是很好，只好自己写一个这样的效果了(搬砖去了)\n<!-- more -->\n## 2.结果\n\n结果demo就是和下面一样做的一个动画效果\n![自己的动画\n](http://omy391n59.bkt.clouddn.com/image/addcart1905930-a9a2726a504ab56f.gif)\n\n\n可以直接使用拷贝这个类或者在Project中build.gradle添加\n````java\nallprojects{\n  repositories{\n    ...\n    maven{url\"https://jitpack.io\"}\n  }\n}\n````\n在Moudle中的build.gradle\n````java\n\ndependencies{\n  compile'com.github.jlcclidong:AddCartAniamtion:v3.0'\n}\n````\n直接使用AddCartAniamtion.AddToCart()完成动画，图片默认为填入ImageView的图片，想要自己更改的可以去源码中更改，本人水平有限，希望多交流。\n\n自己使用在RecycleView中没有问题。动画左右飞都木有问题。\n\n## 3.过程\n\n本身看到过一个用贝塞尔曲线来做这个效果的，效果不好(好吧，主要是自己数学实在不争气)\n身为程序员里物理学的最好的还是用物理公式来解决问题吧，加属性动画\n\n首先确定父控件，起始位置控件，以及终点位置控件位置\n\n````java\n//计算父控件的位置\nint[] parent =new int[2];\nrl.getLocationInWindow(parent);\n\n//计算起点控件位置\nint[] startLocation =new int[2];\nstartView.getLocationInWindow(startLocation);\n\n//计算终点控件位置\nint[] endLocation =new int[2];\nendView.getLocationInWindow(endLocation);\n````\n添加一个用于ImageView用于动画（注意确定添加的位置是一定要注意父控件的Padding值，因为这个错位了好久）\n````java\nfinal ImageView view =newImageView(mContext);\n\n//确定ImageView大小与传进来的ImageView相同\nRelativeLayout.LayoutParams params =new RelativeLayout.LayoutParams(startView.getWidth(),startView.getHeight());\n\n//获取ImageView的图片 并设置在新的ImageView上\nview.setImageDrawable(startView.getDrawable());\n\n//确定ImageView的位置与startView相同\nparams.leftMargin= startLocation[0] - parent[0] - rl.getPaddingLeft();\nparams.topMargin= startLocation[1] - parent[1] - rl.getPaddingTop();\n\nrl.addView(view,params);\n````\n好吧重点来了 我把初始的X轴Y轴速度设成相同的这样保证了上移的效果 然后根据时间 距离计算初速度 加速度 基本就用到了这么一个公式\n\n    s=vt+g*t*t/2\n````java\n//计算两者的横向X轴的距离差\nint XtoX = endLocation[0] - startLocation[0] + endView.getWidth() /2-\nstartView.getWidth() /2;\n\n//根据距离 时间 获取到对应的X轴的初速度\nfinal float xv = XtoX / time;\n\n//计算两者的横向X轴的距离差\nint YtoY = endLocation[1] - startLocation[1];\n\n//根据距离 时间 初始设置的Y轴初速度与X轴初速度相同 获取到竖直方向上的加速度\nfinal float g;\nif(xv>0) {\n  g = (YtoY + xv * time) / time / time *2;\n}else{\n  g = (YtoY - xv * time) / time / time *2;\n}\n设置属性动画了\n\nValueAnimator va =new ValueAnimator();\nva.setDuration(time *1000);\nva.setObjectValues(newPointF(0,0));\n\n//计算位置\n\nva.setEvaluator(new TypeEvaluator() {\n    @Override\n    public Point Fevaluate(float v,PointF pointF,PointF t1) {\n        PointF point =newPointF();\n        point.x= v *xv*time;\n        if(xv>0) {\n          point.y=g* (v *time) * (v *time) /2-xv* v *time;\n        }else{\n          point.y=g* (v *time) * (v *time) /2+xv* v *time;\n        }\n        return point;\n    }\n  });\n  //设置动画\nva.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\n  @Override\n  public void onAnimationUpdate(ValueAnimator valueAnimator) {\n    PointF point = (PointF)valueAnimator.getAnimatedValue();\n    view.setTranslationX(point.x);\n    view.setTranslationY(point.y);\n  }\n});\n设置成功 开启动画 最后监听动画结束时remove这个ImageView\n````\n\n\n## 4.结束语\n\n写逻辑代码写的久了很多时候就会忘了一般的动画实现，这个动画实现虽然没什么含金量，但是很多项目中都可能会用得到可以直接使用还是很方便的，大神掠过，新接触android动画的还是可以看看的，代码内注释很详细。\n\n[源码在这里 GitHub - jlcclidong/AddCartAniamtion: 仿美团外卖添加动画的三方库](https://github.com/jlcclidong/AddCartAniamtion)\n\n这个库的主要灵感感谢\n\n[Android 属性动画（Property Animation） 完全解析 （上） - Hongyang - 博客频道 - CSDN.NET](http://blog.csdn.net/lmj623565791/article/details/38067475)\n\n[把商品添加到购物车的动画效果（贝塞尔曲线） - Android_Study_OK的博客 - 博客频道 - CSDN.NET](http://blog.csdn.net/android_study_ok/article/details/51540759)\n","slug":"仿美团外卖添加商品的抛物线动画","published":1,"updated":"2017-04-19T05:53:35.013Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4qaebcw000h2oq9bete8mti","content":"<h1 id=\"GitHub-jlcclidong-AddCartAniamtion-仿美团外卖添加动画的三方库\"><a href=\"#GitHub-jlcclidong-AddCartAniamtion-仿美团外卖添加动画的三方库\" class=\"headerlink\" title=\"GitHub - jlcclidong/AddCartAniamtion: 仿美团外卖添加动画的三方库\"></a><a href=\"https://github.com/jlcclidong/AddCartAniamtion\" target=\"_blank\" rel=\"external\">GitHub - jlcclidong/AddCartAniamtion: 仿美团外卖添加动画的三方库</a></h1><h2 id=\"1-初衷\"><a href=\"#1-初衷\" class=\"headerlink\" title=\"1.初衷\"></a>1.初衷</h2><p>公司要做一个点餐系统，要求类似要的美团外卖的点餐动画，就像下面这样一个抛物线（biu）</p>\n<p><img src=\"http://omy391n59.bkt.clouddn.com/image/addcart1905930-f419e78607521fb6.gif\" alt=\"美团的动画\"></p>\n<p>身为一个把时间节约全部投入到工作中的程序员，baidu geogle了好久发现没有这个动画效果的具体实现.有的效果也不是很好，只好自己写一个这样的效果了(搬砖去了)<br><a id=\"more\"></a></p>\n<h2 id=\"2-结果\"><a href=\"#2-结果\" class=\"headerlink\" title=\"2.结果\"></a>2.结果</h2><p>结果demo就是和下面一样做的一个动画效果<br><img src=\"http://omy391n59.bkt.clouddn.com/image/addcart1905930-a9a2726a504ab56f.gif\" alt=\"自己的动画\n\"></p>\n<p>可以直接使用拷贝这个类或者在Project中build.gradle添加<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">allprojects&#123;</div><div class=\"line\">  repositories&#123;</div><div class=\"line\">    ...</div><div class=\"line\">    maven&#123;url<span class=\"string\">\"https://jitpack.io\"</span>&#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在Moudle中的build.gradle<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">dependencies&#123;</div><div class=\"line\">  compile<span class=\"string\">'com.github.jlcclidong:AddCartAniamtion:v3.0'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>直接使用AddCartAniamtion.AddToCart()完成动画，图片默认为填入ImageView的图片，想要自己更改的可以去源码中更改，本人水平有限，希望多交流。</p>\n<p>自己使用在RecycleView中没有问题。动画左右飞都木有问题。</p>\n<h2 id=\"3-过程\"><a href=\"#3-过程\" class=\"headerlink\" title=\"3.过程\"></a>3.过程</h2><p>本身看到过一个用贝塞尔曲线来做这个效果的，效果不好(好吧，主要是自己数学实在不争气)<br>身为程序员里物理学的最好的还是用物理公式来解决问题吧，加属性动画</p>\n<p>首先确定父控件，起始位置控件，以及终点位置控件位置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//计算父控件的位置</span></div><div class=\"line\"><span class=\"keyword\">int</span>[] parent =<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">2</span>];</div><div class=\"line\">rl.getLocationInWindow(parent);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//计算起点控件位置</span></div><div class=\"line\"><span class=\"keyword\">int</span>[] startLocation =<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">2</span>];</div><div class=\"line\">startView.getLocationInWindow(startLocation);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//计算终点控件位置</span></div><div class=\"line\"><span class=\"keyword\">int</span>[] endLocation =<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">2</span>];</div><div class=\"line\">endView.getLocationInWindow(endLocation);</div></pre></td></tr></table></figure>\n<p>添加一个用于ImageView用于动画（注意确定添加的位置是一定要注意父控件的Padding值，因为这个错位了好久）<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">final</span> ImageView view =newImageView(mContext);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//确定ImageView大小与传进来的ImageView相同</span></div><div class=\"line\">RelativeLayout.LayoutParams params =<span class=\"keyword\">new</span> RelativeLayout.LayoutParams(startView.getWidth(),startView.getHeight());</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//获取ImageView的图片 并设置在新的ImageView上</span></div><div class=\"line\">view.setImageDrawable(startView.getDrawable());</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//确定ImageView的位置与startView相同</span></div><div class=\"line\">params.leftMargin= startLocation[<span class=\"number\">0</span>] - parent[<span class=\"number\">0</span>] - rl.getPaddingLeft();</div><div class=\"line\">params.topMargin= startLocation[<span class=\"number\">1</span>] - parent[<span class=\"number\">1</span>] - rl.getPaddingTop();</div><div class=\"line\"></div><div class=\"line\">rl.addView(view,params);</div></pre></td></tr></table></figure></p>\n<p>好吧重点来了 我把初始的X轴Y轴速度设成相同的这样保证了上移的效果 然后根据时间 距离计算初速度 加速度 基本就用到了这么一个公式</p>\n<pre><code>s=vt+g*t*t/2\n</code></pre><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//计算两者的横向X轴的距离差</span></div><div class=\"line\"><span class=\"keyword\">int</span> XtoX = endLocation[<span class=\"number\">0</span>] - startLocation[<span class=\"number\">0</span>] + endView.getWidth() /<span class=\"number\">2</span>-</div><div class=\"line\">startView.getWidth() /<span class=\"number\">2</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//根据距离 时间 获取到对应的X轴的初速度</span></div><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">float</span> xv = XtoX / time;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//计算两者的横向X轴的距离差</span></div><div class=\"line\"><span class=\"keyword\">int</span> YtoY = endLocation[<span class=\"number\">1</span>] - startLocation[<span class=\"number\">1</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//根据距离 时间 初始设置的Y轴初速度与X轴初速度相同 获取到竖直方向上的加速度</span></div><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">float</span> g;</div><div class=\"line\"><span class=\"keyword\">if</span>(xv&gt;<span class=\"number\">0</span>) &#123;</div><div class=\"line\">  g = (YtoY + xv * time) / time / time *<span class=\"number\">2</span>;</div><div class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">  g = (YtoY - xv * time) / time / time *<span class=\"number\">2</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">设置属性动画了</div><div class=\"line\"></div><div class=\"line\">ValueAnimator va =<span class=\"keyword\">new</span> ValueAnimator();</div><div class=\"line\">va.setDuration(time *<span class=\"number\">1000</span>);</div><div class=\"line\">va.setObjectValues(newPointF(<span class=\"number\">0</span>,<span class=\"number\">0</span>));</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//计算位置</span></div><div class=\"line\"></div><div class=\"line\">va.setEvaluator(<span class=\"keyword\">new</span> TypeEvaluator() &#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Point <span class=\"title\">Fevaluate</span><span class=\"params\">(<span class=\"keyword\">float</span> v,PointF pointF,PointF t1)</span> </span>&#123;</div><div class=\"line\">        PointF point =newPointF();</div><div class=\"line\">        point.x= v *xv*time;</div><div class=\"line\">        <span class=\"keyword\">if</span>(xv&gt;<span class=\"number\">0</span>) &#123;</div><div class=\"line\">          point.y=g* (v *time) * (v *time) /<span class=\"number\">2</span>-xv* v *time;</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">          point.y=g* (v *time) * (v *time) /<span class=\"number\">2</span>+xv* v *time;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> point;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;);</div><div class=\"line\">  <span class=\"comment\">//设置动画</span></div><div class=\"line\">va.addUpdateListener(<span class=\"keyword\">new</span> ValueAnimator.AnimatorUpdateListener() &#123;</div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAnimationUpdate</span><span class=\"params\">(ValueAnimator valueAnimator)</span> </span>&#123;</div><div class=\"line\">    PointF point = (PointF)valueAnimator.getAnimatedValue();</div><div class=\"line\">    view.setTranslationX(point.x);</div><div class=\"line\">    view.setTranslationY(point.y);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\">设置成功 开启动画 最后监听动画结束时remove这个ImageView</div></pre></td></tr></table></figure>\n<h2 id=\"4-结束语\"><a href=\"#4-结束语\" class=\"headerlink\" title=\"4.结束语\"></a>4.结束语</h2><p>写逻辑代码写的久了很多时候就会忘了一般的动画实现，这个动画实现虽然没什么含金量，但是很多项目中都可能会用得到可以直接使用还是很方便的，大神掠过，新接触android动画的还是可以看看的，代码内注释很详细。</p>\n<p><a href=\"https://github.com/jlcclidong/AddCartAniamtion\" target=\"_blank\" rel=\"external\">源码在这里 GitHub - jlcclidong/AddCartAniamtion: 仿美团外卖添加动画的三方库</a></p>\n<p>这个库的主要灵感感谢</p>\n<p><a href=\"http://blog.csdn.net/lmj623565791/article/details/38067475\" target=\"_blank\" rel=\"external\">Android 属性动画（Property Animation） 完全解析 （上） - Hongyang - 博客频道 - CSDN.NET</a></p>\n<p><a href=\"http://blog.csdn.net/android_study_ok/article/details/51540759\" target=\"_blank\" rel=\"external\">把商品添加到购物车的动画效果（贝塞尔曲线） - Android_Study_OK的博客 - 博客频道 - CSDN.NET</a></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"GitHub-jlcclidong-AddCartAniamtion-仿美团外卖添加动画的三方库\"><a href=\"#GitHub-jlcclidong-AddCartAniamtion-仿美团外卖添加动画的三方库\" class=\"headerlink\" title=\"GitHub - jlcclidong/AddCartAniamtion: 仿美团外卖添加动画的三方库\"></a><a href=\"https://github.com/jlcclidong/AddCartAniamtion\">GitHub - jlcclidong/AddCartAniamtion: 仿美团外卖添加动画的三方库</a></h1><h2 id=\"1-初衷\"><a href=\"#1-初衷\" class=\"headerlink\" title=\"1.初衷\"></a>1.初衷</h2><p>公司要做一个点餐系统，要求类似要的美团外卖的点餐动画，就像下面这样一个抛物线（biu）</p>\n<p><img src=\"http://omy391n59.bkt.clouddn.com/image/addcart1905930-f419e78607521fb6.gif\" alt=\"美团的动画\"></p>\n<p>身为一个把时间节约全部投入到工作中的程序员，baidu geogle了好久发现没有这个动画效果的具体实现.有的效果也不是很好，只好自己写一个这样的效果了(搬砖去了)<br>","more":"</p>\n<h2 id=\"2-结果\"><a href=\"#2-结果\" class=\"headerlink\" title=\"2.结果\"></a>2.结果</h2><p>结果demo就是和下面一样做的一个动画效果<br><img src=\"http://omy391n59.bkt.clouddn.com/image/addcart1905930-a9a2726a504ab56f.gif\" alt=\"自己的动画\n\"></p>\n<p>可以直接使用拷贝这个类或者在Project中build.gradle添加<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">allprojects&#123;</div><div class=\"line\">  repositories&#123;</div><div class=\"line\">    ...</div><div class=\"line\">    maven&#123;url<span class=\"string\">\"https://jitpack.io\"</span>&#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在Moudle中的build.gradle<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">dependencies&#123;</div><div class=\"line\">  compile<span class=\"string\">'com.github.jlcclidong:AddCartAniamtion:v3.0'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>直接使用AddCartAniamtion.AddToCart()完成动画，图片默认为填入ImageView的图片，想要自己更改的可以去源码中更改，本人水平有限，希望多交流。</p>\n<p>自己使用在RecycleView中没有问题。动画左右飞都木有问题。</p>\n<h2 id=\"3-过程\"><a href=\"#3-过程\" class=\"headerlink\" title=\"3.过程\"></a>3.过程</h2><p>本身看到过一个用贝塞尔曲线来做这个效果的，效果不好(好吧，主要是自己数学实在不争气)<br>身为程序员里物理学的最好的还是用物理公式来解决问题吧，加属性动画</p>\n<p>首先确定父控件，起始位置控件，以及终点位置控件位置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//计算父控件的位置</span></div><div class=\"line\"><span class=\"keyword\">int</span>[] parent =<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">2</span>];</div><div class=\"line\">rl.getLocationInWindow(parent);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//计算起点控件位置</span></div><div class=\"line\"><span class=\"keyword\">int</span>[] startLocation =<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">2</span>];</div><div class=\"line\">startView.getLocationInWindow(startLocation);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//计算终点控件位置</span></div><div class=\"line\"><span class=\"keyword\">int</span>[] endLocation =<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">2</span>];</div><div class=\"line\">endView.getLocationInWindow(endLocation);</div></pre></td></tr></table></figure>\n<p>添加一个用于ImageView用于动画（注意确定添加的位置是一定要注意父控件的Padding值，因为这个错位了好久）<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">final</span> ImageView view =newImageView(mContext);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//确定ImageView大小与传进来的ImageView相同</span></div><div class=\"line\">RelativeLayout.LayoutParams params =<span class=\"keyword\">new</span> RelativeLayout.LayoutParams(startView.getWidth(),startView.getHeight());</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//获取ImageView的图片 并设置在新的ImageView上</span></div><div class=\"line\">view.setImageDrawable(startView.getDrawable());</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//确定ImageView的位置与startView相同</span></div><div class=\"line\">params.leftMargin= startLocation[<span class=\"number\">0</span>] - parent[<span class=\"number\">0</span>] - rl.getPaddingLeft();</div><div class=\"line\">params.topMargin= startLocation[<span class=\"number\">1</span>] - parent[<span class=\"number\">1</span>] - rl.getPaddingTop();</div><div class=\"line\"></div><div class=\"line\">rl.addView(view,params);</div></pre></td></tr></table></figure></p>\n<p>好吧重点来了 我把初始的X轴Y轴速度设成相同的这样保证了上移的效果 然后根据时间 距离计算初速度 加速度 基本就用到了这么一个公式</p>\n<pre><code>s=vt+g*t*t/2\n</code></pre><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//计算两者的横向X轴的距离差</span></div><div class=\"line\"><span class=\"keyword\">int</span> XtoX = endLocation[<span class=\"number\">0</span>] - startLocation[<span class=\"number\">0</span>] + endView.getWidth() /<span class=\"number\">2</span>-</div><div class=\"line\">startView.getWidth() /<span class=\"number\">2</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//根据距离 时间 获取到对应的X轴的初速度</span></div><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">float</span> xv = XtoX / time;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//计算两者的横向X轴的距离差</span></div><div class=\"line\"><span class=\"keyword\">int</span> YtoY = endLocation[<span class=\"number\">1</span>] - startLocation[<span class=\"number\">1</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//根据距离 时间 初始设置的Y轴初速度与X轴初速度相同 获取到竖直方向上的加速度</span></div><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">float</span> g;</div><div class=\"line\"><span class=\"keyword\">if</span>(xv&gt;<span class=\"number\">0</span>) &#123;</div><div class=\"line\">  g = (YtoY + xv * time) / time / time *<span class=\"number\">2</span>;</div><div class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">  g = (YtoY - xv * time) / time / time *<span class=\"number\">2</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">设置属性动画了</div><div class=\"line\"></div><div class=\"line\">ValueAnimator va =<span class=\"keyword\">new</span> ValueAnimator();</div><div class=\"line\">va.setDuration(time *<span class=\"number\">1000</span>);</div><div class=\"line\">va.setObjectValues(newPointF(<span class=\"number\">0</span>,<span class=\"number\">0</span>));</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//计算位置</span></div><div class=\"line\"></div><div class=\"line\">va.setEvaluator(<span class=\"keyword\">new</span> TypeEvaluator() &#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Point <span class=\"title\">Fevaluate</span><span class=\"params\">(<span class=\"keyword\">float</span> v,PointF pointF,PointF t1)</span> </span>&#123;</div><div class=\"line\">        PointF point =newPointF();</div><div class=\"line\">        point.x= v *xv*time;</div><div class=\"line\">        <span class=\"keyword\">if</span>(xv&gt;<span class=\"number\">0</span>) &#123;</div><div class=\"line\">          point.y=g* (v *time) * (v *time) /<span class=\"number\">2</span>-xv* v *time;</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">          point.y=g* (v *time) * (v *time) /<span class=\"number\">2</span>+xv* v *time;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> point;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;);</div><div class=\"line\">  <span class=\"comment\">//设置动画</span></div><div class=\"line\">va.addUpdateListener(<span class=\"keyword\">new</span> ValueAnimator.AnimatorUpdateListener() &#123;</div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAnimationUpdate</span><span class=\"params\">(ValueAnimator valueAnimator)</span> </span>&#123;</div><div class=\"line\">    PointF point = (PointF)valueAnimator.getAnimatedValue();</div><div class=\"line\">    view.setTranslationX(point.x);</div><div class=\"line\">    view.setTranslationY(point.y);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\">设置成功 开启动画 最后监听动画结束时remove这个ImageView</div></pre></td></tr></table></figure>\n<h2 id=\"4-结束语\"><a href=\"#4-结束语\" class=\"headerlink\" title=\"4.结束语\"></a>4.结束语</h2><p>写逻辑代码写的久了很多时候就会忘了一般的动画实现，这个动画实现虽然没什么含金量，但是很多项目中都可能会用得到可以直接使用还是很方便的，大神掠过，新接触android动画的还是可以看看的，代码内注释很详细。</p>\n<p><a href=\"https://github.com/jlcclidong/AddCartAniamtion\">源码在这里 GitHub - jlcclidong/AddCartAniamtion: 仿美团外卖添加动画的三方库</a></p>\n<p>这个库的主要灵感感谢</p>\n<p><a href=\"http://blog.csdn.net/lmj623565791/article/details/38067475\">Android 属性动画（Property Animation） 完全解析 （上） - Hongyang - 博客频道 - CSDN.NET</a></p>\n<p><a href=\"http://blog.csdn.net/android_study_ok/article/details/51540759\">把商品添加到购物车的动画效果（贝塞尔曲线） - Android_Study_OK的博客 - 博客频道 - CSDN.NET</a></p>"},{"title":"停止 builiding","date":"2017-03-20T02:01:22.000Z","_content":"# 停止 building\n<br>\n在android studio 命令行中输入 gradlew --stop\n","source":"_posts/停止-builiding.md","raw":"---\ntitle: 停止 builiding\ndate: 2017-03-20 10:01:22\ncategories:\n- 笔记\n- android studio\ntags:\n- android studio\n- 笔记\n---\n# 停止 building\n<br>\n在android studio 命令行中输入 gradlew --stop\n","slug":"停止-builiding","published":1,"updated":"2017-04-19T05:53:35.014Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4qaebcy000k2oq9manyq097","content":"<h1 id=\"停止-building\"><a href=\"#停止-building\" class=\"headerlink\" title=\"停止 building\"></a>停止 building</h1><p><br><br>在android studio 命令行中输入 gradlew –stop</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"停止-building\"><a href=\"#停止-building\" class=\"headerlink\" title=\"停止 building\"></a>停止 building</h1><p><br><br>在android studio 命令行中输入 gradlew –stop</p>\n"},{"title":"自定义控件","date":"2017-03-20T06:58:21.000Z","_content":"# 自定义控件学习笔记\n\n## 总体调用流程\n### ViewRootImpl 是View开始的入口\n### ViewRootImpl中会首先调用performTraversals()\n```java\nprivate void performTraversals() { //android19\n  ...\n  //获得最上层控件的MeasureSpec\n1672 int childWidthMeasureSpec = getRootMeasureSpec(mWidth, lp.width);\n1673 int childHeightMeasureSpec = getRootMeasureSpec(mHeight, lp.height);\n\n  // Ask host how big it wants to be\n1682 performMeasure(childWidthMeasureSpec, childHeightMeasureSpec);\n...\n1744 performLayout(lp, desiredWindowWidth, desiredWindowHeight);\n...\n1883 performDraw(); //进入DecorView中最终调用View的Draw()\n}\n```\n\n```java\nprivate void performMeasure(int childWidthMeasureSpec, int childHeightMeasureSpec) {\n      mView.measure(childWidthMeasureSpec, childHeightMeasureSpec);\n}\n//例如LinearLayout的Onmeasure中就会调用走正常的测量流程\nvoid measureChildBeforeLayout(View child, int childIndex,\n            int widthMeasureSpec, int totalWidth, int heightMeasureSpec,\n            int totalHeight) {\n        measureChildWithMargins(child, widthMeasureSpec, totalWidth,\n                heightMeasureSpec, totalHeight);\n}\n```\n```java\nprivate void performLayout(WindowManager.LayoutParams lp, int desiredWindowWidth,\n            int desiredWindowHeight) {\n            host.layout(0, 0, host.getMeasuredWidth(), host.getMeasuredHeight());\n}\n```\n\n\n## measure\n\n\n### ViewGroup 中measureChildWithMargins 调用 View的measure()\n```java\n  protected void measureChildWithMargins(View child,\n            int parentWidthMeasureSpec, int widthUsed,\n            int parentHeightMeasureSpec, int heightUsed) {\n               //获取child的LayoutParams\n        final MarginLayoutParams lp = (MarginLayoutParams) child.getLayoutParams();\n\n        final int childWidthMeasureSpec = getChildMeasureSpec(parentWidthMeasureSpec,\n                mPaddingLeft + mPaddingRight + lp.leftMargin + lp.rightMargin + widthUsed,\n                lp.width);\n        final int childHeightMeasureSpec = getChildMeasureSpec(parentHeightMeasureSpec,\n                mPaddingTop + mPaddingBottom + lp.topMargin + lp.bottomMargin + heightUsed,\n                lp.height);\n                //调用child的measure方法\n        child.measure(childWidthMeasureSpec, childHeightMeasureSpec);\n    }\n```\n<!-- more -->\n其中getChildMeasureSpeac(int spec, int padding, int childDimension)\n```java\npublic static int getChildMeasureSpec(int spec, int padding, int childDimension) {\n       //获取ViewGroup的参数\n       int specMode = MeasureSpec.getMode(spec);\n       int specSize = MeasureSpec.getSize(spec);\n       //获取可以使用的最大的size\n       int size = Math.max(0, specSize - padding);\n\n       int resultSize = 0;\n       int resultMode = 0;\n\n       //根据父控件的specMode分配子空间的大小 和 方式\n       switch (specMode) {\n       case MeasureSpec.EXACTLY:\n       //childDimension是child的具体设置高度 如果<0则是match 或者 wrap\n           if (childDimension >= 0) {\n               resultSize = childDimension;\n               resultMode = MeasureSpec.EXACTLY;\n           } else if (childDimension == LayoutParams.MATCH_PARENT) {\n               resultSize = size;\n               resultMode = MeasureSpec.EXACTLY;\n           } else if (childDimension == LayoutParams.WRAP_CONTENT) {\n               resultSize = size;\n               resultMode = MeasureSpec.AT_MOST;\n           }\n           break;\n\n       case MeasureSpec.AT_MOST:\n           if (childDimension >= 0) {\n               resultSize = childDimension;\n               resultMode = MeasureSpec.EXACTLY;\n           } else if (childDimension == LayoutParams.MATCH_PARENT) {\n               resultSize = size;\n               resultMode = MeasureSpec.AT_MOST;\n           } else if (childDimension == LayoutParams.WRAP_CONTENT) {\n               resultSize = size;\n               resultMode = MeasureSpec.AT_MOST;\n           }\n           break;\n\n       // 一般不会使用 这个代表不会管理子View的大小 例如ScrollView\n       case MeasureSpec.UNSPECIFIED:\n           if (childDimension >= 0) {\n               resultSize = childDimension;\n               resultMode = MeasureSpec.EXACTLY;\n           } else if (childDimension == LayoutParams.MATCH_PARENT) {\n               //View.sUseZeroUnspecifiedMeasureSpec=true 5.0以下\n               //5.0 以上 就是 false\n               resultSize = View.sUseZeroUnspecifiedMeasureSpec ? 0 : size;\n               resultMode = MeasureSpec.UNSPECIFIED;\n           } else if (childDimension == LayoutParams.WRAP_CONTENT) {\n               resultSize = View.sUseZeroUnspecifiedMeasureSpec ? 0 : size;\n               resultMode = MeasureSpec.UNSPECIFIED;\n           }\n           break;\n       }\n       return MeasureSpec.makeMeasureSpec(resultSize, resultMode);\n   }\n```\n總的來説就是這樣的 MeasureSpec.UNSPECIFIED 5.0 以上以下有区别 一般不会用到\n\n |  Child \\ Parent        | MeasureSpec.EXACTLY    |  MeasureSpec.AT_MOST   | MeasureSpec.UNSPECIFIED|\n | :-------:              | :-----:                | :----:                 | :----:                 |\n | 具體尺寸   |  size=具體 MeasureSpec.EXACTLY  | size=具體 MeasureSpec.EXACTLY | size = 具體   MeasureSpec.EXACTLY |\n | WRAP_CONTENT |size=size MeasureSpec.AT_MOST| size=size MeasureSpec.AT_MOST |size=size MeasureSpec.UNSPECIFIED|\n | MATCH_PARENT| size=size MeasureSpec.EXACTLY | size=size MeasureSpec.AT_MOST | size=size MeasureSpec.UNSPECIFIED|\n\n ### view的measure(childWidthMeasureSpec, childHeightMeasureSpec)方法\n measure()---这个方法用于设定这个子View到底有多大，并且调用onMeasure()方法\n ```java\n protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n       setMeasuredDimension(getDefaultSize(getSuggestedMinimumWidth(), widthMeasureSpec),\n               getDefaultSize(getSuggestedMinimumHeight(), heightMeasureSpec));\n   }\n ```\ngetSuggestedMinimumHeight() 与 getSuggestedMinimumWidth() 方法雷同 用于计算 最小的值 背景与view自身设置的值\n```java\nprotected int getSuggestedMinimumWidth() {\n        return (mBackground == null) ? mMinWidth : max(mMinWidth, mBackground.getMinimumWidth());\n    }\n```\ngetDefaultSize() 最终根据自身的MeasureSpec.Mode 来决定自身到底有多大\n```java\npublic static int getDefaultSize(int size, int measureSpec) {\n       int result = size;\n       int specMode = MeasureSpec.getMode(measureSpec);\n       int specSize = MeasureSpec.getSize(measureSpec);\n\n       switch (specMode) {\n       case MeasureSpec.UNSPECIFIED:  \n           result = size; //这个size是getSuggestedMinimumWidth中获得的最小度  一般=不会用到 但是在lsitView中高度设定不相符时使用min来设定可以确定高度\n           break;\n       case MeasureSpec.AT_MOST:\n       case MeasureSpec.EXACTLY:\n           result = specSize;\n           break;\n       }\n       return result;\n   }\n```\n### 重点强调的是 自定义控件的onmeasure方法重写 必须设定WRAP_CONTENT时的状态\n因为在WRAP_CONTENT情况下 measure的模式为MeasureSpec,AT_MOST 并且大小也与父控件大小相同 这样的话 WRAP_CONTENT就与MATCH_PARENT的效果相同 必须要重写设置大小\n```java\n@Override\n   protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n\n       int widthMode = MeasureSpec.getMode(widthMeasureSpec);\n       int heightMode = MeasureSpec.getMode(heightMeasureSpec);\n\n       int width = 100; //这个高度宽度需要计算 计算出自己到底需要多少\n       int height = 100;\n\n       if (widthMode == MeasureSpec.AT_MOST && heightMode == MeasureSpec.AT_MOST) { // 添加判断才可以确定具体尺寸来设置WRAP_CONTENT\n           setMeasuredDimension(width, height);\n       } else if (widthMode == MeasureSpec.AT_MOST) {\n           setMeasuredDimension(width, getDefaultSize(getSuggestedMinimumHeight(), heightMeasureSpec));\n       } else if (height == MeasureSpec.AT_MOST) {\n           setMeasuredDimension(getDefaultSize(getSuggestedMinimumWidth(), widthMeasureSpec), height);\n       } else {\n           super.onMeasure(widthMeasureSpec, heightMeasureSpec);\n       }\n\n   }\n```\n### 知識點 在ScrollView嵌套ListView中我們經常這樣寫\n```java\n@Override\n    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n        int height = MeasureSpec.makeMeasureSpec(Integer.MAX_VALUE>>2, MeasureSpec.AT_MOST);\n        super.onMeasure(widthMeasureSpec, height);\n    }\n```\n就是因爲本身他的父控件ScrollView屬性是MeasureSpec.UNSPECIFIED listview本身的屬性也變成這樣，需要我們手動來更改成爲MeasureSpec.AT_MOST,讓listView重新計算自己的高度--onMeasure()中 heightSize就是我們傳入的30位的最大值\n```java\nif (heightMode == MeasureSpec.AT_MOST) {\n            // TODO: after first layout we should maybe start at the first visible position, not 0\n            heightSize = measureHeightOfChildren(widthMeasureSpec, 0, NO_POSITION, heightSize, -1);\n        }\n```\n將方法中除了我們本身傳過去的heightSize以外的代碼刪除 發現本身就命名爲maxHeight，如果 測量的高度不大於我們的maxHeight就將測量值(所有子View的高度)返回，所以這樣重寫之後，listView默認展示所有的條目，如果不是最大值那麽如果測量值大於你設定的值那麽也將顯示不全\n```java\nfinal int measureHeightOfChildren(int widthMeasureSpec, int startPosition, int endPosition,\n           int maxHeight, int disallowPartialChildPosition) {\n\n       // Include the padding of the list\n       int returnedHeight = mListPadding.top + mListPadding.bottom;\n                      .\n                      .\n                      .\n       for (i = startPosition; i <= endPosition; ++i) {\n\n           returnedHeight += child.getMeasuredHeight();\n\n           if (returnedHeight >= maxHeight) {\n               // We went over, figure out which height to return.  If returnedHeight > maxHeight,\n               // then the i'th position did not fit completely.\n               return (disallowPartialChildPosition >= 0) // Disallowing is enabled (> -1)\n                           && (i > disallowPartialChildPosition) // We've past the min pos\n                           && (prevHeightWithoutPartialChild > 0) // We have a prev height\n                           && (returnedHeight != maxHeight) // i'th child did not fit completely\n                       ? prevHeightWithoutPartialChild\n                       : maxHeight;\n           }\n\n           if ((disallowPartialChildPosition >= 0) && (i >= disallowPartialChildPosition)) {\n               prevHeightWithoutPartialChild = returnedHeight;\n           }\n       }\n\n       // At this point, we went through the range of children, and they each\n       // completely fit, so return the returnedHeight\n       return returnedHeight;\n   }\n```\n## layout\n### onlayout() 這個方法是ViewGroup方法需要重寫的方法\n首先是View的layout()方法\n```java\npublic void layout(int l, int t, int r, int b) {\n        if ((mPrivateFlags3 & PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT) != 0) {\n            onMeasure(mOldWidthMeasureSpec, mOldHeightMeasureSpec);\n            mPrivateFlags3 &= ~PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT;\n        }\n                `\n                `\n                `\n        boolean changed = isLayoutModeOptical(mParent) ?\n                setOpticalFrame(l, t, r, b) : setFrame(l, t, r, b);\n\n        if (changed || (mPrivateFlags & PFLAG_LAYOUT_REQUIRED) == PFLAG_LAYOUT_REQUIRED) {\n            onLayout(changed, l, t, r, b);\n                `\n                `\n                ``\n        }\n\n        mPrivateFlags &= ~PFLAG_FORCE_LAYOUT;\n        mPrivateFlags3 |= PFLAG3_IS_LAID_OUT;\n    }\n```\n判斷changed setOpticalFrame 最終走的也是setFrame 判斷位置是否發生了變化\n```java\nprotected boolean setFrame(int left, int top, int right, int bottom) {\n        boolean changed = false;\n        if (mLeft != left || mRight != right || mTop != top || mBottom != bottom) {\n            changed = true;\n              `\n              `\n        return changed;\n    }\n```\n發生變化走onLayout方法====viewGroup調用onLayout方法 在各個的onlayou方法中調用view的layou方法確定位置\n### 總結\n父View的layout方法調用父View的onlyout調用子View的layout\n\n父view的onLayout來確定子View的具體位置 子View的layout方法來確定滋生的位置  \n\n其中所有的位置都是相當於父控件的 包括View.getleft 等方法也是相對於父控件的\n","source":"_posts/自定义控件.md","raw":"---\ntitle: 自定义控件\ndate: 2017-03-20 14:58:21\ntags:\n- 笔记\n- view\ncategories:\n- 笔记\n- 自定义view\n---\n# 自定义控件学习笔记\n\n## 总体调用流程\n### ViewRootImpl 是View开始的入口\n### ViewRootImpl中会首先调用performTraversals()\n```java\nprivate void performTraversals() { //android19\n  ...\n  //获得最上层控件的MeasureSpec\n1672 int childWidthMeasureSpec = getRootMeasureSpec(mWidth, lp.width);\n1673 int childHeightMeasureSpec = getRootMeasureSpec(mHeight, lp.height);\n\n  // Ask host how big it wants to be\n1682 performMeasure(childWidthMeasureSpec, childHeightMeasureSpec);\n...\n1744 performLayout(lp, desiredWindowWidth, desiredWindowHeight);\n...\n1883 performDraw(); //进入DecorView中最终调用View的Draw()\n}\n```\n\n```java\nprivate void performMeasure(int childWidthMeasureSpec, int childHeightMeasureSpec) {\n      mView.measure(childWidthMeasureSpec, childHeightMeasureSpec);\n}\n//例如LinearLayout的Onmeasure中就会调用走正常的测量流程\nvoid measureChildBeforeLayout(View child, int childIndex,\n            int widthMeasureSpec, int totalWidth, int heightMeasureSpec,\n            int totalHeight) {\n        measureChildWithMargins(child, widthMeasureSpec, totalWidth,\n                heightMeasureSpec, totalHeight);\n}\n```\n```java\nprivate void performLayout(WindowManager.LayoutParams lp, int desiredWindowWidth,\n            int desiredWindowHeight) {\n            host.layout(0, 0, host.getMeasuredWidth(), host.getMeasuredHeight());\n}\n```\n\n\n## measure\n\n\n### ViewGroup 中measureChildWithMargins 调用 View的measure()\n```java\n  protected void measureChildWithMargins(View child,\n            int parentWidthMeasureSpec, int widthUsed,\n            int parentHeightMeasureSpec, int heightUsed) {\n               //获取child的LayoutParams\n        final MarginLayoutParams lp = (MarginLayoutParams) child.getLayoutParams();\n\n        final int childWidthMeasureSpec = getChildMeasureSpec(parentWidthMeasureSpec,\n                mPaddingLeft + mPaddingRight + lp.leftMargin + lp.rightMargin + widthUsed,\n                lp.width);\n        final int childHeightMeasureSpec = getChildMeasureSpec(parentHeightMeasureSpec,\n                mPaddingTop + mPaddingBottom + lp.topMargin + lp.bottomMargin + heightUsed,\n                lp.height);\n                //调用child的measure方法\n        child.measure(childWidthMeasureSpec, childHeightMeasureSpec);\n    }\n```\n<!-- more -->\n其中getChildMeasureSpeac(int spec, int padding, int childDimension)\n```java\npublic static int getChildMeasureSpec(int spec, int padding, int childDimension) {\n       //获取ViewGroup的参数\n       int specMode = MeasureSpec.getMode(spec);\n       int specSize = MeasureSpec.getSize(spec);\n       //获取可以使用的最大的size\n       int size = Math.max(0, specSize - padding);\n\n       int resultSize = 0;\n       int resultMode = 0;\n\n       //根据父控件的specMode分配子空间的大小 和 方式\n       switch (specMode) {\n       case MeasureSpec.EXACTLY:\n       //childDimension是child的具体设置高度 如果<0则是match 或者 wrap\n           if (childDimension >= 0) {\n               resultSize = childDimension;\n               resultMode = MeasureSpec.EXACTLY;\n           } else if (childDimension == LayoutParams.MATCH_PARENT) {\n               resultSize = size;\n               resultMode = MeasureSpec.EXACTLY;\n           } else if (childDimension == LayoutParams.WRAP_CONTENT) {\n               resultSize = size;\n               resultMode = MeasureSpec.AT_MOST;\n           }\n           break;\n\n       case MeasureSpec.AT_MOST:\n           if (childDimension >= 0) {\n               resultSize = childDimension;\n               resultMode = MeasureSpec.EXACTLY;\n           } else if (childDimension == LayoutParams.MATCH_PARENT) {\n               resultSize = size;\n               resultMode = MeasureSpec.AT_MOST;\n           } else if (childDimension == LayoutParams.WRAP_CONTENT) {\n               resultSize = size;\n               resultMode = MeasureSpec.AT_MOST;\n           }\n           break;\n\n       // 一般不会使用 这个代表不会管理子View的大小 例如ScrollView\n       case MeasureSpec.UNSPECIFIED:\n           if (childDimension >= 0) {\n               resultSize = childDimension;\n               resultMode = MeasureSpec.EXACTLY;\n           } else if (childDimension == LayoutParams.MATCH_PARENT) {\n               //View.sUseZeroUnspecifiedMeasureSpec=true 5.0以下\n               //5.0 以上 就是 false\n               resultSize = View.sUseZeroUnspecifiedMeasureSpec ? 0 : size;\n               resultMode = MeasureSpec.UNSPECIFIED;\n           } else if (childDimension == LayoutParams.WRAP_CONTENT) {\n               resultSize = View.sUseZeroUnspecifiedMeasureSpec ? 0 : size;\n               resultMode = MeasureSpec.UNSPECIFIED;\n           }\n           break;\n       }\n       return MeasureSpec.makeMeasureSpec(resultSize, resultMode);\n   }\n```\n總的來説就是這樣的 MeasureSpec.UNSPECIFIED 5.0 以上以下有区别 一般不会用到\n\n |  Child \\ Parent        | MeasureSpec.EXACTLY    |  MeasureSpec.AT_MOST   | MeasureSpec.UNSPECIFIED|\n | :-------:              | :-----:                | :----:                 | :----:                 |\n | 具體尺寸   |  size=具體 MeasureSpec.EXACTLY  | size=具體 MeasureSpec.EXACTLY | size = 具體   MeasureSpec.EXACTLY |\n | WRAP_CONTENT |size=size MeasureSpec.AT_MOST| size=size MeasureSpec.AT_MOST |size=size MeasureSpec.UNSPECIFIED|\n | MATCH_PARENT| size=size MeasureSpec.EXACTLY | size=size MeasureSpec.AT_MOST | size=size MeasureSpec.UNSPECIFIED|\n\n ### view的measure(childWidthMeasureSpec, childHeightMeasureSpec)方法\n measure()---这个方法用于设定这个子View到底有多大，并且调用onMeasure()方法\n ```java\n protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n       setMeasuredDimension(getDefaultSize(getSuggestedMinimumWidth(), widthMeasureSpec),\n               getDefaultSize(getSuggestedMinimumHeight(), heightMeasureSpec));\n   }\n ```\ngetSuggestedMinimumHeight() 与 getSuggestedMinimumWidth() 方法雷同 用于计算 最小的值 背景与view自身设置的值\n```java\nprotected int getSuggestedMinimumWidth() {\n        return (mBackground == null) ? mMinWidth : max(mMinWidth, mBackground.getMinimumWidth());\n    }\n```\ngetDefaultSize() 最终根据自身的MeasureSpec.Mode 来决定自身到底有多大\n```java\npublic static int getDefaultSize(int size, int measureSpec) {\n       int result = size;\n       int specMode = MeasureSpec.getMode(measureSpec);\n       int specSize = MeasureSpec.getSize(measureSpec);\n\n       switch (specMode) {\n       case MeasureSpec.UNSPECIFIED:  \n           result = size; //这个size是getSuggestedMinimumWidth中获得的最小度  一般=不会用到 但是在lsitView中高度设定不相符时使用min来设定可以确定高度\n           break;\n       case MeasureSpec.AT_MOST:\n       case MeasureSpec.EXACTLY:\n           result = specSize;\n           break;\n       }\n       return result;\n   }\n```\n### 重点强调的是 自定义控件的onmeasure方法重写 必须设定WRAP_CONTENT时的状态\n因为在WRAP_CONTENT情况下 measure的模式为MeasureSpec,AT_MOST 并且大小也与父控件大小相同 这样的话 WRAP_CONTENT就与MATCH_PARENT的效果相同 必须要重写设置大小\n```java\n@Override\n   protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n\n       int widthMode = MeasureSpec.getMode(widthMeasureSpec);\n       int heightMode = MeasureSpec.getMode(heightMeasureSpec);\n\n       int width = 100; //这个高度宽度需要计算 计算出自己到底需要多少\n       int height = 100;\n\n       if (widthMode == MeasureSpec.AT_MOST && heightMode == MeasureSpec.AT_MOST) { // 添加判断才可以确定具体尺寸来设置WRAP_CONTENT\n           setMeasuredDimension(width, height);\n       } else if (widthMode == MeasureSpec.AT_MOST) {\n           setMeasuredDimension(width, getDefaultSize(getSuggestedMinimumHeight(), heightMeasureSpec));\n       } else if (height == MeasureSpec.AT_MOST) {\n           setMeasuredDimension(getDefaultSize(getSuggestedMinimumWidth(), widthMeasureSpec), height);\n       } else {\n           super.onMeasure(widthMeasureSpec, heightMeasureSpec);\n       }\n\n   }\n```\n### 知識點 在ScrollView嵌套ListView中我們經常這樣寫\n```java\n@Override\n    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n        int height = MeasureSpec.makeMeasureSpec(Integer.MAX_VALUE>>2, MeasureSpec.AT_MOST);\n        super.onMeasure(widthMeasureSpec, height);\n    }\n```\n就是因爲本身他的父控件ScrollView屬性是MeasureSpec.UNSPECIFIED listview本身的屬性也變成這樣，需要我們手動來更改成爲MeasureSpec.AT_MOST,讓listView重新計算自己的高度--onMeasure()中 heightSize就是我們傳入的30位的最大值\n```java\nif (heightMode == MeasureSpec.AT_MOST) {\n            // TODO: after first layout we should maybe start at the first visible position, not 0\n            heightSize = measureHeightOfChildren(widthMeasureSpec, 0, NO_POSITION, heightSize, -1);\n        }\n```\n將方法中除了我們本身傳過去的heightSize以外的代碼刪除 發現本身就命名爲maxHeight，如果 測量的高度不大於我們的maxHeight就將測量值(所有子View的高度)返回，所以這樣重寫之後，listView默認展示所有的條目，如果不是最大值那麽如果測量值大於你設定的值那麽也將顯示不全\n```java\nfinal int measureHeightOfChildren(int widthMeasureSpec, int startPosition, int endPosition,\n           int maxHeight, int disallowPartialChildPosition) {\n\n       // Include the padding of the list\n       int returnedHeight = mListPadding.top + mListPadding.bottom;\n                      .\n                      .\n                      .\n       for (i = startPosition; i <= endPosition; ++i) {\n\n           returnedHeight += child.getMeasuredHeight();\n\n           if (returnedHeight >= maxHeight) {\n               // We went over, figure out which height to return.  If returnedHeight > maxHeight,\n               // then the i'th position did not fit completely.\n               return (disallowPartialChildPosition >= 0) // Disallowing is enabled (> -1)\n                           && (i > disallowPartialChildPosition) // We've past the min pos\n                           && (prevHeightWithoutPartialChild > 0) // We have a prev height\n                           && (returnedHeight != maxHeight) // i'th child did not fit completely\n                       ? prevHeightWithoutPartialChild\n                       : maxHeight;\n           }\n\n           if ((disallowPartialChildPosition >= 0) && (i >= disallowPartialChildPosition)) {\n               prevHeightWithoutPartialChild = returnedHeight;\n           }\n       }\n\n       // At this point, we went through the range of children, and they each\n       // completely fit, so return the returnedHeight\n       return returnedHeight;\n   }\n```\n## layout\n### onlayout() 這個方法是ViewGroup方法需要重寫的方法\n首先是View的layout()方法\n```java\npublic void layout(int l, int t, int r, int b) {\n        if ((mPrivateFlags3 & PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT) != 0) {\n            onMeasure(mOldWidthMeasureSpec, mOldHeightMeasureSpec);\n            mPrivateFlags3 &= ~PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT;\n        }\n                `\n                `\n                `\n        boolean changed = isLayoutModeOptical(mParent) ?\n                setOpticalFrame(l, t, r, b) : setFrame(l, t, r, b);\n\n        if (changed || (mPrivateFlags & PFLAG_LAYOUT_REQUIRED) == PFLAG_LAYOUT_REQUIRED) {\n            onLayout(changed, l, t, r, b);\n                `\n                `\n                ``\n        }\n\n        mPrivateFlags &= ~PFLAG_FORCE_LAYOUT;\n        mPrivateFlags3 |= PFLAG3_IS_LAID_OUT;\n    }\n```\n判斷changed setOpticalFrame 最終走的也是setFrame 判斷位置是否發生了變化\n```java\nprotected boolean setFrame(int left, int top, int right, int bottom) {\n        boolean changed = false;\n        if (mLeft != left || mRight != right || mTop != top || mBottom != bottom) {\n            changed = true;\n              `\n              `\n        return changed;\n    }\n```\n發生變化走onLayout方法====viewGroup調用onLayout方法 在各個的onlayou方法中調用view的layou方法確定位置\n### 總結\n父View的layout方法調用父View的onlyout調用子View的layout\n\n父view的onLayout來確定子View的具體位置 子View的layout方法來確定滋生的位置  \n\n其中所有的位置都是相當於父控件的 包括View.getleft 等方法也是相對於父控件的\n","slug":"自定义控件","published":1,"updated":"2017-04-19T05:53:35.014Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4qaebd1000p2oq9chjslc1i","content":"<h1 id=\"自定义控件学习笔记\"><a href=\"#自定义控件学习笔记\" class=\"headerlink\" title=\"自定义控件学习笔记\"></a>自定义控件学习笔记</h1><h2 id=\"总体调用流程\"><a href=\"#总体调用流程\" class=\"headerlink\" title=\"总体调用流程\"></a>总体调用流程</h2><h3 id=\"ViewRootImpl-是View开始的入口\"><a href=\"#ViewRootImpl-是View开始的入口\" class=\"headerlink\" title=\"ViewRootImpl 是View开始的入口\"></a>ViewRootImpl 是View开始的入口</h3><h3 id=\"ViewRootImpl中会首先调用performTraversals\"><a href=\"#ViewRootImpl中会首先调用performTraversals\" class=\"headerlink\" title=\"ViewRootImpl中会首先调用performTraversals()\"></a>ViewRootImpl中会首先调用performTraversals()</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">performTraversals</span><span class=\"params\">()</span> </span>&#123; <span class=\"comment\">//android19</span></div><div class=\"line\">  ...</div><div class=\"line\">  <span class=\"comment\">//获得最上层控件的MeasureSpec</span></div><div class=\"line\"><span class=\"number\">1672</span> <span class=\"keyword\">int</span> childWidthMeasureSpec = getRootMeasureSpec(mWidth, lp.width);</div><div class=\"line\"><span class=\"number\">1673</span> <span class=\"keyword\">int</span> childHeightMeasureSpec = getRootMeasureSpec(mHeight, lp.height);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Ask host how big it wants to be</span></div><div class=\"line\"><span class=\"number\">1682</span> performMeasure(childWidthMeasureSpec, childHeightMeasureSpec);</div><div class=\"line\">...</div><div class=\"line\"><span class=\"number\">1744</span> performLayout(lp, desiredWindowWidth, desiredWindowHeight);</div><div class=\"line\">...</div><div class=\"line\"><span class=\"number\">1883</span> performDraw(); <span class=\"comment\">//进入DecorView中最终调用View的Draw()</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">performMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> childWidthMeasureSpec, <span class=\"keyword\">int</span> childHeightMeasureSpec)</span> </span>&#123;</div><div class=\"line\">      mView.measure(childWidthMeasureSpec, childHeightMeasureSpec);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//例如LinearLayout的Onmeasure中就会调用走正常的测量流程</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">measureChildBeforeLayout</span><span class=\"params\">(View child, <span class=\"keyword\">int</span> childIndex,</span></span></div><div class=\"line\">            <span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> totalWidth, <span class=\"keyword\">int</span> heightMeasureSpec,</div><div class=\"line\">            <span class=\"keyword\">int</span> totalHeight) &#123;</div><div class=\"line\">        measureChildWithMargins(child, widthMeasureSpec, totalWidth,</div><div class=\"line\">                heightMeasureSpec, totalHeight);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">performLayout</span><span class=\"params\">(WindowManager.LayoutParams lp, <span class=\"keyword\">int</span> desiredWindowWidth,</span></span></div><div class=\"line\">            <span class=\"keyword\">int</span> desiredWindowHeight) &#123;</div><div class=\"line\">            host.layout(<span class=\"number\">0</span>, <span class=\"number\">0</span>, host.getMeasuredWidth(), host.getMeasuredHeight());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"measure\"><a href=\"#measure\" class=\"headerlink\" title=\"measure\"></a>measure</h2><h3 id=\"ViewGroup-中measureChildWithMargins-调用-View的measure\"><a href=\"#ViewGroup-中measureChildWithMargins-调用-View的measure\" class=\"headerlink\" title=\"ViewGroup 中measureChildWithMargins 调用 View的measure()\"></a>ViewGroup 中measureChildWithMargins 调用 View的measure()</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">measureChildWithMargins</span><span class=\"params\">(View child,</span></span></div><div class=\"line\">          <span class=\"keyword\">int</span> parentWidthMeasureSpec, <span class=\"keyword\">int</span> widthUsed,</div><div class=\"line\">          <span class=\"keyword\">int</span> parentHeightMeasureSpec, <span class=\"keyword\">int</span> heightUsed) &#123;</div><div class=\"line\">             <span class=\"comment\">//获取child的LayoutParams</span></div><div class=\"line\">      <span class=\"keyword\">final</span> MarginLayoutParams lp = (MarginLayoutParams) child.getLayoutParams();</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childWidthMeasureSpec = getChildMeasureSpec(parentWidthMeasureSpec,</div><div class=\"line\">              mPaddingLeft + mPaddingRight + lp.leftMargin + lp.rightMargin + widthUsed,</div><div class=\"line\">              lp.width);</div><div class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childHeightMeasureSpec = getChildMeasureSpec(parentHeightMeasureSpec,</div><div class=\"line\">              mPaddingTop + mPaddingBottom + lp.topMargin + lp.bottomMargin + heightUsed,</div><div class=\"line\">              lp.height);</div><div class=\"line\">              <span class=\"comment\">//调用child的measure方法</span></div><div class=\"line\">      child.measure(childWidthMeasureSpec, childHeightMeasureSpec);</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>其中getChildMeasureSpeac(int spec, int padding, int childDimension)<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getChildMeasureSpec</span><span class=\"params\">(<span class=\"keyword\">int</span> spec, <span class=\"keyword\">int</span> padding, <span class=\"keyword\">int</span> childDimension)</span> </span>&#123;</div><div class=\"line\">       <span class=\"comment\">//获取ViewGroup的参数</span></div><div class=\"line\">       <span class=\"keyword\">int</span> specMode = MeasureSpec.getMode(spec);</div><div class=\"line\">       <span class=\"keyword\">int</span> specSize = MeasureSpec.getSize(spec);</div><div class=\"line\">       <span class=\"comment\">//获取可以使用的最大的size</span></div><div class=\"line\">       <span class=\"keyword\">int</span> size = Math.max(<span class=\"number\">0</span>, specSize - padding);</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">int</span> resultSize = <span class=\"number\">0</span>;</div><div class=\"line\">       <span class=\"keyword\">int</span> resultMode = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"comment\">//根据父控件的specMode分配子空间的大小 和 方式</span></div><div class=\"line\">       <span class=\"keyword\">switch</span> (specMode) &#123;</div><div class=\"line\">       <span class=\"keyword\">case</span> MeasureSpec.EXACTLY:</div><div class=\"line\">       <span class=\"comment\">//childDimension是child的具体设置高度 如果&lt;0则是match 或者 wrap</span></div><div class=\"line\">           <span class=\"keyword\">if</span> (childDimension &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">               resultSize = childDimension;</div><div class=\"line\">               resultMode = MeasureSpec.EXACTLY;</div><div class=\"line\">           &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.MATCH_PARENT) &#123;</div><div class=\"line\">               resultSize = size;</div><div class=\"line\">               resultMode = MeasureSpec.EXACTLY;</div><div class=\"line\">           &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.WRAP_CONTENT) &#123;</div><div class=\"line\">               resultSize = size;</div><div class=\"line\">               resultMode = MeasureSpec.AT_MOST;</div><div class=\"line\">           &#125;</div><div class=\"line\">           <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">case</span> MeasureSpec.AT_MOST:</div><div class=\"line\">           <span class=\"keyword\">if</span> (childDimension &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">               resultSize = childDimension;</div><div class=\"line\">               resultMode = MeasureSpec.EXACTLY;</div><div class=\"line\">           &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.MATCH_PARENT) &#123;</div><div class=\"line\">               resultSize = size;</div><div class=\"line\">               resultMode = MeasureSpec.AT_MOST;</div><div class=\"line\">           &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.WRAP_CONTENT) &#123;</div><div class=\"line\">               resultSize = size;</div><div class=\"line\">               resultMode = MeasureSpec.AT_MOST;</div><div class=\"line\">           &#125;</div><div class=\"line\">           <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"comment\">// 一般不会使用 这个代表不会管理子View的大小 例如ScrollView</span></div><div class=\"line\">       <span class=\"keyword\">case</span> MeasureSpec.UNSPECIFIED:</div><div class=\"line\">           <span class=\"keyword\">if</span> (childDimension &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">               resultSize = childDimension;</div><div class=\"line\">               resultMode = MeasureSpec.EXACTLY;</div><div class=\"line\">           &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.MATCH_PARENT) &#123;</div><div class=\"line\">               <span class=\"comment\">//View.sUseZeroUnspecifiedMeasureSpec=true 5.0以下</span></div><div class=\"line\">               <span class=\"comment\">//5.0 以上 就是 false</span></div><div class=\"line\">               resultSize = View.sUseZeroUnspecifiedMeasureSpec ? <span class=\"number\">0</span> : size;</div><div class=\"line\">               resultMode = MeasureSpec.UNSPECIFIED;</div><div class=\"line\">           &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.WRAP_CONTENT) &#123;</div><div class=\"line\">               resultSize = View.sUseZeroUnspecifiedMeasureSpec ? <span class=\"number\">0</span> : size;</div><div class=\"line\">               resultMode = MeasureSpec.UNSPECIFIED;</div><div class=\"line\">           &#125;</div><div class=\"line\">           <span class=\"keyword\">break</span>;</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">return</span> MeasureSpec.makeMeasureSpec(resultSize, resultMode);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>總的來説就是這樣的 MeasureSpec.UNSPECIFIED 5.0 以上以下有区别 一般不会用到</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Child \\ Parent</th>\n<th style=\"text-align:center\">MeasureSpec.EXACTLY</th>\n<th style=\"text-align:center\">MeasureSpec.AT_MOST</th>\n<th style=\"text-align:center\">MeasureSpec.UNSPECIFIED</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">具體尺寸</td>\n<td style=\"text-align:center\">size=具體 MeasureSpec.EXACTLY</td>\n<td style=\"text-align:center\">size=具體 MeasureSpec.EXACTLY</td>\n<td style=\"text-align:center\">size = 具體   MeasureSpec.EXACTLY</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">WRAP_CONTENT</td>\n<td style=\"text-align:center\">size=size MeasureSpec.AT_MOST</td>\n<td style=\"text-align:center\">size=size MeasureSpec.AT_MOST</td>\n<td style=\"text-align:center\">size=size MeasureSpec.UNSPECIFIED</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">MATCH_PARENT</td>\n<td style=\"text-align:center\">size=size MeasureSpec.EXACTLY</td>\n<td style=\"text-align:center\">size=size MeasureSpec.AT_MOST</td>\n<td style=\"text-align:center\">size=size MeasureSpec.UNSPECIFIED</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"view的measure-childWidthMeasureSpec-childHeightMeasureSpec-方法\"><a href=\"#view的measure-childWidthMeasureSpec-childHeightMeasureSpec-方法\" class=\"headerlink\" title=\"view的measure(childWidthMeasureSpec, childHeightMeasureSpec)方法\"></a>view的measure(childWidthMeasureSpec, childHeightMeasureSpec)方法</h3><p> measure()—这个方法用于设定这个子View到底有多大，并且调用onMeasure()方法<br> <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class=\"line\">      setMeasuredDimension(getDefaultSize(getSuggestedMinimumWidth(), widthMeasureSpec),</div><div class=\"line\">              getDefaultSize(getSuggestedMinimumHeight(), heightMeasureSpec));</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>getSuggestedMinimumHeight() 与 getSuggestedMinimumWidth() 方法雷同 用于计算 最小的值 背景与view自身设置的值<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">int</span> <span class=\"title\">getSuggestedMinimumWidth</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> (mBackground == <span class=\"keyword\">null</span>) ? mMinWidth : max(mMinWidth, mBackground.getMinimumWidth());</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>getDefaultSize() 最终根据自身的MeasureSpec.Mode 来决定自身到底有多大<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getDefaultSize</span><span class=\"params\">(<span class=\"keyword\">int</span> size, <span class=\"keyword\">int</span> measureSpec)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">int</span> result = size;</div><div class=\"line\">       <span class=\"keyword\">int</span> specMode = MeasureSpec.getMode(measureSpec);</div><div class=\"line\">       <span class=\"keyword\">int</span> specSize = MeasureSpec.getSize(measureSpec);</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">switch</span> (specMode) &#123;</div><div class=\"line\">       <span class=\"keyword\">case</span> MeasureSpec.UNSPECIFIED:  </div><div class=\"line\">           result = size; <span class=\"comment\">//这个size是getSuggestedMinimumWidth中获得的最小度  一般=不会用到 但是在lsitView中高度设定不相符时使用min来设定可以确定高度</span></div><div class=\"line\">           <span class=\"keyword\">break</span>;</div><div class=\"line\">       <span class=\"keyword\">case</span> MeasureSpec.AT_MOST:</div><div class=\"line\">       <span class=\"keyword\">case</span> MeasureSpec.EXACTLY:</div><div class=\"line\">           result = specSize;</div><div class=\"line\">           <span class=\"keyword\">break</span>;</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">return</span> result;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"重点强调的是-自定义控件的onmeasure方法重写-必须设定WRAP-CONTENT时的状态\"><a href=\"#重点强调的是-自定义控件的onmeasure方法重写-必须设定WRAP-CONTENT时的状态\" class=\"headerlink\" title=\"重点强调的是 自定义控件的onmeasure方法重写 必须设定WRAP_CONTENT时的状态\"></a>重点强调的是 自定义控件的onmeasure方法重写 必须设定WRAP_CONTENT时的状态</h3><p>因为在WRAP_CONTENT情况下 measure的模式为MeasureSpec,AT_MOST 并且大小也与父控件大小相同 这样的话 WRAP_CONTENT就与MATCH_PARENT的效果相同 必须要重写设置大小<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">int</span> widthMode = MeasureSpec.getMode(widthMeasureSpec);</div><div class=\"line\">       <span class=\"keyword\">int</span> heightMode = MeasureSpec.getMode(heightMeasureSpec);</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">int</span> width = <span class=\"number\">100</span>; <span class=\"comment\">//这个高度宽度需要计算 计算出自己到底需要多少</span></div><div class=\"line\">       <span class=\"keyword\">int</span> height = <span class=\"number\">100</span>;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">if</span> (widthMode == MeasureSpec.AT_MOST &amp;&amp; heightMode == MeasureSpec.AT_MOST) &#123; <span class=\"comment\">// 添加判断才可以确定具体尺寸来设置WRAP_CONTENT</span></div><div class=\"line\">           setMeasuredDimension(width, height);</div><div class=\"line\">       &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (widthMode == MeasureSpec.AT_MOST) &#123;</div><div class=\"line\">           setMeasuredDimension(width, getDefaultSize(getSuggestedMinimumHeight(), heightMeasureSpec));</div><div class=\"line\">       &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (height == MeasureSpec.AT_MOST) &#123;</div><div class=\"line\">           setMeasuredDimension(getDefaultSize(getSuggestedMinimumWidth(), widthMeasureSpec), height);</div><div class=\"line\">       &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">           <span class=\"keyword\">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"知識點-在ScrollView嵌套ListView中我們經常這樣寫\"><a href=\"#知識點-在ScrollView嵌套ListView中我們經常這樣寫\" class=\"headerlink\" title=\"知識點 在ScrollView嵌套ListView中我們經常這樣寫\"></a>知識點 在ScrollView嵌套ListView中我們經常這樣寫</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> height = MeasureSpec.makeMeasureSpec(Integer.MAX_VALUE&gt;&gt;<span class=\"number\">2</span>, MeasureSpec.AT_MOST);</div><div class=\"line\">        <span class=\"keyword\">super</span>.onMeasure(widthMeasureSpec, height);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>就是因爲本身他的父控件ScrollView屬性是MeasureSpec.UNSPECIFIED listview本身的屬性也變成這樣，需要我們手動來更改成爲MeasureSpec.AT_MOST,讓listView重新計算自己的高度–onMeasure()中 heightSize就是我們傳入的30位的最大值<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (heightMode == MeasureSpec.AT_MOST) &#123;</div><div class=\"line\">            <span class=\"comment\">// <span class=\"doctag\">TODO:</span> after first layout we should maybe start at the first visible position, not 0</span></div><div class=\"line\">            heightSize = measureHeightOfChildren(widthMeasureSpec, <span class=\"number\">0</span>, NO_POSITION, heightSize, -<span class=\"number\">1</span>);</div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure></p>\n<p>將方法中除了我們本身傳過去的heightSize以外的代碼刪除 發現本身就命名爲maxHeight，如果 測量的高度不大於我們的maxHeight就將測量值(所有子View的高度)返回，所以這樣重寫之後，listView默認展示所有的條目，如果不是最大值那麽如果測量值大於你設定的值那麽也將顯示不全<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">measureHeightOfChildren</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> startPosition, <span class=\"keyword\">int</span> endPosition,</span></span></div><div class=\"line\">           <span class=\"keyword\">int</span> maxHeight, <span class=\"keyword\">int</span> disallowPartialChildPosition) &#123;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"comment\">// Include the padding of the list</span></div><div class=\"line\">       <span class=\"keyword\">int</span> returnedHeight = mListPadding.top + mListPadding.bottom;</div><div class=\"line\">                      .</div><div class=\"line\">                      .</div><div class=\"line\">                      .</div><div class=\"line\">       <span class=\"keyword\">for</span> (i = startPosition; i &lt;= endPosition; ++i) &#123;</div><div class=\"line\"></div><div class=\"line\">           returnedHeight += child.getMeasuredHeight();</div><div class=\"line\"></div><div class=\"line\">           <span class=\"keyword\">if</span> (returnedHeight &gt;= maxHeight) &#123;</div><div class=\"line\">               <span class=\"comment\">// We went over, figure out which height to return.  If returnedHeight &gt; maxHeight,</span></div><div class=\"line\">               <span class=\"comment\">// then the i'th position did not fit completely.</span></div><div class=\"line\">               <span class=\"keyword\">return</span> (disallowPartialChildPosition &gt;= <span class=\"number\">0</span>) <span class=\"comment\">// Disallowing is enabled (&gt; -1)</span></div><div class=\"line\">                           &amp;&amp; (i &gt; disallowPartialChildPosition) <span class=\"comment\">// We've past the min pos</span></div><div class=\"line\">                           &amp;&amp; (prevHeightWithoutPartialChild &gt; <span class=\"number\">0</span>) <span class=\"comment\">// We have a prev height</span></div><div class=\"line\">                           &amp;&amp; (returnedHeight != maxHeight) <span class=\"comment\">// i'th child did not fit completely</span></div><div class=\"line\">                       ? prevHeightWithoutPartialChild</div><div class=\"line\">                       : maxHeight;</div><div class=\"line\">           &#125;</div><div class=\"line\"></div><div class=\"line\">           <span class=\"keyword\">if</span> ((disallowPartialChildPosition &gt;= <span class=\"number\">0</span>) &amp;&amp; (i &gt;= disallowPartialChildPosition)) &#123;</div><div class=\"line\">               prevHeightWithoutPartialChild = returnedHeight;</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"comment\">// At this point, we went through the range of children, and they each</span></div><div class=\"line\">       <span class=\"comment\">// completely fit, so return the returnedHeight</span></div><div class=\"line\">       <span class=\"keyword\">return</span> returnedHeight;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"layout\"><a href=\"#layout\" class=\"headerlink\" title=\"layout\"></a>layout</h2><h3 id=\"onlayout-這個方法是ViewGroup方法需要重寫的方法\"><a href=\"#onlayout-這個方法是ViewGroup方法需要重寫的方法\" class=\"headerlink\" title=\"onlayout() 這個方法是ViewGroup方法需要重寫的方法\"></a>onlayout() 這個方法是ViewGroup方法需要重寫的方法</h3><p>首先是View的layout()方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">layout</span><span class=\"params\">(<span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> t, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> b)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> ((mPrivateFlags3 &amp; PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT) != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            onMeasure(mOldWidthMeasureSpec, mOldHeightMeasureSpec);</div><div class=\"line\">            mPrivateFlags3 &amp;= ~PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT;</div><div class=\"line\">        &#125;</div><div class=\"line\">                `</div><div class=\"line\">                `</div><div class=\"line\">                `</div><div class=\"line\">        <span class=\"keyword\">boolean</span> changed = isLayoutModeOptical(mParent) ?</div><div class=\"line\">                setOpticalFrame(l, t, r, b) : setFrame(l, t, r, b);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (changed || (mPrivateFlags &amp; PFLAG_LAYOUT_REQUIRED) == PFLAG_LAYOUT_REQUIRED) &#123;</div><div class=\"line\">            onLayout(changed, l, t, r, b);</div><div class=\"line\">                `</div><div class=\"line\">                `</div><div class=\"line\">                ``</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        mPrivateFlags &amp;= ~PFLAG_FORCE_LAYOUT;</div><div class=\"line\">        mPrivateFlags3 |= PFLAG3_IS_LAID_OUT;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>判斷changed setOpticalFrame 最終走的也是setFrame 判斷位置是否發生了變化<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span> <span class=\"title\">setFrame</span><span class=\"params\">(<span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> top, <span class=\"keyword\">int</span> right, <span class=\"keyword\">int</span> bottom)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">boolean</span> changed = <span class=\"keyword\">false</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (mLeft != left || mRight != right || mTop != top || mBottom != bottom) &#123;</div><div class=\"line\">            changed = <span class=\"keyword\">true</span>;</div><div class=\"line\">              `</div><div class=\"line\">              `</div><div class=\"line\">        <span class=\"keyword\">return</span> changed;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>發生變化走onLayout方法====viewGroup調用onLayout方法 在各個的onlayou方法中調用view的layou方法確定位置</p>\n<h3 id=\"總結\"><a href=\"#總結\" class=\"headerlink\" title=\"總結\"></a>總結</h3><p>父View的layout方法調用父View的onlyout調用子View的layout</p>\n<p>父view的onLayout來確定子View的具體位置 子View的layout方法來確定滋生的位置  </p>\n<p>其中所有的位置都是相當於父控件的 包括View.getleft 等方法也是相對於父控件的</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"自定义控件学习笔记\"><a href=\"#自定义控件学习笔记\" class=\"headerlink\" title=\"自定义控件学习笔记\"></a>自定义控件学习笔记</h1><h2 id=\"总体调用流程\"><a href=\"#总体调用流程\" class=\"headerlink\" title=\"总体调用流程\"></a>总体调用流程</h2><h3 id=\"ViewRootImpl-是View开始的入口\"><a href=\"#ViewRootImpl-是View开始的入口\" class=\"headerlink\" title=\"ViewRootImpl 是View开始的入口\"></a>ViewRootImpl 是View开始的入口</h3><h3 id=\"ViewRootImpl中会首先调用performTraversals\"><a href=\"#ViewRootImpl中会首先调用performTraversals\" class=\"headerlink\" title=\"ViewRootImpl中会首先调用performTraversals()\"></a>ViewRootImpl中会首先调用performTraversals()</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">performTraversals</span><span class=\"params\">()</span> </span>&#123; <span class=\"comment\">//android19</span></div><div class=\"line\">  ...</div><div class=\"line\">  <span class=\"comment\">//获得最上层控件的MeasureSpec</span></div><div class=\"line\"><span class=\"number\">1672</span> <span class=\"keyword\">int</span> childWidthMeasureSpec = getRootMeasureSpec(mWidth, lp.width);</div><div class=\"line\"><span class=\"number\">1673</span> <span class=\"keyword\">int</span> childHeightMeasureSpec = getRootMeasureSpec(mHeight, lp.height);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Ask host how big it wants to be</span></div><div class=\"line\"><span class=\"number\">1682</span> performMeasure(childWidthMeasureSpec, childHeightMeasureSpec);</div><div class=\"line\">...</div><div class=\"line\"><span class=\"number\">1744</span> performLayout(lp, desiredWindowWidth, desiredWindowHeight);</div><div class=\"line\">...</div><div class=\"line\"><span class=\"number\">1883</span> performDraw(); <span class=\"comment\">//进入DecorView中最终调用View的Draw()</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">performMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> childWidthMeasureSpec, <span class=\"keyword\">int</span> childHeightMeasureSpec)</span> </span>&#123;</div><div class=\"line\">      mView.measure(childWidthMeasureSpec, childHeightMeasureSpec);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//例如LinearLayout的Onmeasure中就会调用走正常的测量流程</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">measureChildBeforeLayout</span><span class=\"params\">(View child, <span class=\"keyword\">int</span> childIndex,</div><div class=\"line\">            <span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> totalWidth, <span class=\"keyword\">int</span> heightMeasureSpec,</div><div class=\"line\">            <span class=\"keyword\">int</span> totalHeight)</span> </span>&#123;</div><div class=\"line\">        measureChildWithMargins(child, widthMeasureSpec, totalWidth,</div><div class=\"line\">                heightMeasureSpec, totalHeight);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">performLayout</span><span class=\"params\">(WindowManager.LayoutParams lp, <span class=\"keyword\">int</span> desiredWindowWidth,</div><div class=\"line\">            <span class=\"keyword\">int</span> desiredWindowHeight)</span> </span>&#123;</div><div class=\"line\">            host.layout(<span class=\"number\">0</span>, <span class=\"number\">0</span>, host.getMeasuredWidth(), host.getMeasuredHeight());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"measure\"><a href=\"#measure\" class=\"headerlink\" title=\"measure\"></a>measure</h2><h3 id=\"ViewGroup-中measureChildWithMargins-调用-View的measure\"><a href=\"#ViewGroup-中measureChildWithMargins-调用-View的measure\" class=\"headerlink\" title=\"ViewGroup 中measureChildWithMargins 调用 View的measure()\"></a>ViewGroup 中measureChildWithMargins 调用 View的measure()</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">measureChildWithMargins</span><span class=\"params\">(View child,</div><div class=\"line\">          <span class=\"keyword\">int</span> parentWidthMeasureSpec, <span class=\"keyword\">int</span> widthUsed,</div><div class=\"line\">          <span class=\"keyword\">int</span> parentHeightMeasureSpec, <span class=\"keyword\">int</span> heightUsed)</span> </span>&#123;</div><div class=\"line\">             <span class=\"comment\">//获取child的LayoutParams</span></div><div class=\"line\">      <span class=\"keyword\">final</span> MarginLayoutParams lp = (MarginLayoutParams) child.getLayoutParams();</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childWidthMeasureSpec = getChildMeasureSpec(parentWidthMeasureSpec,</div><div class=\"line\">              mPaddingLeft + mPaddingRight + lp.leftMargin + lp.rightMargin + widthUsed,</div><div class=\"line\">              lp.width);</div><div class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childHeightMeasureSpec = getChildMeasureSpec(parentHeightMeasureSpec,</div><div class=\"line\">              mPaddingTop + mPaddingBottom + lp.topMargin + lp.bottomMargin + heightUsed,</div><div class=\"line\">              lp.height);</div><div class=\"line\">              <span class=\"comment\">//调用child的measure方法</span></div><div class=\"line\">      child.measure(childWidthMeasureSpec, childHeightMeasureSpec);</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>","more":"<p>其中getChildMeasureSpeac(int spec, int padding, int childDimension)<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getChildMeasureSpec</span><span class=\"params\">(<span class=\"keyword\">int</span> spec, <span class=\"keyword\">int</span> padding, <span class=\"keyword\">int</span> childDimension)</span> </span>&#123;</div><div class=\"line\">       <span class=\"comment\">//获取ViewGroup的参数</span></div><div class=\"line\">       <span class=\"keyword\">int</span> specMode = MeasureSpec.getMode(spec);</div><div class=\"line\">       <span class=\"keyword\">int</span> specSize = MeasureSpec.getSize(spec);</div><div class=\"line\">       <span class=\"comment\">//获取可以使用的最大的size</span></div><div class=\"line\">       <span class=\"keyword\">int</span> size = Math.max(<span class=\"number\">0</span>, specSize - padding);</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">int</span> resultSize = <span class=\"number\">0</span>;</div><div class=\"line\">       <span class=\"keyword\">int</span> resultMode = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"comment\">//根据父控件的specMode分配子空间的大小 和 方式</span></div><div class=\"line\">       <span class=\"keyword\">switch</span> (specMode) &#123;</div><div class=\"line\">       <span class=\"keyword\">case</span> MeasureSpec.EXACTLY:</div><div class=\"line\">       <span class=\"comment\">//childDimension是child的具体设置高度 如果&lt;0则是match 或者 wrap</span></div><div class=\"line\">           <span class=\"keyword\">if</span> (childDimension &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">               resultSize = childDimension;</div><div class=\"line\">               resultMode = MeasureSpec.EXACTLY;</div><div class=\"line\">           &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.MATCH_PARENT) &#123;</div><div class=\"line\">               resultSize = size;</div><div class=\"line\">               resultMode = MeasureSpec.EXACTLY;</div><div class=\"line\">           &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.WRAP_CONTENT) &#123;</div><div class=\"line\">               resultSize = size;</div><div class=\"line\">               resultMode = MeasureSpec.AT_MOST;</div><div class=\"line\">           &#125;</div><div class=\"line\">           <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">case</span> MeasureSpec.AT_MOST:</div><div class=\"line\">           <span class=\"keyword\">if</span> (childDimension &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">               resultSize = childDimension;</div><div class=\"line\">               resultMode = MeasureSpec.EXACTLY;</div><div class=\"line\">           &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.MATCH_PARENT) &#123;</div><div class=\"line\">               resultSize = size;</div><div class=\"line\">               resultMode = MeasureSpec.AT_MOST;</div><div class=\"line\">           &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.WRAP_CONTENT) &#123;</div><div class=\"line\">               resultSize = size;</div><div class=\"line\">               resultMode = MeasureSpec.AT_MOST;</div><div class=\"line\">           &#125;</div><div class=\"line\">           <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"comment\">// 一般不会使用 这个代表不会管理子View的大小 例如ScrollView</span></div><div class=\"line\">       <span class=\"keyword\">case</span> MeasureSpec.UNSPECIFIED:</div><div class=\"line\">           <span class=\"keyword\">if</span> (childDimension &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">               resultSize = childDimension;</div><div class=\"line\">               resultMode = MeasureSpec.EXACTLY;</div><div class=\"line\">           &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.MATCH_PARENT) &#123;</div><div class=\"line\">               <span class=\"comment\">//View.sUseZeroUnspecifiedMeasureSpec=true 5.0以下</span></div><div class=\"line\">               <span class=\"comment\">//5.0 以上 就是 false</span></div><div class=\"line\">               resultSize = View.sUseZeroUnspecifiedMeasureSpec ? <span class=\"number\">0</span> : size;</div><div class=\"line\">               resultMode = MeasureSpec.UNSPECIFIED;</div><div class=\"line\">           &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.WRAP_CONTENT) &#123;</div><div class=\"line\">               resultSize = View.sUseZeroUnspecifiedMeasureSpec ? <span class=\"number\">0</span> : size;</div><div class=\"line\">               resultMode = MeasureSpec.UNSPECIFIED;</div><div class=\"line\">           &#125;</div><div class=\"line\">           <span class=\"keyword\">break</span>;</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">return</span> MeasureSpec.makeMeasureSpec(resultSize, resultMode);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>總的來説就是這樣的 MeasureSpec.UNSPECIFIED 5.0 以上以下有区别 一般不会用到</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Child \\ Parent</th>\n<th style=\"text-align:center\">MeasureSpec.EXACTLY</th>\n<th style=\"text-align:center\">MeasureSpec.AT_MOST</th>\n<th style=\"text-align:center\">MeasureSpec.UNSPECIFIED</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">具體尺寸</td>\n<td style=\"text-align:center\">size=具體 MeasureSpec.EXACTLY</td>\n<td style=\"text-align:center\">size=具體 MeasureSpec.EXACTLY</td>\n<td style=\"text-align:center\">size = 具體   MeasureSpec.EXACTLY</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">WRAP_CONTENT</td>\n<td style=\"text-align:center\">size=size MeasureSpec.AT_MOST</td>\n<td style=\"text-align:center\">size=size MeasureSpec.AT_MOST</td>\n<td style=\"text-align:center\">size=size MeasureSpec.UNSPECIFIED</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">MATCH_PARENT</td>\n<td style=\"text-align:center\">size=size MeasureSpec.EXACTLY</td>\n<td style=\"text-align:center\">size=size MeasureSpec.AT_MOST</td>\n<td style=\"text-align:center\">size=size MeasureSpec.UNSPECIFIED</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"view的measure-childWidthMeasureSpec-childHeightMeasureSpec-方法\"><a href=\"#view的measure-childWidthMeasureSpec-childHeightMeasureSpec-方法\" class=\"headerlink\" title=\"view的measure(childWidthMeasureSpec, childHeightMeasureSpec)方法\"></a>view的measure(childWidthMeasureSpec, childHeightMeasureSpec)方法</h3><p> measure()—这个方法用于设定这个子View到底有多大，并且调用onMeasure()方法<br> <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class=\"line\">      setMeasuredDimension(getDefaultSize(getSuggestedMinimumWidth(), widthMeasureSpec),</div><div class=\"line\">              getDefaultSize(getSuggestedMinimumHeight(), heightMeasureSpec));</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>getSuggestedMinimumHeight() 与 getSuggestedMinimumWidth() 方法雷同 用于计算 最小的值 背景与view自身设置的值<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">int</span> <span class=\"title\">getSuggestedMinimumWidth</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> (mBackground == <span class=\"keyword\">null</span>) ? mMinWidth : max(mMinWidth, mBackground.getMinimumWidth());</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>getDefaultSize() 最终根据自身的MeasureSpec.Mode 来决定自身到底有多大<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getDefaultSize</span><span class=\"params\">(<span class=\"keyword\">int</span> size, <span class=\"keyword\">int</span> measureSpec)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">int</span> result = size;</div><div class=\"line\">       <span class=\"keyword\">int</span> specMode = MeasureSpec.getMode(measureSpec);</div><div class=\"line\">       <span class=\"keyword\">int</span> specSize = MeasureSpec.getSize(measureSpec);</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">switch</span> (specMode) &#123;</div><div class=\"line\">       <span class=\"keyword\">case</span> MeasureSpec.UNSPECIFIED:  </div><div class=\"line\">           result = size; <span class=\"comment\">//这个size是getSuggestedMinimumWidth中获得的最小度  一般=不会用到 但是在lsitView中高度设定不相符时使用min来设定可以确定高度</span></div><div class=\"line\">           <span class=\"keyword\">break</span>;</div><div class=\"line\">       <span class=\"keyword\">case</span> MeasureSpec.AT_MOST:</div><div class=\"line\">       <span class=\"keyword\">case</span> MeasureSpec.EXACTLY:</div><div class=\"line\">           result = specSize;</div><div class=\"line\">           <span class=\"keyword\">break</span>;</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">return</span> result;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"重点强调的是-自定义控件的onmeasure方法重写-必须设定WRAP-CONTENT时的状态\"><a href=\"#重点强调的是-自定义控件的onmeasure方法重写-必须设定WRAP-CONTENT时的状态\" class=\"headerlink\" title=\"重点强调的是 自定义控件的onmeasure方法重写 必须设定WRAP_CONTENT时的状态\"></a>重点强调的是 自定义控件的onmeasure方法重写 必须设定WRAP_CONTENT时的状态</h3><p>因为在WRAP_CONTENT情况下 measure的模式为MeasureSpec,AT_MOST 并且大小也与父控件大小相同 这样的话 WRAP_CONTENT就与MATCH_PARENT的效果相同 必须要重写设置大小<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">int</span> widthMode = MeasureSpec.getMode(widthMeasureSpec);</div><div class=\"line\">       <span class=\"keyword\">int</span> heightMode = MeasureSpec.getMode(heightMeasureSpec);</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">int</span> width = <span class=\"number\">100</span>; <span class=\"comment\">//这个高度宽度需要计算 计算出自己到底需要多少</span></div><div class=\"line\">       <span class=\"keyword\">int</span> height = <span class=\"number\">100</span>;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">if</span> (widthMode == MeasureSpec.AT_MOST &amp;&amp; heightMode == MeasureSpec.AT_MOST) &#123; <span class=\"comment\">// 添加判断才可以确定具体尺寸来设置WRAP_CONTENT</span></div><div class=\"line\">           setMeasuredDimension(width, height);</div><div class=\"line\">       &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (widthMode == MeasureSpec.AT_MOST) &#123;</div><div class=\"line\">           setMeasuredDimension(width, getDefaultSize(getSuggestedMinimumHeight(), heightMeasureSpec));</div><div class=\"line\">       &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (height == MeasureSpec.AT_MOST) &#123;</div><div class=\"line\">           setMeasuredDimension(getDefaultSize(getSuggestedMinimumWidth(), widthMeasureSpec), height);</div><div class=\"line\">       &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">           <span class=\"keyword\">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"知識點-在ScrollView嵌套ListView中我們經常這樣寫\"><a href=\"#知識點-在ScrollView嵌套ListView中我們經常這樣寫\" class=\"headerlink\" title=\"知識點 在ScrollView嵌套ListView中我們經常這樣寫\"></a>知識點 在ScrollView嵌套ListView中我們經常這樣寫</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> height = MeasureSpec.makeMeasureSpec(Integer.MAX_VALUE&gt;&gt;<span class=\"number\">2</span>, MeasureSpec.AT_MOST);</div><div class=\"line\">        <span class=\"keyword\">super</span>.onMeasure(widthMeasureSpec, height);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>就是因爲本身他的父控件ScrollView屬性是MeasureSpec.UNSPECIFIED listview本身的屬性也變成這樣，需要我們手動來更改成爲MeasureSpec.AT_MOST,讓listView重新計算自己的高度–onMeasure()中 heightSize就是我們傳入的30位的最大值<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (heightMode == MeasureSpec.AT_MOST) &#123;</div><div class=\"line\">            <span class=\"comment\">// <span class=\"doctag\">TODO:</span> after first layout we should maybe start at the first visible position, not 0</span></div><div class=\"line\">            heightSize = measureHeightOfChildren(widthMeasureSpec, <span class=\"number\">0</span>, NO_POSITION, heightSize, -<span class=\"number\">1</span>);</div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure></p>\n<p>將方法中除了我們本身傳過去的heightSize以外的代碼刪除 發現本身就命名爲maxHeight，如果 測量的高度不大於我們的maxHeight就將測量值(所有子View的高度)返回，所以這樣重寫之後，listView默認展示所有的條目，如果不是最大值那麽如果測量值大於你設定的值那麽也將顯示不全<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">measureHeightOfChildren</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> startPosition, <span class=\"keyword\">int</span> endPosition,</div><div class=\"line\">           <span class=\"keyword\">int</span> maxHeight, <span class=\"keyword\">int</span> disallowPartialChildPosition)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"comment\">// Include the padding of the list</span></div><div class=\"line\">       <span class=\"keyword\">int</span> returnedHeight = mListPadding.top + mListPadding.bottom;</div><div class=\"line\">                      .</div><div class=\"line\">                      .</div><div class=\"line\">                      .</div><div class=\"line\">       <span class=\"keyword\">for</span> (i = startPosition; i &lt;= endPosition; ++i) &#123;</div><div class=\"line\"></div><div class=\"line\">           returnedHeight += child.getMeasuredHeight();</div><div class=\"line\"></div><div class=\"line\">           <span class=\"keyword\">if</span> (returnedHeight &gt;= maxHeight) &#123;</div><div class=\"line\">               <span class=\"comment\">// We went over, figure out which height to return.  If returnedHeight &gt; maxHeight,</span></div><div class=\"line\">               <span class=\"comment\">// then the i'th position did not fit completely.</span></div><div class=\"line\">               <span class=\"keyword\">return</span> (disallowPartialChildPosition &gt;= <span class=\"number\">0</span>) <span class=\"comment\">// Disallowing is enabled (&gt; -1)</span></div><div class=\"line\">                           &amp;&amp; (i &gt; disallowPartialChildPosition) <span class=\"comment\">// We've past the min pos</span></div><div class=\"line\">                           &amp;&amp; (prevHeightWithoutPartialChild &gt; <span class=\"number\">0</span>) <span class=\"comment\">// We have a prev height</span></div><div class=\"line\">                           &amp;&amp; (returnedHeight != maxHeight) <span class=\"comment\">// i'th child did not fit completely</span></div><div class=\"line\">                       ? prevHeightWithoutPartialChild</div><div class=\"line\">                       : maxHeight;</div><div class=\"line\">           &#125;</div><div class=\"line\"></div><div class=\"line\">           <span class=\"keyword\">if</span> ((disallowPartialChildPosition &gt;= <span class=\"number\">0</span>) &amp;&amp; (i &gt;= disallowPartialChildPosition)) &#123;</div><div class=\"line\">               prevHeightWithoutPartialChild = returnedHeight;</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"comment\">// At this point, we went through the range of children, and they each</span></div><div class=\"line\">       <span class=\"comment\">// completely fit, so return the returnedHeight</span></div><div class=\"line\">       <span class=\"keyword\">return</span> returnedHeight;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"layout\"><a href=\"#layout\" class=\"headerlink\" title=\"layout\"></a>layout</h2><h3 id=\"onlayout-這個方法是ViewGroup方法需要重寫的方法\"><a href=\"#onlayout-這個方法是ViewGroup方法需要重寫的方法\" class=\"headerlink\" title=\"onlayout() 這個方法是ViewGroup方法需要重寫的方法\"></a>onlayout() 這個方法是ViewGroup方法需要重寫的方法</h3><p>首先是View的layout()方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">layout</span><span class=\"params\">(<span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> t, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> b)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> ((mPrivateFlags3 &amp; PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT) != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            onMeasure(mOldWidthMeasureSpec, mOldHeightMeasureSpec);</div><div class=\"line\">            mPrivateFlags3 &amp;= ~PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT;</div><div class=\"line\">        &#125;</div><div class=\"line\">                `</div><div class=\"line\">                `</div><div class=\"line\">                `</div><div class=\"line\">        <span class=\"keyword\">boolean</span> changed = isLayoutModeOptical(mParent) ?</div><div class=\"line\">                setOpticalFrame(l, t, r, b) : setFrame(l, t, r, b);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (changed || (mPrivateFlags &amp; PFLAG_LAYOUT_REQUIRED) == PFLAG_LAYOUT_REQUIRED) &#123;</div><div class=\"line\">            onLayout(changed, l, t, r, b);</div><div class=\"line\">                `</div><div class=\"line\">                `</div><div class=\"line\">                ``</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        mPrivateFlags &amp;= ~PFLAG_FORCE_LAYOUT;</div><div class=\"line\">        mPrivateFlags3 |= PFLAG3_IS_LAID_OUT;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>判斷changed setOpticalFrame 最終走的也是setFrame 判斷位置是否發生了變化<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span> <span class=\"title\">setFrame</span><span class=\"params\">(<span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> top, <span class=\"keyword\">int</span> right, <span class=\"keyword\">int</span> bottom)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">boolean</span> changed = <span class=\"keyword\">false</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (mLeft != left || mRight != right || mTop != top || mBottom != bottom) &#123;</div><div class=\"line\">            changed = <span class=\"keyword\">true</span>;</div><div class=\"line\">              `</div><div class=\"line\">              `</div><div class=\"line\">        <span class=\"keyword\">return</span> changed;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>發生變化走onLayout方法====viewGroup調用onLayout方法 在各個的onlayou方法中調用view的layou方法確定位置</p>\n<h3 id=\"總結\"><a href=\"#總結\" class=\"headerlink\" title=\"總結\"></a>總結</h3><p>父View的layout方法調用父View的onlyout調用子View的layout</p>\n<p>父view的onLayout來確定子View的具體位置 子View的layout方法來確定滋生的位置  </p>\n<p>其中所有的位置都是相當於父控件的 包括View.getleft 等方法也是相對於父控件的</p>"},{"title":"for与foreach在List中的使用","date":"2017-03-30T02:24:15.000Z","_content":"\n## 数组\n对于数组中两种循环都是相同的 foreach转换成不同for循环\n\n## List\n\n对于List中foreach相当于使用了Iterator遍历\n\n而List中有的实现了RandomAccess()的方法 而在RandomAccess()中明确说明\n```java\n\n*     for (int i=0, n=list.size(); i &lt; n; i++)\n*         list.get(i);\n\n* runs faster than this loop:\n\n*     for (Iterator i=list.iterator(); i.hasNext(); )\n*         i.next();\n\n```\nList中ArrayList和Vector中实现了RandomAccess接口 LinkedList并没有\n\n所里在ArrayList中使用普通For循环速度会比增强for快\n","source":"_posts/for与foreach在List中的使用.md","raw":"---\ntitle: for与foreach在List中的使用\ndate: 2017-03-30 10:24:15\ntags:\n- 笔记\n- java\ncategories:\n- 笔记\n- java\n---\n\n## 数组\n对于数组中两种循环都是相同的 foreach转换成不同for循环\n\n## List\n\n对于List中foreach相当于使用了Iterator遍历\n\n而List中有的实现了RandomAccess()的方法 而在RandomAccess()中明确说明\n```java\n\n*     for (int i=0, n=list.size(); i &lt; n; i++)\n*         list.get(i);\n\n* runs faster than this loop:\n\n*     for (Iterator i=list.iterator(); i.hasNext(); )\n*         i.next();\n\n```\nList中ArrayList和Vector中实现了RandomAccess接口 LinkedList并没有\n\n所里在ArrayList中使用普通For循环速度会比增强for快\n","slug":"for与foreach在List中的使用","published":1,"updated":"2017-04-19T05:53:35.013Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4qaebd3000r2oq9kn88hakw","content":"<h2 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h2><p>对于数组中两种循环都是相同的 foreach转换成不同for循环</p>\n<h2 id=\"List\"><a href=\"#List\" class=\"headerlink\" title=\"List\"></a>List</h2><p>对于List中foreach相当于使用了Iterator遍历</p>\n<p>而List中有的实现了RandomAccess()的方法 而在RandomAccess()中明确说明<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">*     <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>, n=list.size(); i &amp;lt; n; i++)</div><div class=\"line\">*         list.get(i);</div><div class=\"line\"></div><div class=\"line\">* runs faster than <span class=\"keyword\">this</span> loop:</div><div class=\"line\"></div><div class=\"line\">*     <span class=\"keyword\">for</span> (Iterator i=list.iterator(); i.hasNext(); )</div><div class=\"line\">*         i.next();</div></pre></td></tr></table></figure></p>\n<p>List中ArrayList和Vector中实现了RandomAccess接口 LinkedList并没有</p>\n<p>所里在ArrayList中使用普通For循环速度会比增强for快</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h2><p>对于数组中两种循环都是相同的 foreach转换成不同for循环</p>\n<h2 id=\"List\"><a href=\"#List\" class=\"headerlink\" title=\"List\"></a>List</h2><p>对于List中foreach相当于使用了Iterator遍历</p>\n<p>而List中有的实现了RandomAccess()的方法 而在RandomAccess()中明确说明<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">*     <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>, n=list.size(); i &amp;lt; n; i++)</div><div class=\"line\">*         list.get(i);</div><div class=\"line\"></div><div class=\"line\">* runs faster than <span class=\"keyword\">this</span> loop:</div><div class=\"line\"></div><div class=\"line\">*     <span class=\"keyword\">for</span> (Iterator i=list.iterator(); i.hasNext(); )</div><div class=\"line\">*         i.next();</div></pre></td></tr></table></figure></p>\n<p>List中ArrayList和Vector中实现了RandomAccess接口 LinkedList并没有</p>\n<p>所里在ArrayList中使用普通For循环速度会比增强for快</p>\n"},{"title":"OkHttp3-从零开始的详细使用到简单封装","date":"2017-03-21T02:24:15.000Z","_content":"# [Github地址---MyOkhttpUtils](https://github.com/jlcclidong/MyOkhttpUtils)\n## 初衷\n对于okhttp3出来以后，使用的都是网上封装好的库，为了更好地理解封装的内容，对okhttp本身的熟悉，肯定学一下子了，网上okhttp的方法很多，但是网上okhttp3方面的东西并不多，很多都过时的方法，总结了一下，讲了一下okhttp3的基本使用方法，在下边要耐心才会 。\n封装了一下基本大家使用得到的功能，想用的话可以直接拿去用，想扩展的话也可以直接下载扩展，代码比较少，不了解okhttp的可以下载学习一下，大神门口右走吧。\n封装逻辑和使用的好多方法找不到，借鉴了两位大神的逻辑，相当于简化版本吧，封装的比较全面的可以参照\n[hongyangAndroid / okhttputils](https://github.com/hongyangAndroid/okhttputils)\n[jeasonlzy/okhttp-OkGo](https://github.com/jeasonlzy/okhttp-OkGo)\n## 本文中库的简单使用介绍\n* 在project中添加依赖\n````java\n  allprojects {\n\t\trepositories {\n\t\t\t...\n\t\t\tmaven { url 'https://jitpack.io' }\n\t\t}\n\t}\n     ````\n* 在app中添加依赖\n````java\n        dependencies {\n  \t        compile 'com.github.jlcclidong:MyOkhttpUtils:0.10'\n\t    }\n      ````\n<!-- more -->\n* 在本项目中使用okhttp的方法步骤\n在application中初始化，此步骤必须，别忘记在清单文件中注册application否则不能使用\n````java\n       Ok.init(this)\n                .connectTimeout(3000l, TimeUnit.MILLISECONDS)\n                .readTimeout(3000l, TimeUnit.MILLISECONDS)\n                .commonParams(\"haha\",\"1\") //添加公共参数\n                .commonHeader(\"nihao\",\"1\")  //添加公共头\n                //這兩個攔截器衹能選用一個\n                //.AppInterceptor(\"eason\", new LogInterceptor())   //应用拦截器\n                .NetWorkInterceptor(\"eason\",new LogInterceptor()) //网络拦截器 将重定向等的request response页拦截打印  \n                .CookieJar(new PersistentCookieJar(new SetCookieCache(), new SharedPrefsCookiePersistor(App.this)))\n                .build();\n````\n* 请求  其中callback有三种类型 fail都会返回Exception，不管是本身网络问题还是404等问题都会返回此回调，可以通过Exception类型进行自行处理\n  * callback有三种类型\n    * JsonCallback<T> 传入类自动转换成bean，但是并未处理超大Json文件OOM 可自行通过流的方式来处理解析\n    * CallBack 返回String\n    * FileCallBack(String dir, String filename) 其中传入文件夹和文件名来保存 返回进度(0-100)\n * get\n ````java\n        Ok.get().url(\"http://lab.zuimeia.com/wallpaper/category/1/\")\n                .param(\"page_size\", 1)\n                .build()\n                .call(new JsonCallBack<Bean>() {  //傳入實體類\n                    @Override\n                    public void fail(Exception e) {\n\n                    }\n\n                    @Override\n                    public void success(Bean bean) {\n                        mTv.setText(bean.getData().getBase_url());\n                    }\n                });\n                ````\n * post  支持键值对和文件表单上传\n ````java\n        Ok.post().url(\"https://www.baidu.com\")\n                .param(\"test\", 1)\n                .file(\"test\", new File(\"\"))\n                .build()\n                .call(new CallBack() {\n                    @Override\n                    public void fail(Exception e) {\n\n                    }\n\n                    @Override\n                    public void success(String response) {\n                        mTv.setText(response);\n                    }\n                });\n                ````\n  * postjson  支持postJSON\n```java\n      Ok.postJson().url(\"\")\n          .json(\"\")\n          .build()\n          .call(new CallBack() {\n                @Override\n                  public void fail(Exception e) {\n\n                }\n\n                @Override\n                public void success(String response) {\n\n                }\n            });\n   ```\n  * download 文件下载只做到最基本的下载,断点续传和暂停下载暂未做，后续会追加\n  ```java\n         Ok.download().url(\"http://static.oschina.net/uploads/space/2015/0629/170157_rxDh_1767531.png\")\n                .build()\n                .tag(MainActivity.this)\n                .call(new FileCallBack(getCacheDir().getAbsolutePath(), \"github.png\") {\n                    @Override\n                    public void progress(int progress) {\n                        mTv.setText(progress + \"\");\n                    }\n\n                    @Override\n                    public void success(File file) {\n                        mIV.setImageBitmap(BitmapFactory.decodeFile(file.getAbsolutePath()));\n                    }\n\n                    @Override\n                    public void fail(Exception e) {\n\n                    }\n                });\n  ```\n  * 取消\n````java\n         Ok.cancle(MainActivity.this);\n         ````\n * 同时支持PostJson() 和 PostFile()两种方法\n* 其中日志打印时使用了格式化JsonFormat工具类\n* 请求时自动添加了 Accept-Language 和 User-Agent\n* 简单封装没有太多的代码，可以自行下载扩展\n## okhttp本身的基本使用\n* 初始化一个全局的okhttpclient\n````java\n         OkHttpClient okHttpClient = new OkHttpClient.Builder()\n                .connectTimeout(3000l, TimeUnit.MILLISECONDS)\n                .readTimeout(3000l, TimeUnit.MILLISECONDS)\n                .addInterceptor( new LogInterceptor())\n                .cookieJar(...)\n                .build();\n                ````\n当然初始化的方法有很多这里只是列出常用的方法，okhttp建议全局使用同一个\n* 为了更好的理解get，post方法，我们可以写一个interceptor来监听request和response，实现这个类不可以出现问题否则是无法进行正常请求的\n可以在此处修改request和response的参数添加缓存设置等，可自行添加\n主要方法有这样几个，必须重写的方法\n````java\n       @Override\n        public Response intercept(Chain chain) throws IOException {\n          Request request = chain.request();\n          logForRequest(request);\n          return logForResponse(response, time);\n        }\n        ````\n打印request没有什么特别注意的地方\n````java\n      private void logForRequest(Request request) {\n        try {\n            Log.e(\"============request start===============\");\n            Log.e(\"url:\" + request.url());\n            Log.e(\"method:\" + request.method());\n            if (request.headers() != null && request.headers().size() > 0){\n                Headers headers = request.headers();\n                for (int i = 0; i < headers.size(); i++) {\n                    Log.e(\"headers\"+headers.name(i)+\"---\"+headers.value(i));\n                }\n            }\n            Log.e(\"============request end=================\");\n        } catch (Exception e) {\n            Log.e(\"log request has something worng!!\");\n        }\n        }\n        ````\n打印response时注意，如果添加了interceptor则不能直接调用response.body().string()方法，调用此方法会直接close掉这个response，在callback中得不到正确的结果会报异常，只能使用response.newbuilder() 方法来使用新创建的response调用，eg\n````java\n        private Response logForResponse(Response response, long time) {\n        try {\n            Log.e(\"============response start==============\");\n            //response.body().string()只能调用一次 body()就会关掉\n            //每次使用前都clone一份使用保证原来的body没有被关掉\n            Response copy = response.newBuilder().build();\n            Log.e(\"responseurl:\" + copy.request().url());\n            Log.e(\"response code:\" + copy.code());\n            Log.e(\"total time:\" + time);\n            if (!TextUtils.isEmpty(copy.message()))\n                Log.e(\"message:\" + copy.message());\n                if (copy.headers() != null && copy.headers().size() > 0) {\n                    Headers headers = copy.headers();\n                    for (int i = 0; i < headers.size(); i++) {\n                        Log.e(\"\\t\" + headers.name(i) + \": \" + headers.value(i));\n                    }\n                }\n            Log.e(\"============response end================\");\n            ResponseBody body = copy.body();\n            if (body != null) {\n                MediaType mediaType = body.contentType();\n                if (mediaType != null) {\n                    Log.e(\"============response body===============\");\n                    Log.e(\"Content-type:\" + mediaType.toString());\n                    if (isText(mediaType)) {\n                        String content = body.string();\n                        Log.e(JsonFormat.formatJson(content));\n                        Log.e(\"============response body===============\");\n                        return response.newBuilder().body(ResponseBody.create(mediaType, content)).build();\n                    } else {\n                        Log.e(\" maybe response content too large too print , ignored!\");\n                    }\n                }\n            } else {\n                Log.e(\" body is null , ignored!\");\n            }\n        } catch (Exception e) {\n            Log.e(\"log response has something worng!!\");\n        }\n        return response;\n      }\n      ````\n这样每次调用http请求是就可以详细监听其中的内容了\n全部具体内容详见github代码\n* okhttp请求就是构建一个request加入到okhttpclicent中就可以了\n  这里实例只讲okhttp的异步请求，当然同步只是将enqueue()方法替换成execute()\n注意这个回调的onFailure只是回调了本身请求的一些失败回调，例如超时IOException....当成功返回之后需要在onResponse中判断response.code()来判断是否是200，404，500之类的统一处理\n  * get\n  ```java\n        Request request = new Request.Builder().get()\n                .url(\"https://www.baidu.com\")\n                .header(\"test\",\"fds\")\n                .build();\n        okHttpClient.newCall(request).enqueue(new Callback() {\n            @Override\n            public void onFailure(Call call, IOException e) {\n\n            }\n\n            @Override\n            public void onResponse(Call call, Response response) throws IOException {\n\n            }\n        });\n        ```\n * post\n只需要替换request post中需要传一个requestBody，不同的post请求，需要不同的请求体，当然只是方便我们不同的需求。\n基本的键值对上传在下面贴出，使用FormBody即可创建\n键值对加上文件上传则需要MultipartBody来创建\n而普通的上传json，上传文件可以直接调用RequestBody的静态方法来创建\n````java\n        Request request = new Request.Builder().post(new FormBody.Builder().add(\"sdf\",\"Sdfa\").build())\n                .url(\"https://www.baidu.com\")\n                .header(\"test\",\"fds\")\n                .build();\n                ````\n其他方法详见本库中request中做的封装，都包含入内了\n* https的影响，okhttps本身不添加任何代码就可以支持okhttps中公认的证书，类似于百度之类的，当时像12306这种只能手动添加了，当然也可以默认信任所有证书，具体由于本人公司并不需要就没写,推荐[ [Android Https相关完全解析 当OkHttp遇到Https](http://blog.csdn.net/lmj623565791/article/details/48129405)]\n* cookie持久化网上有很多方法，本库采用的是[franmontiel / PersistentCookieJar](https://github.com/franmontiel/PersistentCookieJar)\n* okhttp3取消请求\n这个是比较坑的网上传统的okhttpclicent.cancle(tag)方法发现没有了，只可以通过call.cancle来取消请求，后来发现是这样子根据tag来取消请求的，当然如果请求已经开始回调无法结束，正在上传或者下载时会产生IOException\n````java\n        //隊列中的call\n        for (Call call : getInstance().dispatcher().queuedCalls()) {\n            if (object.equals(call.request().tag())) {\n                call.cancel();\n            }\n        }\n        //運行中的call\n        for (Call call : getInstance().dispatcher().runningCalls()) {\n            if (object.equals(call.request().tag())) {\n                call.cancel();\n            }\n        }\n````\n最后\n好像没什么了 ，感觉有帮助的帮忙点个star，辣眼睛了的我也没办法\n\n![啦啦啦啦.gif](http://upload-images.jianshu.io/upload_images/1905930-18b22cdf6f936fe5.gif?imageMogr2/auto-orient/strip)\n","source":"_posts/okhttp.md","raw":"---\ntitle: OkHttp3-从零开始的详细使用到简单封装\ndate: 2017-03-21 10:24:15\ncategories:\n- library\ntags:\n- okhttp\n- library\n---\n# [Github地址---MyOkhttpUtils](https://github.com/jlcclidong/MyOkhttpUtils)\n## 初衷\n对于okhttp3出来以后，使用的都是网上封装好的库，为了更好地理解封装的内容，对okhttp本身的熟悉，肯定学一下子了，网上okhttp的方法很多，但是网上okhttp3方面的东西并不多，很多都过时的方法，总结了一下，讲了一下okhttp3的基本使用方法，在下边要耐心才会 。\n封装了一下基本大家使用得到的功能，想用的话可以直接拿去用，想扩展的话也可以直接下载扩展，代码比较少，不了解okhttp的可以下载学习一下，大神门口右走吧。\n封装逻辑和使用的好多方法找不到，借鉴了两位大神的逻辑，相当于简化版本吧，封装的比较全面的可以参照\n[hongyangAndroid / okhttputils](https://github.com/hongyangAndroid/okhttputils)\n[jeasonlzy/okhttp-OkGo](https://github.com/jeasonlzy/okhttp-OkGo)\n## 本文中库的简单使用介绍\n* 在project中添加依赖\n````java\n  allprojects {\n\t\trepositories {\n\t\t\t...\n\t\t\tmaven { url 'https://jitpack.io' }\n\t\t}\n\t}\n     ````\n* 在app中添加依赖\n````java\n        dependencies {\n  \t        compile 'com.github.jlcclidong:MyOkhttpUtils:0.10'\n\t    }\n      ````\n<!-- more -->\n* 在本项目中使用okhttp的方法步骤\n在application中初始化，此步骤必须，别忘记在清单文件中注册application否则不能使用\n````java\n       Ok.init(this)\n                .connectTimeout(3000l, TimeUnit.MILLISECONDS)\n                .readTimeout(3000l, TimeUnit.MILLISECONDS)\n                .commonParams(\"haha\",\"1\") //添加公共参数\n                .commonHeader(\"nihao\",\"1\")  //添加公共头\n                //這兩個攔截器衹能選用一個\n                //.AppInterceptor(\"eason\", new LogInterceptor())   //应用拦截器\n                .NetWorkInterceptor(\"eason\",new LogInterceptor()) //网络拦截器 将重定向等的request response页拦截打印  \n                .CookieJar(new PersistentCookieJar(new SetCookieCache(), new SharedPrefsCookiePersistor(App.this)))\n                .build();\n````\n* 请求  其中callback有三种类型 fail都会返回Exception，不管是本身网络问题还是404等问题都会返回此回调，可以通过Exception类型进行自行处理\n  * callback有三种类型\n    * JsonCallback<T> 传入类自动转换成bean，但是并未处理超大Json文件OOM 可自行通过流的方式来处理解析\n    * CallBack 返回String\n    * FileCallBack(String dir, String filename) 其中传入文件夹和文件名来保存 返回进度(0-100)\n * get\n ````java\n        Ok.get().url(\"http://lab.zuimeia.com/wallpaper/category/1/\")\n                .param(\"page_size\", 1)\n                .build()\n                .call(new JsonCallBack<Bean>() {  //傳入實體類\n                    @Override\n                    public void fail(Exception e) {\n\n                    }\n\n                    @Override\n                    public void success(Bean bean) {\n                        mTv.setText(bean.getData().getBase_url());\n                    }\n                });\n                ````\n * post  支持键值对和文件表单上传\n ````java\n        Ok.post().url(\"https://www.baidu.com\")\n                .param(\"test\", 1)\n                .file(\"test\", new File(\"\"))\n                .build()\n                .call(new CallBack() {\n                    @Override\n                    public void fail(Exception e) {\n\n                    }\n\n                    @Override\n                    public void success(String response) {\n                        mTv.setText(response);\n                    }\n                });\n                ````\n  * postjson  支持postJSON\n```java\n      Ok.postJson().url(\"\")\n          .json(\"\")\n          .build()\n          .call(new CallBack() {\n                @Override\n                  public void fail(Exception e) {\n\n                }\n\n                @Override\n                public void success(String response) {\n\n                }\n            });\n   ```\n  * download 文件下载只做到最基本的下载,断点续传和暂停下载暂未做，后续会追加\n  ```java\n         Ok.download().url(\"http://static.oschina.net/uploads/space/2015/0629/170157_rxDh_1767531.png\")\n                .build()\n                .tag(MainActivity.this)\n                .call(new FileCallBack(getCacheDir().getAbsolutePath(), \"github.png\") {\n                    @Override\n                    public void progress(int progress) {\n                        mTv.setText(progress + \"\");\n                    }\n\n                    @Override\n                    public void success(File file) {\n                        mIV.setImageBitmap(BitmapFactory.decodeFile(file.getAbsolutePath()));\n                    }\n\n                    @Override\n                    public void fail(Exception e) {\n\n                    }\n                });\n  ```\n  * 取消\n````java\n         Ok.cancle(MainActivity.this);\n         ````\n * 同时支持PostJson() 和 PostFile()两种方法\n* 其中日志打印时使用了格式化JsonFormat工具类\n* 请求时自动添加了 Accept-Language 和 User-Agent\n* 简单封装没有太多的代码，可以自行下载扩展\n## okhttp本身的基本使用\n* 初始化一个全局的okhttpclient\n````java\n         OkHttpClient okHttpClient = new OkHttpClient.Builder()\n                .connectTimeout(3000l, TimeUnit.MILLISECONDS)\n                .readTimeout(3000l, TimeUnit.MILLISECONDS)\n                .addInterceptor( new LogInterceptor())\n                .cookieJar(...)\n                .build();\n                ````\n当然初始化的方法有很多这里只是列出常用的方法，okhttp建议全局使用同一个\n* 为了更好的理解get，post方法，我们可以写一个interceptor来监听request和response，实现这个类不可以出现问题否则是无法进行正常请求的\n可以在此处修改request和response的参数添加缓存设置等，可自行添加\n主要方法有这样几个，必须重写的方法\n````java\n       @Override\n        public Response intercept(Chain chain) throws IOException {\n          Request request = chain.request();\n          logForRequest(request);\n          return logForResponse(response, time);\n        }\n        ````\n打印request没有什么特别注意的地方\n````java\n      private void logForRequest(Request request) {\n        try {\n            Log.e(\"============request start===============\");\n            Log.e(\"url:\" + request.url());\n            Log.e(\"method:\" + request.method());\n            if (request.headers() != null && request.headers().size() > 0){\n                Headers headers = request.headers();\n                for (int i = 0; i < headers.size(); i++) {\n                    Log.e(\"headers\"+headers.name(i)+\"---\"+headers.value(i));\n                }\n            }\n            Log.e(\"============request end=================\");\n        } catch (Exception e) {\n            Log.e(\"log request has something worng!!\");\n        }\n        }\n        ````\n打印response时注意，如果添加了interceptor则不能直接调用response.body().string()方法，调用此方法会直接close掉这个response，在callback中得不到正确的结果会报异常，只能使用response.newbuilder() 方法来使用新创建的response调用，eg\n````java\n        private Response logForResponse(Response response, long time) {\n        try {\n            Log.e(\"============response start==============\");\n            //response.body().string()只能调用一次 body()就会关掉\n            //每次使用前都clone一份使用保证原来的body没有被关掉\n            Response copy = response.newBuilder().build();\n            Log.e(\"responseurl:\" + copy.request().url());\n            Log.e(\"response code:\" + copy.code());\n            Log.e(\"total time:\" + time);\n            if (!TextUtils.isEmpty(copy.message()))\n                Log.e(\"message:\" + copy.message());\n                if (copy.headers() != null && copy.headers().size() > 0) {\n                    Headers headers = copy.headers();\n                    for (int i = 0; i < headers.size(); i++) {\n                        Log.e(\"\\t\" + headers.name(i) + \": \" + headers.value(i));\n                    }\n                }\n            Log.e(\"============response end================\");\n            ResponseBody body = copy.body();\n            if (body != null) {\n                MediaType mediaType = body.contentType();\n                if (mediaType != null) {\n                    Log.e(\"============response body===============\");\n                    Log.e(\"Content-type:\" + mediaType.toString());\n                    if (isText(mediaType)) {\n                        String content = body.string();\n                        Log.e(JsonFormat.formatJson(content));\n                        Log.e(\"============response body===============\");\n                        return response.newBuilder().body(ResponseBody.create(mediaType, content)).build();\n                    } else {\n                        Log.e(\" maybe response content too large too print , ignored!\");\n                    }\n                }\n            } else {\n                Log.e(\" body is null , ignored!\");\n            }\n        } catch (Exception e) {\n            Log.e(\"log response has something worng!!\");\n        }\n        return response;\n      }\n      ````\n这样每次调用http请求是就可以详细监听其中的内容了\n全部具体内容详见github代码\n* okhttp请求就是构建一个request加入到okhttpclicent中就可以了\n  这里实例只讲okhttp的异步请求，当然同步只是将enqueue()方法替换成execute()\n注意这个回调的onFailure只是回调了本身请求的一些失败回调，例如超时IOException....当成功返回之后需要在onResponse中判断response.code()来判断是否是200，404，500之类的统一处理\n  * get\n  ```java\n        Request request = new Request.Builder().get()\n                .url(\"https://www.baidu.com\")\n                .header(\"test\",\"fds\")\n                .build();\n        okHttpClient.newCall(request).enqueue(new Callback() {\n            @Override\n            public void onFailure(Call call, IOException e) {\n\n            }\n\n            @Override\n            public void onResponse(Call call, Response response) throws IOException {\n\n            }\n        });\n        ```\n * post\n只需要替换request post中需要传一个requestBody，不同的post请求，需要不同的请求体，当然只是方便我们不同的需求。\n基本的键值对上传在下面贴出，使用FormBody即可创建\n键值对加上文件上传则需要MultipartBody来创建\n而普通的上传json，上传文件可以直接调用RequestBody的静态方法来创建\n````java\n        Request request = new Request.Builder().post(new FormBody.Builder().add(\"sdf\",\"Sdfa\").build())\n                .url(\"https://www.baidu.com\")\n                .header(\"test\",\"fds\")\n                .build();\n                ````\n其他方法详见本库中request中做的封装，都包含入内了\n* https的影响，okhttps本身不添加任何代码就可以支持okhttps中公认的证书，类似于百度之类的，当时像12306这种只能手动添加了，当然也可以默认信任所有证书，具体由于本人公司并不需要就没写,推荐[ [Android Https相关完全解析 当OkHttp遇到Https](http://blog.csdn.net/lmj623565791/article/details/48129405)]\n* cookie持久化网上有很多方法，本库采用的是[franmontiel / PersistentCookieJar](https://github.com/franmontiel/PersistentCookieJar)\n* okhttp3取消请求\n这个是比较坑的网上传统的okhttpclicent.cancle(tag)方法发现没有了，只可以通过call.cancle来取消请求，后来发现是这样子根据tag来取消请求的，当然如果请求已经开始回调无法结束，正在上传或者下载时会产生IOException\n````java\n        //隊列中的call\n        for (Call call : getInstance().dispatcher().queuedCalls()) {\n            if (object.equals(call.request().tag())) {\n                call.cancel();\n            }\n        }\n        //運行中的call\n        for (Call call : getInstance().dispatcher().runningCalls()) {\n            if (object.equals(call.request().tag())) {\n                call.cancel();\n            }\n        }\n````\n最后\n好像没什么了 ，感觉有帮助的帮忙点个star，辣眼睛了的我也没办法\n\n![啦啦啦啦.gif](http://upload-images.jianshu.io/upload_images/1905930-18b22cdf6f936fe5.gif?imageMogr2/auto-orient/strip)\n","slug":"okhttp","published":1,"updated":"2017-04-19T05:53:35.013Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4qaebd5000u2oq9a2t6yg4f","content":"<h1 id=\"Github地址—MyOkhttpUtils\"><a href=\"#Github地址—MyOkhttpUtils\" class=\"headerlink\" title=\"Github地址—MyOkhttpUtils\"></a><a href=\"https://github.com/jlcclidong/MyOkhttpUtils\" target=\"_blank\" rel=\"external\">Github地址—MyOkhttpUtils</a></h1><h2 id=\"初衷\"><a href=\"#初衷\" class=\"headerlink\" title=\"初衷\"></a>初衷</h2><p>对于okhttp3出来以后，使用的都是网上封装好的库，为了更好地理解封装的内容，对okhttp本身的熟悉，肯定学一下子了，网上okhttp的方法很多，但是网上okhttp3方面的东西并不多，很多都过时的方法，总结了一下，讲了一下okhttp3的基本使用方法，在下边要耐心才会 。<br>封装了一下基本大家使用得到的功能，想用的话可以直接拿去用，想扩展的话也可以直接下载扩展，代码比较少，不了解okhttp的可以下载学习一下，大神门口右走吧。<br>封装逻辑和使用的好多方法找不到，借鉴了两位大神的逻辑，相当于简化版本吧，封装的比较全面的可以参照<br><a href=\"https://github.com/hongyangAndroid/okhttputils\" target=\"_blank\" rel=\"external\">hongyangAndroid / okhttputils</a><br><a href=\"https://github.com/jeasonlzy/okhttp-OkGo\" target=\"_blank\" rel=\"external\">jeasonlzy/okhttp-OkGo</a></p>\n<h2 id=\"本文中库的简单使用介绍\"><a href=\"#本文中库的简单使用介绍\" class=\"headerlink\" title=\"本文中库的简单使用介绍\"></a>本文中库的简单使用介绍</h2><ul>\n<li><p>在project中添加依赖</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"> allprojects &#123;</div><div class=\"line\">\trepositories &#123;</div><div class=\"line\">\t\t...</div><div class=\"line\">\t\tmaven &#123; url <span class=\"string\">'https://jitpack.io'</span> &#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>在app中添加依赖</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">   dependencies &#123;</div><div class=\"line\">      compile <span class=\"string\">'com.github.jlcclidong:MyOkhttpUtils:0.10'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<a id=\"more\"></a>\n<ul>\n<li><p>在本项目中使用okhttp的方法步骤<br>在application中初始化，此步骤必须，别忘记在清单文件中注册application否则不能使用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">Ok.init(<span class=\"keyword\">this</span>)</div><div class=\"line\">         .connectTimeout(<span class=\"number\">3000l</span>, TimeUnit.MILLISECONDS)</div><div class=\"line\">         .readTimeout(<span class=\"number\">3000l</span>, TimeUnit.MILLISECONDS)</div><div class=\"line\">         .commonParams(<span class=\"string\">\"haha\"</span>,<span class=\"string\">\"1\"</span>) <span class=\"comment\">//添加公共参数</span></div><div class=\"line\">         .commonHeader(<span class=\"string\">\"nihao\"</span>,<span class=\"string\">\"1\"</span>)  <span class=\"comment\">//添加公共头</span></div><div class=\"line\">         <span class=\"comment\">//這兩個攔截器衹能選用一個</span></div><div class=\"line\">         <span class=\"comment\">//.AppInterceptor(\"eason\", new LogInterceptor())   //应用拦截器</span></div><div class=\"line\">         .NetWorkInterceptor(<span class=\"string\">\"eason\"</span>,<span class=\"keyword\">new</span> LogInterceptor()) <span class=\"comment\">//网络拦截器 将重定向等的request response页拦截打印  </span></div><div class=\"line\">         .CookieJar(<span class=\"keyword\">new</span> PersistentCookieJar(<span class=\"keyword\">new</span> SetCookieCache(), <span class=\"keyword\">new</span> SharedPrefsCookiePersistor(App.<span class=\"keyword\">this</span>)))</div><div class=\"line\">         .build();</div></pre></td></tr></table></figure>\n</li>\n<li><p>请求  其中callback有三种类型 fail都会返回Exception，不管是本身网络问题还是404等问题都会返回此回调，可以通过Exception类型进行自行处理</p>\n<ul>\n<li>callback有三种类型<ul>\n<li>JsonCallback<t> 传入类自动转换成bean，但是并未处理超大Json文件OOM 可自行通过流的方式来处理解析</t></li>\n<li>CallBack 返回String</li>\n<li>FileCallBack(String dir, String filename) 其中传入文件夹和文件名来保存 返回进度(0-100)</li>\n</ul>\n</li>\n<li><p>get</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">Ok.get().url(<span class=\"string\">\"http://lab.zuimeia.com/wallpaper/category/1/\"</span>)</div><div class=\"line\">        .param(<span class=\"string\">\"page_size\"</span>, <span class=\"number\">1</span>)</div><div class=\"line\">        .build()</div><div class=\"line\">        .call(<span class=\"keyword\">new</span> JsonCallBack&lt;Bean&gt;() &#123;  <span class=\"comment\">//傳入實體類</span></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">fail</span><span class=\"params\">(Exception e)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">success</span><span class=\"params\">(Bean bean)</span> </span>&#123;</div><div class=\"line\">                mTv.setText(bean.getData().getBase_url());</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div></pre></td></tr></table></figure>\n</li>\n<li><p>post  支持键值对和文件表单上传</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">Ok.post().url(<span class=\"string\">\"https://www.baidu.com\"</span>)</div><div class=\"line\">        .param(<span class=\"string\">\"test\"</span>, <span class=\"number\">1</span>)</div><div class=\"line\">        .file(<span class=\"string\">\"test\"</span>, <span class=\"keyword\">new</span> File(<span class=\"string\">\"\"</span>))</div><div class=\"line\">        .build()</div><div class=\"line\">        .call(<span class=\"keyword\">new</span> CallBack() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">fail</span><span class=\"params\">(Exception e)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">success</span><span class=\"params\">(String response)</span> </span>&#123;</div><div class=\"line\">                mTv.setText(response);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div></pre></td></tr></table></figure>\n</li>\n<li><p>postjson  支持postJSON</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">Ok.postJson().url(<span class=\"string\">\"\"</span>)</div><div class=\"line\">    .json(<span class=\"string\">\"\"</span>)</div><div class=\"line\">    .build()</div><div class=\"line\">    .call(<span class=\"keyword\">new</span> CallBack() &#123;</div><div class=\"line\">          <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">fail</span><span class=\"params\">(Exception e)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">          &#125;</div><div class=\"line\"></div><div class=\"line\">          <span class=\"meta\">@Override</span></div><div class=\"line\">          <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">success</span><span class=\"params\">(String response)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;);</div></pre></td></tr></table></figure>\n</li>\n<li><p>download 文件下载只做到最基本的下载,断点续传和暂停下载暂未做，后续会追加</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">Ok.download().url(<span class=\"string\">\"http://static.oschina.net/uploads/space/2015/0629/170157_rxDh_1767531.png\"</span>)</div><div class=\"line\">       .build()</div><div class=\"line\">       .tag(MainActivity.<span class=\"keyword\">this</span>)</div><div class=\"line\">       .call(<span class=\"keyword\">new</span> FileCallBack(getCacheDir().getAbsolutePath(), <span class=\"string\">\"github.png\"</span>) &#123;</div><div class=\"line\">           <span class=\"meta\">@Override</span></div><div class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">progress</span><span class=\"params\">(<span class=\"keyword\">int</span> progress)</span> </span>&#123;</div><div class=\"line\">               mTv.setText(progress + <span class=\"string\">\"\"</span>);</div><div class=\"line\">           &#125;</div><div class=\"line\"></div><div class=\"line\">           <span class=\"meta\">@Override</span></div><div class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">success</span><span class=\"params\">(File file)</span> </span>&#123;</div><div class=\"line\">               mIV.setImageBitmap(BitmapFactory.decodeFile(file.getAbsolutePath()));</div><div class=\"line\">           &#125;</div><div class=\"line\"></div><div class=\"line\">           <span class=\"meta\">@Override</span></div><div class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">fail</span><span class=\"params\">(Exception e)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;);</div></pre></td></tr></table></figure>\n</li>\n<li><p>取消</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Ok.cancle(MainActivity.<span class=\"keyword\">this</span>);</div></pre></td></tr></table></figure>\n</li>\n<li><p>同时支持PostJson() 和 PostFile()两种方法</p>\n</li>\n</ul>\n</li>\n<li>其中日志打印时使用了格式化JsonFormat工具类</li>\n<li>请求时自动添加了 Accept-Language 和 User-Agent</li>\n<li>简单封装没有太多的代码，可以自行下载扩展<h2 id=\"okhttp本身的基本使用\"><a href=\"#okhttp本身的基本使用\" class=\"headerlink\" title=\"okhttp本身的基本使用\"></a>okhttp本身的基本使用</h2></li>\n<li>初始化一个全局的okhttpclient<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">OkHttpClient okHttpClient = <span class=\"keyword\">new</span> OkHttpClient.Builder()</div><div class=\"line\">       .connectTimeout(<span class=\"number\">3000l</span>, TimeUnit.MILLISECONDS)</div><div class=\"line\">       .readTimeout(<span class=\"number\">3000l</span>, TimeUnit.MILLISECONDS)</div><div class=\"line\">       .addInterceptor( <span class=\"keyword\">new</span> LogInterceptor())</div><div class=\"line\">       .cookieJar(...)</div><div class=\"line\">       .build();</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>当然初始化的方法有很多这里只是列出常用的方法，okhttp建议全局使用同一个</p>\n<ul>\n<li>为了更好的理解get，post方法，我们可以写一个interceptor来监听request和response，实现这个类不可以出现问题否则是无法进行正常请求的<br>可以在此处修改request和response的参数添加缓存设置等，可自行添加<br>主要方法有这样几个，必须重写的方法<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> Response <span class=\"title\">intercept</span><span class=\"params\">(Chain chain)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">   Request request = chain.request();</div><div class=\"line\">   logForRequest(request);</div><div class=\"line\">   <span class=\"keyword\">return</span> logForResponse(response, time);</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>打印request没有什么特别注意的地方<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">logForRequest</span><span class=\"params\">(Request request)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">      Log.e(<span class=\"string\">\"============request start===============\"</span>);</div><div class=\"line\">      Log.e(<span class=\"string\">\"url:\"</span> + request.url());</div><div class=\"line\">      Log.e(<span class=\"string\">\"method:\"</span> + request.method());</div><div class=\"line\">      <span class=\"keyword\">if</span> (request.headers() != <span class=\"keyword\">null</span> &amp;&amp; request.headers().size() &gt; <span class=\"number\">0</span>)&#123;</div><div class=\"line\">          Headers headers = request.headers();</div><div class=\"line\">          <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; headers.size(); i++) &#123;</div><div class=\"line\">              Log.e(<span class=\"string\">\"headers\"</span>+headers.name(i)+<span class=\"string\">\"---\"</span>+headers.value(i));</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">      Log.e(<span class=\"string\">\"============request end=================\"</span>);</div><div class=\"line\">  &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">      Log.e(<span class=\"string\">\"log request has something worng!!\"</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>打印response时注意，如果添加了interceptor则不能直接调用response.body().string()方法，调用此方法会直接close掉这个response，在callback中得不到正确的结果会报异常，只能使用response.newbuilder() 方法来使用新创建的response调用，eg<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> Response <span class=\"title\">logForResponse</span><span class=\"params\">(Response response, <span class=\"keyword\">long</span> time)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">      Log.e(<span class=\"string\">\"============response start==============\"</span>);</div><div class=\"line\">      <span class=\"comment\">//response.body().string()只能调用一次 body()就会关掉</span></div><div class=\"line\">      <span class=\"comment\">//每次使用前都clone一份使用保证原来的body没有被关掉</span></div><div class=\"line\">      Response copy = response.newBuilder().build();</div><div class=\"line\">      Log.e(<span class=\"string\">\"responseurl:\"</span> + copy.request().url());</div><div class=\"line\">      Log.e(<span class=\"string\">\"response code:\"</span> + copy.code());</div><div class=\"line\">      Log.e(<span class=\"string\">\"total time:\"</span> + time);</div><div class=\"line\">      <span class=\"keyword\">if</span> (!TextUtils.isEmpty(copy.message()))</div><div class=\"line\">          Log.e(<span class=\"string\">\"message:\"</span> + copy.message());</div><div class=\"line\">          <span class=\"keyword\">if</span> (copy.headers() != <span class=\"keyword\">null</span> &amp;&amp; copy.headers().size() &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">              Headers headers = copy.headers();</div><div class=\"line\">              <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; headers.size(); i++) &#123;</div><div class=\"line\">                  Log.e(<span class=\"string\">\"\\t\"</span> + headers.name(i) + <span class=\"string\">\": \"</span> + headers.value(i));</div><div class=\"line\">              &#125;</div><div class=\"line\">          &#125;</div><div class=\"line\">      Log.e(<span class=\"string\">\"============response end================\"</span>);</div><div class=\"line\">      ResponseBody body = copy.body();</div><div class=\"line\">      <span class=\"keyword\">if</span> (body != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">          MediaType mediaType = body.contentType();</div><div class=\"line\">          <span class=\"keyword\">if</span> (mediaType != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">              Log.e(<span class=\"string\">\"============response body===============\"</span>);</div><div class=\"line\">              Log.e(<span class=\"string\">\"Content-type:\"</span> + mediaType.toString());</div><div class=\"line\">              <span class=\"keyword\">if</span> (isText(mediaType)) &#123;</div><div class=\"line\">                  String content = body.string();</div><div class=\"line\">                  Log.e(JsonFormat.formatJson(content));</div><div class=\"line\">                  Log.e(<span class=\"string\">\"============response body===============\"</span>);</div><div class=\"line\">                  <span class=\"keyword\">return</span> response.newBuilder().body(ResponseBody.create(mediaType, content)).build();</div><div class=\"line\">              &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                  Log.e(<span class=\"string\">\" maybe response content too large too print , ignored!\"</span>);</div><div class=\"line\">              &#125;</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">          Log.e(<span class=\"string\">\" body is null , ignored!\"</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">      Log.e(<span class=\"string\">\"log response has something worng!!\"</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> response;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这样每次调用http请求是就可以详细监听其中的内容了<br>全部具体内容详见github代码</p>\n<ul>\n<li><p>okhttp请求就是构建一个request加入到okhttpclicent中就可以了<br>这里实例只讲okhttp的异步请求，当然同步只是将enqueue()方法替换成execute()<br>注意这个回调的onFailure只是回调了本身请求的一些失败回调，例如超时IOException….当成功返回之后需要在onResponse中判断response.code()来判断是否是200，404，500之类的统一处理</p>\n<ul>\n<li><p>get</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">Request request = <span class=\"keyword\">new</span> Request.Builder().get()</div><div class=\"line\">        .url(<span class=\"string\">\"https://www.baidu.com\"</span>)</div><div class=\"line\">        .header(<span class=\"string\">\"test\"</span>,<span class=\"string\">\"fds\"</span>)</div><div class=\"line\">        .build();</div><div class=\"line\">okHttpClient.newCall(request).enqueue(<span class=\"keyword\">new</span> Callback() &#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onFailure</span><span class=\"params\">(Call call, IOException e)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onResponse</span><span class=\"params\">(Call call, Response response)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n<li><p>post<br>只需要替换request post中需要传一个requestBody，不同的post请求，需要不同的请求体，当然只是方便我们不同的需求。<br>基本的键值对上传在下面贴出，使用FormBody即可创建<br>键值对加上文件上传则需要MultipartBody来创建<br>而普通的上传json，上传文件可以直接调用RequestBody的静态方法来创建</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Request request = <span class=\"keyword\">new</span> Request.Builder().post(<span class=\"keyword\">new</span> FormBody.Builder().add(<span class=\"string\">\"sdf\"</span>,<span class=\"string\">\"Sdfa\"</span>).build())</div><div class=\"line\">        .url(<span class=\"string\">\"https://www.baidu.com\"</span>)</div><div class=\"line\">        .header(<span class=\"string\">\"test\"</span>,<span class=\"string\">\"fds\"</span>)</div><div class=\"line\">        .build();</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<p>其他方法详见本库中request中做的封装，都包含入内了</p>\n<ul>\n<li>https的影响，okhttps本身不添加任何代码就可以支持okhttps中公认的证书，类似于百度之类的，当时像12306这种只能手动添加了，当然也可以默认信任所有证书，具体由于本人公司并不需要就没写,推荐[ <a href=\"http://blog.csdn.net/lmj623565791/article/details/48129405\" target=\"_blank\" rel=\"external\">Android Https相关完全解析 当OkHttp遇到Https</a>]</li>\n<li>cookie持久化网上有很多方法，本库采用的是<a href=\"https://github.com/franmontiel/PersistentCookieJar\" target=\"_blank\" rel=\"external\">franmontiel / PersistentCookieJar</a></li>\n<li>okhttp3取消请求<br>这个是比较坑的网上传统的okhttpclicent.cancle(tag)方法发现没有了，只可以通过call.cancle来取消请求，后来发现是这样子根据tag来取消请求的，当然如果请求已经开始回调无法结束，正在上传或者下载时会产生IOException<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//隊列中的call</span></div><div class=\"line\"><span class=\"keyword\">for</span> (Call call : getInstance().dispatcher().queuedCalls()) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (object.equals(call.request().tag())) &#123;</div><div class=\"line\">        call.cancel();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//運行中的call</span></div><div class=\"line\"><span class=\"keyword\">for</span> (Call call : getInstance().dispatcher().runningCalls()) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (object.equals(call.request().tag())) &#123;</div><div class=\"line\">        call.cancel();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>最后<br>好像没什么了 ，感觉有帮助的帮忙点个star，辣眼睛了的我也没办法</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1905930-18b22cdf6f936fe5.gif?imageMogr2/auto-orient/strip\" alt=\"啦啦啦啦.gif\"></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"Github地址—MyOkhttpUtils\"><a href=\"#Github地址—MyOkhttpUtils\" class=\"headerlink\" title=\"Github地址—MyOkhttpUtils\"></a><a href=\"https://github.com/jlcclidong/MyOkhttpUtils\">Github地址—MyOkhttpUtils</a></h1><h2 id=\"初衷\"><a href=\"#初衷\" class=\"headerlink\" title=\"初衷\"></a>初衷</h2><p>对于okhttp3出来以后，使用的都是网上封装好的库，为了更好地理解封装的内容，对okhttp本身的熟悉，肯定学一下子了，网上okhttp的方法很多，但是网上okhttp3方面的东西并不多，很多都过时的方法，总结了一下，讲了一下okhttp3的基本使用方法，在下边要耐心才会 。<br>封装了一下基本大家使用得到的功能，想用的话可以直接拿去用，想扩展的话也可以直接下载扩展，代码比较少，不了解okhttp的可以下载学习一下，大神门口右走吧。<br>封装逻辑和使用的好多方法找不到，借鉴了两位大神的逻辑，相当于简化版本吧，封装的比较全面的可以参照<br><a href=\"https://github.com/hongyangAndroid/okhttputils\">hongyangAndroid / okhttputils</a><br><a href=\"https://github.com/jeasonlzy/okhttp-OkGo\">jeasonlzy/okhttp-OkGo</a></p>\n<h2 id=\"本文中库的简单使用介绍\"><a href=\"#本文中库的简单使用介绍\" class=\"headerlink\" title=\"本文中库的简单使用介绍\"></a>本文中库的简单使用介绍</h2><ul>\n<li><p>在project中添加依赖</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"> allprojects &#123;</div><div class=\"line\">\trepositories &#123;</div><div class=\"line\">\t\t...</div><div class=\"line\">\t\tmaven &#123; url <span class=\"string\">'https://jitpack.io'</span> &#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>在app中添加依赖</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">   dependencies &#123;</div><div class=\"line\">      compile <span class=\"string\">'com.github.jlcclidong:MyOkhttpUtils:0.10'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>","more":"<ul>\n<li><p>在本项目中使用okhttp的方法步骤<br>在application中初始化，此步骤必须，别忘记在清单文件中注册application否则不能使用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">Ok.init(<span class=\"keyword\">this</span>)</div><div class=\"line\">         .connectTimeout(<span class=\"number\">3000l</span>, TimeUnit.MILLISECONDS)</div><div class=\"line\">         .readTimeout(<span class=\"number\">3000l</span>, TimeUnit.MILLISECONDS)</div><div class=\"line\">         .commonParams(<span class=\"string\">\"haha\"</span>,<span class=\"string\">\"1\"</span>) <span class=\"comment\">//添加公共参数</span></div><div class=\"line\">         .commonHeader(<span class=\"string\">\"nihao\"</span>,<span class=\"string\">\"1\"</span>)  <span class=\"comment\">//添加公共头</span></div><div class=\"line\">         <span class=\"comment\">//這兩個攔截器衹能選用一個</span></div><div class=\"line\">         <span class=\"comment\">//.AppInterceptor(\"eason\", new LogInterceptor())   //应用拦截器</span></div><div class=\"line\">         .NetWorkInterceptor(<span class=\"string\">\"eason\"</span>,<span class=\"keyword\">new</span> LogInterceptor()) <span class=\"comment\">//网络拦截器 将重定向等的request response页拦截打印  </span></div><div class=\"line\">         .CookieJar(<span class=\"keyword\">new</span> PersistentCookieJar(<span class=\"keyword\">new</span> SetCookieCache(), <span class=\"keyword\">new</span> SharedPrefsCookiePersistor(App.<span class=\"keyword\">this</span>)))</div><div class=\"line\">         .build();</div></pre></td></tr></table></figure>\n</li>\n<li><p>请求  其中callback有三种类型 fail都会返回Exception，不管是本身网络问题还是404等问题都会返回此回调，可以通过Exception类型进行自行处理</p>\n<ul>\n<li>callback有三种类型<ul>\n<li>JsonCallback<T> 传入类自动转换成bean，但是并未处理超大Json文件OOM 可自行通过流的方式来处理解析</li>\n<li>CallBack 返回String</li>\n<li>FileCallBack(String dir, String filename) 其中传入文件夹和文件名来保存 返回进度(0-100)</li>\n</ul>\n</li>\n<li><p>get</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">Ok.get().url(<span class=\"string\">\"http://lab.zuimeia.com/wallpaper/category/1/\"</span>)</div><div class=\"line\">        .param(<span class=\"string\">\"page_size\"</span>, <span class=\"number\">1</span>)</div><div class=\"line\">        .build()</div><div class=\"line\">        .call(<span class=\"keyword\">new</span> JsonCallBack&lt;Bean&gt;() &#123;  <span class=\"comment\">//傳入實體類</span></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">fail</span><span class=\"params\">(Exception e)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">success</span><span class=\"params\">(Bean bean)</span> </span>&#123;</div><div class=\"line\">                mTv.setText(bean.getData().getBase_url());</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div></pre></td></tr></table></figure>\n</li>\n<li><p>post  支持键值对和文件表单上传</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">Ok.post().url(<span class=\"string\">\"https://www.baidu.com\"</span>)</div><div class=\"line\">        .param(<span class=\"string\">\"test\"</span>, <span class=\"number\">1</span>)</div><div class=\"line\">        .file(<span class=\"string\">\"test\"</span>, <span class=\"keyword\">new</span> File(<span class=\"string\">\"\"</span>))</div><div class=\"line\">        .build()</div><div class=\"line\">        .call(<span class=\"keyword\">new</span> CallBack() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">fail</span><span class=\"params\">(Exception e)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">success</span><span class=\"params\">(String response)</span> </span>&#123;</div><div class=\"line\">                mTv.setText(response);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div></pre></td></tr></table></figure>\n</li>\n<li><p>postjson  支持postJSON</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">Ok.postJson().url(<span class=\"string\">\"\"</span>)</div><div class=\"line\">    .json(<span class=\"string\">\"\"</span>)</div><div class=\"line\">    .build()</div><div class=\"line\">    .call(<span class=\"keyword\">new</span> CallBack() &#123;</div><div class=\"line\">          <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">fail</span><span class=\"params\">(Exception e)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">          &#125;</div><div class=\"line\"></div><div class=\"line\">          <span class=\"meta\">@Override</span></div><div class=\"line\">          <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">success</span><span class=\"params\">(String response)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;);</div></pre></td></tr></table></figure>\n</li>\n<li><p>download 文件下载只做到最基本的下载,断点续传和暂停下载暂未做，后续会追加</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">Ok.download().url(<span class=\"string\">\"http://static.oschina.net/uploads/space/2015/0629/170157_rxDh_1767531.png\"</span>)</div><div class=\"line\">       .build()</div><div class=\"line\">       .tag(MainActivity.<span class=\"keyword\">this</span>)</div><div class=\"line\">       .call(<span class=\"keyword\">new</span> FileCallBack(getCacheDir().getAbsolutePath(), <span class=\"string\">\"github.png\"</span>) &#123;</div><div class=\"line\">           <span class=\"meta\">@Override</span></div><div class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">progress</span><span class=\"params\">(<span class=\"keyword\">int</span> progress)</span> </span>&#123;</div><div class=\"line\">               mTv.setText(progress + <span class=\"string\">\"\"</span>);</div><div class=\"line\">           &#125;</div><div class=\"line\"></div><div class=\"line\">           <span class=\"meta\">@Override</span></div><div class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">success</span><span class=\"params\">(File file)</span> </span>&#123;</div><div class=\"line\">               mIV.setImageBitmap(BitmapFactory.decodeFile(file.getAbsolutePath()));</div><div class=\"line\">           &#125;</div><div class=\"line\"></div><div class=\"line\">           <span class=\"meta\">@Override</span></div><div class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">fail</span><span class=\"params\">(Exception e)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;);</div></pre></td></tr></table></figure>\n</li>\n<li><p>取消</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Ok.cancle(MainActivity.<span class=\"keyword\">this</span>);</div></pre></td></tr></table></figure>\n</li>\n<li><p>同时支持PostJson() 和 PostFile()两种方法</p>\n</li>\n</ul>\n</li>\n<li>其中日志打印时使用了格式化JsonFormat工具类</li>\n<li>请求时自动添加了 Accept-Language 和 User-Agent</li>\n<li>简单封装没有太多的代码，可以自行下载扩展<h2 id=\"okhttp本身的基本使用\"><a href=\"#okhttp本身的基本使用\" class=\"headerlink\" title=\"okhttp本身的基本使用\"></a>okhttp本身的基本使用</h2></li>\n<li>初始化一个全局的okhttpclient<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">OkHttpClient okHttpClient = <span class=\"keyword\">new</span> OkHttpClient.Builder()</div><div class=\"line\">       .connectTimeout(<span class=\"number\">3000l</span>, TimeUnit.MILLISECONDS)</div><div class=\"line\">       .readTimeout(<span class=\"number\">3000l</span>, TimeUnit.MILLISECONDS)</div><div class=\"line\">       .addInterceptor( <span class=\"keyword\">new</span> LogInterceptor())</div><div class=\"line\">       .cookieJar(...)</div><div class=\"line\">       .build();</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>当然初始化的方法有很多这里只是列出常用的方法，okhttp建议全局使用同一个</p>\n<ul>\n<li>为了更好的理解get，post方法，我们可以写一个interceptor来监听request和response，实现这个类不可以出现问题否则是无法进行正常请求的<br>可以在此处修改request和response的参数添加缓存设置等，可自行添加<br>主要方法有这样几个，必须重写的方法<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> Response <span class=\"title\">intercept</span><span class=\"params\">(Chain chain)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">   Request request = chain.request();</div><div class=\"line\">   logForRequest(request);</div><div class=\"line\">   <span class=\"keyword\">return</span> logForResponse(response, time);</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>打印request没有什么特别注意的地方<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">logForRequest</span><span class=\"params\">(Request request)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">      Log.e(<span class=\"string\">\"============request start===============\"</span>);</div><div class=\"line\">      Log.e(<span class=\"string\">\"url:\"</span> + request.url());</div><div class=\"line\">      Log.e(<span class=\"string\">\"method:\"</span> + request.method());</div><div class=\"line\">      <span class=\"keyword\">if</span> (request.headers() != <span class=\"keyword\">null</span> &amp;&amp; request.headers().size() &gt; <span class=\"number\">0</span>)&#123;</div><div class=\"line\">          Headers headers = request.headers();</div><div class=\"line\">          <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; headers.size(); i++) &#123;</div><div class=\"line\">              Log.e(<span class=\"string\">\"headers\"</span>+headers.name(i)+<span class=\"string\">\"---\"</span>+headers.value(i));</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">      Log.e(<span class=\"string\">\"============request end=================\"</span>);</div><div class=\"line\">  &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">      Log.e(<span class=\"string\">\"log request has something worng!!\"</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>打印response时注意，如果添加了interceptor则不能直接调用response.body().string()方法，调用此方法会直接close掉这个response，在callback中得不到正确的结果会报异常，只能使用response.newbuilder() 方法来使用新创建的response调用，eg<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> Response <span class=\"title\">logForResponse</span><span class=\"params\">(Response response, <span class=\"keyword\">long</span> time)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">      Log.e(<span class=\"string\">\"============response start==============\"</span>);</div><div class=\"line\">      <span class=\"comment\">//response.body().string()只能调用一次 body()就会关掉</span></div><div class=\"line\">      <span class=\"comment\">//每次使用前都clone一份使用保证原来的body没有被关掉</span></div><div class=\"line\">      Response copy = response.newBuilder().build();</div><div class=\"line\">      Log.e(<span class=\"string\">\"responseurl:\"</span> + copy.request().url());</div><div class=\"line\">      Log.e(<span class=\"string\">\"response code:\"</span> + copy.code());</div><div class=\"line\">      Log.e(<span class=\"string\">\"total time:\"</span> + time);</div><div class=\"line\">      <span class=\"keyword\">if</span> (!TextUtils.isEmpty(copy.message()))</div><div class=\"line\">          Log.e(<span class=\"string\">\"message:\"</span> + copy.message());</div><div class=\"line\">          <span class=\"keyword\">if</span> (copy.headers() != <span class=\"keyword\">null</span> &amp;&amp; copy.headers().size() &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">              Headers headers = copy.headers();</div><div class=\"line\">              <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; headers.size(); i++) &#123;</div><div class=\"line\">                  Log.e(<span class=\"string\">\"\\t\"</span> + headers.name(i) + <span class=\"string\">\": \"</span> + headers.value(i));</div><div class=\"line\">              &#125;</div><div class=\"line\">          &#125;</div><div class=\"line\">      Log.e(<span class=\"string\">\"============response end================\"</span>);</div><div class=\"line\">      ResponseBody body = copy.body();</div><div class=\"line\">      <span class=\"keyword\">if</span> (body != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">          MediaType mediaType = body.contentType();</div><div class=\"line\">          <span class=\"keyword\">if</span> (mediaType != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">              Log.e(<span class=\"string\">\"============response body===============\"</span>);</div><div class=\"line\">              Log.e(<span class=\"string\">\"Content-type:\"</span> + mediaType.toString());</div><div class=\"line\">              <span class=\"keyword\">if</span> (isText(mediaType)) &#123;</div><div class=\"line\">                  String content = body.string();</div><div class=\"line\">                  Log.e(JsonFormat.formatJson(content));</div><div class=\"line\">                  Log.e(<span class=\"string\">\"============response body===============\"</span>);</div><div class=\"line\">                  <span class=\"keyword\">return</span> response.newBuilder().body(ResponseBody.create(mediaType, content)).build();</div><div class=\"line\">              &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                  Log.e(<span class=\"string\">\" maybe response content too large too print , ignored!\"</span>);</div><div class=\"line\">              &#125;</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">          Log.e(<span class=\"string\">\" body is null , ignored!\"</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">      Log.e(<span class=\"string\">\"log response has something worng!!\"</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> response;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这样每次调用http请求是就可以详细监听其中的内容了<br>全部具体内容详见github代码</p>\n<ul>\n<li><p>okhttp请求就是构建一个request加入到okhttpclicent中就可以了<br>这里实例只讲okhttp的异步请求，当然同步只是将enqueue()方法替换成execute()<br>注意这个回调的onFailure只是回调了本身请求的一些失败回调，例如超时IOException….当成功返回之后需要在onResponse中判断response.code()来判断是否是200，404，500之类的统一处理</p>\n<ul>\n<li><p>get</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">Request request = <span class=\"keyword\">new</span> Request.Builder().get()</div><div class=\"line\">        .url(<span class=\"string\">\"https://www.baidu.com\"</span>)</div><div class=\"line\">        .header(<span class=\"string\">\"test\"</span>,<span class=\"string\">\"fds\"</span>)</div><div class=\"line\">        .build();</div><div class=\"line\">okHttpClient.newCall(request).enqueue(<span class=\"keyword\">new</span> Callback() &#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onFailure</span><span class=\"params\">(Call call, IOException e)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onResponse</span><span class=\"params\">(Call call, Response response)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n<li><p>post<br>只需要替换request post中需要传一个requestBody，不同的post请求，需要不同的请求体，当然只是方便我们不同的需求。<br>基本的键值对上传在下面贴出，使用FormBody即可创建<br>键值对加上文件上传则需要MultipartBody来创建<br>而普通的上传json，上传文件可以直接调用RequestBody的静态方法来创建</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Request request = <span class=\"keyword\">new</span> Request.Builder().post(<span class=\"keyword\">new</span> FormBody.Builder().add(<span class=\"string\">\"sdf\"</span>,<span class=\"string\">\"Sdfa\"</span>).build())</div><div class=\"line\">        .url(<span class=\"string\">\"https://www.baidu.com\"</span>)</div><div class=\"line\">        .header(<span class=\"string\">\"test\"</span>,<span class=\"string\">\"fds\"</span>)</div><div class=\"line\">        .build();</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<p>其他方法详见本库中request中做的封装，都包含入内了</p>\n<ul>\n<li>https的影响，okhttps本身不添加任何代码就可以支持okhttps中公认的证书，类似于百度之类的，当时像12306这种只能手动添加了，当然也可以默认信任所有证书，具体由于本人公司并不需要就没写,推荐[ <a href=\"http://blog.csdn.net/lmj623565791/article/details/48129405\">Android Https相关完全解析 当OkHttp遇到Https</a>]</li>\n<li>cookie持久化网上有很多方法，本库采用的是<a href=\"https://github.com/franmontiel/PersistentCookieJar\">franmontiel / PersistentCookieJar</a></li>\n<li>okhttp3取消请求<br>这个是比较坑的网上传统的okhttpclicent.cancle(tag)方法发现没有了，只可以通过call.cancle来取消请求，后来发现是这样子根据tag来取消请求的，当然如果请求已经开始回调无法结束，正在上传或者下载时会产生IOException<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//隊列中的call</span></div><div class=\"line\"><span class=\"keyword\">for</span> (Call call : getInstance().dispatcher().queuedCalls()) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (object.equals(call.request().tag())) &#123;</div><div class=\"line\">        call.cancel();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//運行中的call</span></div><div class=\"line\"><span class=\"keyword\">for</span> (Call call : getInstance().dispatcher().runningCalls()) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (object.equals(call.request().tag())) &#123;</div><div class=\"line\">        call.cancel();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>最后<br>好像没什么了 ，感觉有帮助的帮忙点个star，辣眼睛了的我也没办法</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1905930-18b22cdf6f936fe5.gif?imageMogr2/auto-orient/strip\" alt=\"啦啦啦啦.gif\"></p>"},{"title":"struts2拦截器","date":"2017-05-11T11:33:14.000Z","_content":"## struts2的工作流程\n\n![struts2的工作方式](http://omy391n59.bkt.clouddn.com/image/struts2/Struts2-Architecture_%E6%96%B0%E7%89%88%E6%9C%AC.png)\n<!-- more -->\n### 在自定义拦截器流程\n如果配置了自定义拦截器会导致struts2本身的拦截器失效 需要加配置\n```xml\n<interceptor-ref name=\"defaultStack\"></interceptor-ref>\n```\n1-2-3-action-result-3-2-1\n#### 自定义拦截器使用方式\n* 新建一个类继承自AbstractInterceptor\n\n```java\n\npublic class MyFirstInterceptor extends AbstractInterceptor {\n\n\tprivate static final long serialVersionUID = 4027957068302300754L;\n\n\t@Override\n\tpublic String intercept(ActionInvocation invocation) throws Exception {\n\t\tSystem.out.println(\"拦截器1\");//进入action之前执行\n\t\tinvocation.invoke(); //代表进行下一步，这里不再拦截\n\t\tSystem.out.println(\"拦截器1返回\");//返回之后执行\n    //可以再此拦截\n    //return “inter”\n\t\treturn null;\n\t}\n\n}\n```\n\n* 配置struts.xml\n\n```xml\n<package name=\"default\" extends=\"json-default\">\n\t\t<interceptors>\n\t\t\t<interceptor name=\"first\" class=\"eason.test.maven.MyFirstInterceptor\"></interceptor>\n\t\t</interceptors>\n\t\t<action name=\"login\" class=\"eason.test.maven.Login\">\n\t\t\t<interceptor-ref name=\"first\"></interceptor-ref>\n\t\t\t<interceptor-ref name=\"second\"></interceptor-ref>\n\t\t\t<result type=\"json\">\n\t\t\t\t<param name=\"root\">data</param>\n\t\t\t</result>\n\t\t\t<result name=\"inter\">/index.jsp</result>\n\t\t</action>\n\t</package>\n```\n#### 为了对拦截进行统一处理 使用MethodFilterInterceptor排除不需要的方法\n\nMethodFilterInterceptor中需要重写doIntercept（）\n\n其中两个属性配置\n* excludeMethods 不要被拦截的方法 注意方法名不是action的命名而是在类中实际的名称（execute..）\n* includeMethods 需要被拦截的方法\n\n#### example配置一个简单登录效果的demo\n* 编写登录的Action\t 给每个登录过的人分配session\n\n```java\npublic class LoginAction extends ActionSupport {\n\n\tprivate static final long serialVersionUID = 5890861426406772110L;\n\tprivate String username;\n\tprivate String password;\n\n\t//getter and setter\n\n\t@Override\n\tpublic String execute() throws Exception {\n\t\tHttpSession session = ServletActionContext.getRequest().getSession();\n\t\tsession.setAttribute(\"username\", username);\n\t\treturn SUCCESS;\n\t}\n}\n```\n* 编写进入登录页的Action 直接结果进入主页\n\n```java\npublic class IndexAction extends ActionSupport{\n\tprivate static final long serialVersionUID = -5982176418945798657L;\n\t@Override\n\tpublic String execute() throws Exception {\n\t\treturn SUCCESS;\n\t}\n}\n```\n* 编写Interceptor在没有登录之前访问其他页面返回登录页面 在没有session之前都返回login\n\n```java\npublic class LoginInterceptor extends MethodFilterInterceptor {\n\n\n\tprivate static final long serialVersionUID = -9195077688930132383L;\n\n\t@Override\n\tprotected String doIntercept(ActionInvocation invocation) throws Exception {\n\n\t\tHttpSession session = ServletActionContext.getRequest().getSession();\n\t\tObject username = session.getAttribute(\"username\");\n\t\tif (username==null) {\n\t\t\treturn \"login\";\n\t\t}\n\t\tString invoke = invocation.invoke();\n\t\treturn invoke;\n\t}\n\n}\n```\n* 编写login.jsp\n\n```html\n<%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\n    pageEncoding=\"UTF-8\"%>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n<title>Login Page</title>\n</head>\n<body>\n\t<form action=\"${pageContext.request.contextPath}/login.action\">\n\t\t用户名<input type=\"text\" name=\"username\"/><br/>\n\t\t密码<input type=\"password\" name=\"password\"/><br/>\n\t\t<input type=\"submit\" value=\"登录\">\n\t</form>\n</body>\n</html>\n```\n* 配置struts.xml\n\n```xml\n<package name=\"s\" extends=\"struts-default\" namespace=\"/\">\n\t<interceptors>\n\t\t\t<interceptor name=\"check\" class=\"com.eason.interceptor.LoginInterceptor\" /> //注册自定义的interceptor\n\t\t\t<interceptor-stack name=\"myInter\">\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//将struts2默认的defaultStack填入\n\t\t\t\t<interceptor-ref name=\"defaultStack\"></interceptor-ref>\n\t\t\t\t<interceptor-ref name=\"check\"></interceptor-ref>\n\t\t\t</interceptor-stack>\n\t\t</interceptors>\n\t\t<default-interceptor-ref name=\"myInter\"></default-interceptor-ref>  //配置myInter为全局的拦截器\n\t\t<global-results>\n\t\t\t<result name=\"login\" type=\"redirect\">/login.jsp</result>     //统一处理结果 返回这个结果的都重定向为login.jsp\n\t\t</global-results>\n\t\t<action name=\"login\" class=\"com.eason.action.LoginAction\">\n\t\t\t<interceptor-ref name=\"myInter\">\n\t\t\t\t<param name=\"check.excludeMethods\">execute</param>     //排除不需要拦截的方法 注意此方法为类中的方法名\n\t\t\t</interceptor-ref>\n\t\t\t<result type=\"redirectAction\">index</result>\n\t\t</action>\n\t\t<action name=\"index\" class=\"com.eason.action.IndexAction\">\n\t\t\t<result type=\"redirect\">/index.jsp</result>\n\t\t</action>\n\t</package>\n```\n### demo\n[demo.zip](http://omy391n59.bkt.clouddn.com/zip/struts2/demologin.rar)\n","source":"_posts/struts2拦截器.md","raw":"---\ntitle: struts2拦截器\ndate: 2017-05-11 19:33:14\ncategories:\n- javaee\ntags:\n- struts2\n- javaee\n---\n## struts2的工作流程\n\n![struts2的工作方式](http://omy391n59.bkt.clouddn.com/image/struts2/Struts2-Architecture_%E6%96%B0%E7%89%88%E6%9C%AC.png)\n<!-- more -->\n### 在自定义拦截器流程\n如果配置了自定义拦截器会导致struts2本身的拦截器失效 需要加配置\n```xml\n<interceptor-ref name=\"defaultStack\"></interceptor-ref>\n```\n1-2-3-action-result-3-2-1\n#### 自定义拦截器使用方式\n* 新建一个类继承自AbstractInterceptor\n\n```java\n\npublic class MyFirstInterceptor extends AbstractInterceptor {\n\n\tprivate static final long serialVersionUID = 4027957068302300754L;\n\n\t@Override\n\tpublic String intercept(ActionInvocation invocation) throws Exception {\n\t\tSystem.out.println(\"拦截器1\");//进入action之前执行\n\t\tinvocation.invoke(); //代表进行下一步，这里不再拦截\n\t\tSystem.out.println(\"拦截器1返回\");//返回之后执行\n    //可以再此拦截\n    //return “inter”\n\t\treturn null;\n\t}\n\n}\n```\n\n* 配置struts.xml\n\n```xml\n<package name=\"default\" extends=\"json-default\">\n\t\t<interceptors>\n\t\t\t<interceptor name=\"first\" class=\"eason.test.maven.MyFirstInterceptor\"></interceptor>\n\t\t</interceptors>\n\t\t<action name=\"login\" class=\"eason.test.maven.Login\">\n\t\t\t<interceptor-ref name=\"first\"></interceptor-ref>\n\t\t\t<interceptor-ref name=\"second\"></interceptor-ref>\n\t\t\t<result type=\"json\">\n\t\t\t\t<param name=\"root\">data</param>\n\t\t\t</result>\n\t\t\t<result name=\"inter\">/index.jsp</result>\n\t\t</action>\n\t</package>\n```\n#### 为了对拦截进行统一处理 使用MethodFilterInterceptor排除不需要的方法\n\nMethodFilterInterceptor中需要重写doIntercept（）\n\n其中两个属性配置\n* excludeMethods 不要被拦截的方法 注意方法名不是action的命名而是在类中实际的名称（execute..）\n* includeMethods 需要被拦截的方法\n\n#### example配置一个简单登录效果的demo\n* 编写登录的Action\t 给每个登录过的人分配session\n\n```java\npublic class LoginAction extends ActionSupport {\n\n\tprivate static final long serialVersionUID = 5890861426406772110L;\n\tprivate String username;\n\tprivate String password;\n\n\t//getter and setter\n\n\t@Override\n\tpublic String execute() throws Exception {\n\t\tHttpSession session = ServletActionContext.getRequest().getSession();\n\t\tsession.setAttribute(\"username\", username);\n\t\treturn SUCCESS;\n\t}\n}\n```\n* 编写进入登录页的Action 直接结果进入主页\n\n```java\npublic class IndexAction extends ActionSupport{\n\tprivate static final long serialVersionUID = -5982176418945798657L;\n\t@Override\n\tpublic String execute() throws Exception {\n\t\treturn SUCCESS;\n\t}\n}\n```\n* 编写Interceptor在没有登录之前访问其他页面返回登录页面 在没有session之前都返回login\n\n```java\npublic class LoginInterceptor extends MethodFilterInterceptor {\n\n\n\tprivate static final long serialVersionUID = -9195077688930132383L;\n\n\t@Override\n\tprotected String doIntercept(ActionInvocation invocation) throws Exception {\n\n\t\tHttpSession session = ServletActionContext.getRequest().getSession();\n\t\tObject username = session.getAttribute(\"username\");\n\t\tif (username==null) {\n\t\t\treturn \"login\";\n\t\t}\n\t\tString invoke = invocation.invoke();\n\t\treturn invoke;\n\t}\n\n}\n```\n* 编写login.jsp\n\n```html\n<%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\n    pageEncoding=\"UTF-8\"%>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n<title>Login Page</title>\n</head>\n<body>\n\t<form action=\"${pageContext.request.contextPath}/login.action\">\n\t\t用户名<input type=\"text\" name=\"username\"/><br/>\n\t\t密码<input type=\"password\" name=\"password\"/><br/>\n\t\t<input type=\"submit\" value=\"登录\">\n\t</form>\n</body>\n</html>\n```\n* 配置struts.xml\n\n```xml\n<package name=\"s\" extends=\"struts-default\" namespace=\"/\">\n\t<interceptors>\n\t\t\t<interceptor name=\"check\" class=\"com.eason.interceptor.LoginInterceptor\" /> //注册自定义的interceptor\n\t\t\t<interceptor-stack name=\"myInter\">\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//将struts2默认的defaultStack填入\n\t\t\t\t<interceptor-ref name=\"defaultStack\"></interceptor-ref>\n\t\t\t\t<interceptor-ref name=\"check\"></interceptor-ref>\n\t\t\t</interceptor-stack>\n\t\t</interceptors>\n\t\t<default-interceptor-ref name=\"myInter\"></default-interceptor-ref>  //配置myInter为全局的拦截器\n\t\t<global-results>\n\t\t\t<result name=\"login\" type=\"redirect\">/login.jsp</result>     //统一处理结果 返回这个结果的都重定向为login.jsp\n\t\t</global-results>\n\t\t<action name=\"login\" class=\"com.eason.action.LoginAction\">\n\t\t\t<interceptor-ref name=\"myInter\">\n\t\t\t\t<param name=\"check.excludeMethods\">execute</param>     //排除不需要拦截的方法 注意此方法为类中的方法名\n\t\t\t</interceptor-ref>\n\t\t\t<result type=\"redirectAction\">index</result>\n\t\t</action>\n\t\t<action name=\"index\" class=\"com.eason.action.IndexAction\">\n\t\t\t<result type=\"redirect\">/index.jsp</result>\n\t\t</action>\n\t</package>\n```\n### demo\n[demo.zip](http://omy391n59.bkt.clouddn.com/zip/struts2/demologin.rar)\n","slug":"struts2拦截器","published":1,"updated":"2017-05-13T02:17:40.941Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4qaebd7000w2oq9vigv7hn5","content":"<h2 id=\"struts2的工作流程\"><a href=\"#struts2的工作流程\" class=\"headerlink\" title=\"struts2的工作流程\"></a>struts2的工作流程</h2><p><img src=\"http://omy391n59.bkt.clouddn.com/image/struts2/Struts2-Architecture_%E6%96%B0%E7%89%88%E6%9C%AC.png\" alt=\"struts2的工作方式\"><br><a id=\"more\"></a></p>\n<h3 id=\"在自定义拦截器流程\"><a href=\"#在自定义拦截器流程\" class=\"headerlink\" title=\"在自定义拦截器流程\"></a>在自定义拦截器流程</h3><p>如果配置了自定义拦截器会导致struts2本身的拦截器失效 需要加配置<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">interceptor-ref</span> <span class=\"attr\">name</span>=<span class=\"string\">\"defaultStack\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">interceptor-ref</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>1-2-3-action-result-3-2-1</p>\n<h4 id=\"自定义拦截器使用方式\"><a href=\"#自定义拦截器使用方式\" class=\"headerlink\" title=\"自定义拦截器使用方式\"></a>自定义拦截器使用方式</h4><ul>\n<li>新建一个类继承自AbstractInterceptor</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyFirstInterceptor</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractInterceptor</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">4027957068302300754L</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">intercept</span><span class=\"params\">(ActionInvocation invocation)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"拦截器1\"</span>);<span class=\"comment\">//进入action之前执行</span></div><div class=\"line\">\t\tinvocation.invoke(); <span class=\"comment\">//代表进行下一步，这里不再拦截</span></div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"拦截器1返回\"</span>);<span class=\"comment\">//返回之后执行</span></div><div class=\"line\">    <span class=\"comment\">//可以再此拦截</span></div><div class=\"line\">    <span class=\"comment\">//return “inter”</span></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>配置struts.xml</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">package</span> <span class=\"attr\">name</span>=<span class=\"string\">\"default\"</span> <span class=\"attr\">extends</span>=<span class=\"string\">\"json-default\"</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">interceptors</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">interceptor</span> <span class=\"attr\">name</span>=<span class=\"string\">\"first\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"eason.test.maven.MyFirstInterceptor\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">interceptor</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">interceptors</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">name</span>=<span class=\"string\">\"login\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"eason.test.maven.Login\"</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">interceptor-ref</span> <span class=\"attr\">name</span>=<span class=\"string\">\"first\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">interceptor-ref</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">interceptor-ref</span> <span class=\"attr\">name</span>=<span class=\"string\">\"second\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">interceptor-ref</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">type</span>=<span class=\"string\">\"json\"</span>&gt;</span></div><div class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"root\"</span>&gt;</span>data<span class=\"tag\">&lt;/<span class=\"name\">param</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">name</span>=<span class=\"string\">\"inter\"</span>&gt;</span>/index.jsp<span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">action</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">package</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"为了对拦截进行统一处理-使用MethodFilterInterceptor排除不需要的方法\"><a href=\"#为了对拦截进行统一处理-使用MethodFilterInterceptor排除不需要的方法\" class=\"headerlink\" title=\"为了对拦截进行统一处理 使用MethodFilterInterceptor排除不需要的方法\"></a>为了对拦截进行统一处理 使用MethodFilterInterceptor排除不需要的方法</h4><p>MethodFilterInterceptor中需要重写doIntercept（）</p>\n<p>其中两个属性配置</p>\n<ul>\n<li>excludeMethods 不要被拦截的方法 注意方法名不是action的命名而是在类中实际的名称（execute..）</li>\n<li>includeMethods 需要被拦截的方法</li>\n</ul>\n<h4 id=\"example配置一个简单登录效果的demo\"><a href=\"#example配置一个简单登录效果的demo\" class=\"headerlink\" title=\"example配置一个简单登录效果的demo\"></a>example配置一个简单登录效果的demo</h4><ul>\n<li>编写登录的Action     给每个登录过的人分配session</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoginAction</span> <span class=\"keyword\">extends</span> <span class=\"title\">ActionSupport</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">5890861426406772110L</span>;</div><div class=\"line\">\t<span class=\"keyword\">private</span> String username;</div><div class=\"line\">\t<span class=\"keyword\">private</span> String password;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">//getter and setter</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">execute</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">\t\tHttpSession session = ServletActionContext.getRequest().getSession();</div><div class=\"line\">\t\tsession.setAttribute(<span class=\"string\">\"username\"</span>, username);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> SUCCESS;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>编写进入登录页的Action 直接结果进入主页</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IndexAction</span> <span class=\"keyword\">extends</span> <span class=\"title\">ActionSupport</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = -<span class=\"number\">5982176418945798657L</span>;</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">execute</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> SUCCESS;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>编写Interceptor在没有登录之前访问其他页面返回登录页面 在没有session之前都返回login</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoginInterceptor</span> <span class=\"keyword\">extends</span> <span class=\"title\">MethodFilterInterceptor</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = -<span class=\"number\">9195077688930132383L</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> String <span class=\"title\">doIntercept</span><span class=\"params\">(ActionInvocation invocation)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t\tHttpSession session = ServletActionContext.getRequest().getSession();</div><div class=\"line\">\t\tObject username = session.getAttribute(<span class=\"string\">\"username\"</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (username==<span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"login\"</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tString invoke = invocation.invoke();</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> invoke;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>编写login.jsp</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%@</span> <span class=\"attr\">page</span> <span class=\"attr\">language</span>=<span class=\"string\">\"java\"</span> <span class=\"attr\">contentType</span>=<span class=\"string\">\"text/html; charset=UTF-8\"</span></span></div><div class=\"line\">    <span class=\"attr\">pageEncoding</span>=<span class=\"string\">\"UTF-8\"</span>%&gt;</div><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\"&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"Content-Type\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"text/html; charset=UTF-8\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Login Page<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"$&#123;pageContext.request.contextPath&#125;/login.action\"</span>&gt;</span></div><div class=\"line\">\t\t用户名<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span>/&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></div><div class=\"line\">\t\t密码<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span>/&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"登录\"</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<ul>\n<li>配置struts.xml</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">package</span> <span class=\"attr\">name</span>=<span class=\"string\">\"s\"</span> <span class=\"attr\">extends</span>=<span class=\"string\">\"struts-default\"</span> <span class=\"attr\">namespace</span>=<span class=\"string\">\"/\"</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">interceptors</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">interceptor</span> <span class=\"attr\">name</span>=<span class=\"string\">\"check\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.eason.interceptor.LoginInterceptor\"</span> /&gt;</span> //注册自定义的interceptor</div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">interceptor-stack</span> <span class=\"attr\">name</span>=<span class=\"string\">\"myInter\"</span>&gt;</span>\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//将struts2默认的defaultStack填入</div><div class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">interceptor-ref</span> <span class=\"attr\">name</span>=<span class=\"string\">\"defaultStack\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">interceptor-ref</span>&gt;</span></div><div class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">interceptor-ref</span> <span class=\"attr\">name</span>=<span class=\"string\">\"check\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">interceptor-ref</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">interceptor-stack</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">interceptors</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">default-interceptor-ref</span> <span class=\"attr\">name</span>=<span class=\"string\">\"myInter\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">default-interceptor-ref</span>&gt;</span>  //配置myInter为全局的拦截器</div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">global-results</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">name</span>=<span class=\"string\">\"login\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"redirect\"</span>&gt;</span>/login.jsp<span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span>     //统一处理结果 返回这个结果的都重定向为login.jsp</div><div class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">global-results</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">name</span>=<span class=\"string\">\"login\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.eason.action.LoginAction\"</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">interceptor-ref</span> <span class=\"attr\">name</span>=<span class=\"string\">\"myInter\"</span>&gt;</span></div><div class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"check.excludeMethods\"</span>&gt;</span>execute<span class=\"tag\">&lt;/<span class=\"name\">param</span>&gt;</span>     //排除不需要拦截的方法 注意此方法为类中的方法名</div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">interceptor-ref</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">type</span>=<span class=\"string\">\"redirectAction\"</span>&gt;</span>index<span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">action</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">name</span>=<span class=\"string\">\"index\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.eason.action.IndexAction\"</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">type</span>=<span class=\"string\">\"redirect\"</span>&gt;</span>/index.jsp<span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">action</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">package</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"demo\"><a href=\"#demo\" class=\"headerlink\" title=\"demo\"></a>demo</h3><p><a href=\"http://omy391n59.bkt.clouddn.com/zip/struts2/demologin.rar\" target=\"_blank\" rel=\"external\">demo.zip</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"struts2的工作流程\"><a href=\"#struts2的工作流程\" class=\"headerlink\" title=\"struts2的工作流程\"></a>struts2的工作流程</h2><p><img src=\"http://omy391n59.bkt.clouddn.com/image/struts2/Struts2-Architecture_%E6%96%B0%E7%89%88%E6%9C%AC.png\" alt=\"struts2的工作方式\"><br>","more":"</p>\n<h3 id=\"在自定义拦截器流程\"><a href=\"#在自定义拦截器流程\" class=\"headerlink\" title=\"在自定义拦截器流程\"></a>在自定义拦截器流程</h3><p>如果配置了自定义拦截器会导致struts2本身的拦截器失效 需要加配置<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">interceptor-ref</span> <span class=\"attr\">name</span>=<span class=\"string\">\"defaultStack\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">interceptor-ref</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>1-2-3-action-result-3-2-1</p>\n<h4 id=\"自定义拦截器使用方式\"><a href=\"#自定义拦截器使用方式\" class=\"headerlink\" title=\"自定义拦截器使用方式\"></a>自定义拦截器使用方式</h4><ul>\n<li>新建一个类继承自AbstractInterceptor</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyFirstInterceptor</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractInterceptor</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">4027957068302300754L</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">intercept</span><span class=\"params\">(ActionInvocation invocation)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"拦截器1\"</span>);<span class=\"comment\">//进入action之前执行</span></div><div class=\"line\">\t\tinvocation.invoke(); <span class=\"comment\">//代表进行下一步，这里不再拦截</span></div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"拦截器1返回\"</span>);<span class=\"comment\">//返回之后执行</span></div><div class=\"line\">    <span class=\"comment\">//可以再此拦截</span></div><div class=\"line\">    <span class=\"comment\">//return “inter”</span></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>配置struts.xml</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">package</span> <span class=\"attr\">name</span>=<span class=\"string\">\"default\"</span> <span class=\"attr\">extends</span>=<span class=\"string\">\"json-default\"</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">interceptors</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">interceptor</span> <span class=\"attr\">name</span>=<span class=\"string\">\"first\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"eason.test.maven.MyFirstInterceptor\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">interceptor</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">interceptors</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">name</span>=<span class=\"string\">\"login\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"eason.test.maven.Login\"</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">interceptor-ref</span> <span class=\"attr\">name</span>=<span class=\"string\">\"first\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">interceptor-ref</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">interceptor-ref</span> <span class=\"attr\">name</span>=<span class=\"string\">\"second\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">interceptor-ref</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">type</span>=<span class=\"string\">\"json\"</span>&gt;</span></div><div class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"root\"</span>&gt;</span>data<span class=\"tag\">&lt;/<span class=\"name\">param</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">name</span>=<span class=\"string\">\"inter\"</span>&gt;</span>/index.jsp<span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">action</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">package</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"为了对拦截进行统一处理-使用MethodFilterInterceptor排除不需要的方法\"><a href=\"#为了对拦截进行统一处理-使用MethodFilterInterceptor排除不需要的方法\" class=\"headerlink\" title=\"为了对拦截进行统一处理 使用MethodFilterInterceptor排除不需要的方法\"></a>为了对拦截进行统一处理 使用MethodFilterInterceptor排除不需要的方法</h4><p>MethodFilterInterceptor中需要重写doIntercept（）</p>\n<p>其中两个属性配置</p>\n<ul>\n<li>excludeMethods 不要被拦截的方法 注意方法名不是action的命名而是在类中实际的名称（execute..）</li>\n<li>includeMethods 需要被拦截的方法</li>\n</ul>\n<h4 id=\"example配置一个简单登录效果的demo\"><a href=\"#example配置一个简单登录效果的demo\" class=\"headerlink\" title=\"example配置一个简单登录效果的demo\"></a>example配置一个简单登录效果的demo</h4><ul>\n<li>编写登录的Action     给每个登录过的人分配session</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoginAction</span> <span class=\"keyword\">extends</span> <span class=\"title\">ActionSupport</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">5890861426406772110L</span>;</div><div class=\"line\">\t<span class=\"keyword\">private</span> String username;</div><div class=\"line\">\t<span class=\"keyword\">private</span> String password;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">//getter and setter</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">execute</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">\t\tHttpSession session = ServletActionContext.getRequest().getSession();</div><div class=\"line\">\t\tsession.setAttribute(<span class=\"string\">\"username\"</span>, username);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> SUCCESS;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>编写进入登录页的Action 直接结果进入主页</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IndexAction</span> <span class=\"keyword\">extends</span> <span class=\"title\">ActionSupport</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = -<span class=\"number\">5982176418945798657L</span>;</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">execute</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> SUCCESS;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>编写Interceptor在没有登录之前访问其他页面返回登录页面 在没有session之前都返回login</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoginInterceptor</span> <span class=\"keyword\">extends</span> <span class=\"title\">MethodFilterInterceptor</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = -<span class=\"number\">9195077688930132383L</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> String <span class=\"title\">doIntercept</span><span class=\"params\">(ActionInvocation invocation)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t\tHttpSession session = ServletActionContext.getRequest().getSession();</div><div class=\"line\">\t\tObject username = session.getAttribute(<span class=\"string\">\"username\"</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (username==<span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"login\"</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tString invoke = invocation.invoke();</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> invoke;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>编写login.jsp</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%@</span> <span class=\"attr\">page</span> <span class=\"attr\">language</span>=<span class=\"string\">\"java\"</span> <span class=\"attr\">contentType</span>=<span class=\"string\">\"text/html; charset=UTF-8\"</span></div><div class=\"line\">    <span class=\"attr\">pageEncoding</span>=<span class=\"string\">\"UTF-8\"</span>%&gt;</span></div><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\"&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"Content-Type\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"text/html; charset=UTF-8\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Login Page<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"$&#123;pageContext.request.contextPath&#125;/login.action\"</span>&gt;</span></div><div class=\"line\">\t\t用户名<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span>/&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></div><div class=\"line\">\t\t密码<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span>/&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"登录\"</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<ul>\n<li>配置struts.xml</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">package</span> <span class=\"attr\">name</span>=<span class=\"string\">\"s\"</span> <span class=\"attr\">extends</span>=<span class=\"string\">\"struts-default\"</span> <span class=\"attr\">namespace</span>=<span class=\"string\">\"/\"</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">interceptors</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">interceptor</span> <span class=\"attr\">name</span>=<span class=\"string\">\"check\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.eason.interceptor.LoginInterceptor\"</span> /&gt;</span> //注册自定义的interceptor</div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">interceptor-stack</span> <span class=\"attr\">name</span>=<span class=\"string\">\"myInter\"</span>&gt;</span>\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//将struts2默认的defaultStack填入</div><div class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">interceptor-ref</span> <span class=\"attr\">name</span>=<span class=\"string\">\"defaultStack\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">interceptor-ref</span>&gt;</span></div><div class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">interceptor-ref</span> <span class=\"attr\">name</span>=<span class=\"string\">\"check\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">interceptor-ref</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">interceptor-stack</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">interceptors</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">default-interceptor-ref</span> <span class=\"attr\">name</span>=<span class=\"string\">\"myInter\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">default-interceptor-ref</span>&gt;</span>  //配置myInter为全局的拦截器</div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">global-results</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">name</span>=<span class=\"string\">\"login\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"redirect\"</span>&gt;</span>/login.jsp<span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span>     //统一处理结果 返回这个结果的都重定向为login.jsp</div><div class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">global-results</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">name</span>=<span class=\"string\">\"login\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.eason.action.LoginAction\"</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">interceptor-ref</span> <span class=\"attr\">name</span>=<span class=\"string\">\"myInter\"</span>&gt;</span></div><div class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"check.excludeMethods\"</span>&gt;</span>execute<span class=\"tag\">&lt;/<span class=\"name\">param</span>&gt;</span>     //排除不需要拦截的方法 注意此方法为类中的方法名</div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">interceptor-ref</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">type</span>=<span class=\"string\">\"redirectAction\"</span>&gt;</span>index<span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">action</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">name</span>=<span class=\"string\">\"index\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.eason.action.IndexAction\"</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">type</span>=<span class=\"string\">\"redirect\"</span>&gt;</span>/index.jsp<span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">action</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">package</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"demo\"><a href=\"#demo\" class=\"headerlink\" title=\"demo\"></a>demo</h3><p><a href=\"http://omy391n59.bkt.clouddn.com/zip/struts2/demologin.rar\">demo.zip</a></p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cj4qaebcl00072oq96ezfz935","category_id":"cj4qaebcg00042oq9a3mqaa4d","_id":"cj4qaebct000c2oq95vs76e7c"},{"post_id":"cj4qaebbz00002oq9qf3l0u2s","category_id":"cj4qaebcg00042oq9a3mqaa4d","_id":"cj4qaebcw000g2oq9hcozg0cb"},{"post_id":"cj4qaebco00082oq9pj19nlkf","category_id":"cj4qaebcg00042oq9a3mqaa4d","_id":"cj4qaebcx000j2oq9rhip2zge"},{"post_id":"cj4qaebct000b2oq9lie1hu8u","category_id":"cj4qaebcg00042oq9a3mqaa4d","_id":"cj4qaebd0000o2oq9emzmcrr6"},{"post_id":"cj4qaebcd00022oq9hdq803am","category_id":"cj4qaebcg00042oq9a3mqaa4d","_id":"cj4qaebd2000q2oq93r87xklx"},{"post_id":"cj4qaebd5000u2oq9a2t6yg4f","category_id":"cj4qaebd4000s2oq94qz1doju","_id":"cj4qaebd900102oq9ty68x2o4"},{"post_id":"cj4qaebcw000h2oq9bete8mti","category_id":"cj4qaebd4000s2oq94qz1doju","_id":"cj4qaebda00112oq98lyq6l2s"},{"post_id":"cj4qaebd7000w2oq9vigv7hn5","category_id":"cj4qaebcg00042oq9a3mqaa4d","_id":"cj4qaebdb00142oq9zvdztyxj"},{"post_id":"cj4qaebcj00062oq90r0aqlpd","category_id":"cj4qaebcv000e2oq9w0f1qhoq","_id":"cj4qaebdc00162oq9ub72k3cb"},{"post_id":"cj4qaebcj00062oq90r0aqlpd","category_id":"cj4qaebd8000y2oq9qy7czhm3","_id":"cj4qaebdd001a2oq9tz6jz18n"},{"post_id":"cj4qaebcy000k2oq9manyq097","category_id":"cj4qaebcv000e2oq9w0f1qhoq","_id":"cj4qaebdg001b2oq947u545vn"},{"post_id":"cj4qaebcy000k2oq9manyq097","category_id":"cj4qaebda00122oq92e5tb36r","_id":"cj4qaebdi001e2oq9phyl6li0"},{"post_id":"cj4qaebd1000p2oq9chjslc1i","category_id":"cj4qaebcv000e2oq9w0f1qhoq","_id":"cj4qaebdj001g2oq97eeieura"},{"post_id":"cj4qaebd1000p2oq9chjslc1i","category_id":"cj4qaebdd00182oq9a05juqzp","_id":"cj4qaebdl001k2oq9h0nzedz2"},{"post_id":"cj4qaebcu000d2oq96cpmzmqy","category_id":"cj4qaebcv000e2oq9w0f1qhoq","_id":"cj4qaebdm001l2oq966c7cbtv"},{"post_id":"cj4qaebcu000d2oq96cpmzmqy","category_id":"cj4qaebdh001c2oq9avqxr9p9","_id":"cj4qaebdm001o2oq9tvqfdpr2"},{"post_id":"cj4qaebd3000r2oq9kn88hakw","category_id":"cj4qaebcv000e2oq9w0f1qhoq","_id":"cj4qaebdn001q2oq99vp47mbt"},{"post_id":"cj4qaebd3000r2oq9kn88hakw","category_id":"cj4qaebd8000y2oq9qy7czhm3","_id":"cj4qaebdo001t2oq9fp33ak14"}],"PostTag":[{"post_id":"cj4qaebbz00002oq9qf3l0u2s","tag_id":"cj4qaebcj00052oq95itmxyr1","_id":"cj4qaebcx000i2oq979nx4eun"},{"post_id":"cj4qaebbz00002oq9qf3l0u2s","tag_id":"cj4qaebcr000a2oq9m8yz1eor","_id":"cj4qaebcz000l2oq9klvhn6v0"},{"post_id":"cj4qaebcd00022oq9hdq803am","tag_id":"cj4qaebcv000f2oq9aei1gvi8","_id":"cj4qaebd6000v2oq925jbj6qk"},{"post_id":"cj4qaebcd00022oq9hdq803am","tag_id":"cj4qaebcr000a2oq9m8yz1eor","_id":"cj4qaebd8000x2oq9dudineek"},{"post_id":"cj4qaebcj00062oq90r0aqlpd","tag_id":"cj4qaebd5000t2oq9bmkrbju3","_id":"cj4qaebdb00152oq98s5w8sa7"},{"post_id":"cj4qaebcj00062oq90r0aqlpd","tag_id":"cj4qaebd9000z2oq9yurh7j97","_id":"cj4qaebdd00172oq9c9v9o8jk"},{"post_id":"cj4qaebcl00072oq96ezfz935","tag_id":"cj4qaebdb00132oq9sxy2m7f3","_id":"cj4qaebdi001f2oq9xqq2ga6o"},{"post_id":"cj4qaebcl00072oq96ezfz935","tag_id":"cj4qaebcr000a2oq9m8yz1eor","_id":"cj4qaebdk001h2oq99rbad8ut"},{"post_id":"cj4qaebco00082oq9pj19nlkf","tag_id":"cj4qaebdb00132oq9sxy2m7f3","_id":"cj4qaebdm001n2oq9ibfedydm"},{"post_id":"cj4qaebco00082oq9pj19nlkf","tag_id":"cj4qaebcr000a2oq9m8yz1eor","_id":"cj4qaebdm001p2oq9du4ktim1"},{"post_id":"cj4qaebct000b2oq9lie1hu8u","tag_id":"cj4qaebdb00132oq9sxy2m7f3","_id":"cj4qaebdn001s2oq9rqke1sxp"},{"post_id":"cj4qaebct000b2oq9lie1hu8u","tag_id":"cj4qaebcr000a2oq9m8yz1eor","_id":"cj4qaebdp001u2oq9ffdttze6"},{"post_id":"cj4qaebcu000d2oq96cpmzmqy","tag_id":"cj4qaebd5000t2oq9bmkrbju3","_id":"cj4qaebdq001w2oq9rsihgn17"},{"post_id":"cj4qaebcw000h2oq9bete8mti","tag_id":"cj4qaebdq001v2oq9hr0goy62","_id":"cj4qaebds001z2oq9gv13n7p3"},{"post_id":"cj4qaebcw000h2oq9bete8mti","tag_id":"cj4qaebdr001x2oq9kr7lmwgo","_id":"cj4qaebds00202oq9p49aynz9"},{"post_id":"cj4qaebcy000k2oq9manyq097","tag_id":"cj4qaebdr001y2oq9grou7yhy","_id":"cj4qaebdu00232oq9ju31z7si"},{"post_id":"cj4qaebcy000k2oq9manyq097","tag_id":"cj4qaebd5000t2oq9bmkrbju3","_id":"cj4qaebdu00242oq93u4rbjce"},{"post_id":"cj4qaebd1000p2oq9chjslc1i","tag_id":"cj4qaebd5000t2oq9bmkrbju3","_id":"cj4qaebdv00272oq9deus4qaj"},{"post_id":"cj4qaebd1000p2oq9chjslc1i","tag_id":"cj4qaebdu00252oq9lwxx7hsl","_id":"cj4qaebdv00282oq9gbcczw4c"},{"post_id":"cj4qaebd3000r2oq9kn88hakw","tag_id":"cj4qaebd5000t2oq9bmkrbju3","_id":"cj4qaebdv002b2oq908fff90z"},{"post_id":"cj4qaebd3000r2oq9kn88hakw","tag_id":"cj4qaebd9000z2oq9yurh7j97","_id":"cj4qaebdv002c2oq9br3yd0ht"},{"post_id":"cj4qaebd5000u2oq9a2t6yg4f","tag_id":"cj4qaebdv002a2oq9rgyuedqg","_id":"cj4qaebdw002f2oq97dltwlk2"},{"post_id":"cj4qaebd5000u2oq9a2t6yg4f","tag_id":"cj4qaebdr001x2oq9kr7lmwgo","_id":"cj4qaebdx002g2oq9ypc5j5bm"},{"post_id":"cj4qaebd7000w2oq9vigv7hn5","tag_id":"cj4qaebdb00132oq9sxy2m7f3","_id":"cj4qaebdx002h2oq9sidvfmc1"},{"post_id":"cj4qaebd7000w2oq9vigv7hn5","tag_id":"cj4qaebcr000a2oq9m8yz1eor","_id":"cj4qaebdx002i2oq9xzrcxegt"}],"Tag":[{"name":"spring","_id":"cj4qaebcj00052oq95itmxyr1"},{"name":"javaee","_id":"cj4qaebcr000a2oq9m8yz1eor"},{"name":"sql","_id":"cj4qaebcv000f2oq9aei1gvi8"},{"name":"笔记","_id":"cj4qaebd5000t2oq9bmkrbju3"},{"name":"java","_id":"cj4qaebd9000z2oq9yurh7j97"},{"name":"struts2","_id":"cj4qaebdb00132oq9sxy2m7f3"},{"name":"animation","_id":"cj4qaebdq001v2oq9hr0goy62"},{"name":"library","_id":"cj4qaebdr001x2oq9kr7lmwgo"},{"name":"android studio","_id":"cj4qaebdr001y2oq9grou7yhy"},{"name":"view","_id":"cj4qaebdu00252oq9lwxx7hsl"},{"name":"okhttp","_id":"cj4qaebdv002a2oq9rgyuedqg"}]}}